// $ANTLR 3.5.2 Hive.g 2016-06-19 22:42:00

package org.apache.hadoop.hive.ql.parse;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.tree.*;


/**
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
@SuppressWarnings("all")
public class HiveParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AMPERSAND", "BITWISEOR", "BITWISEXOR", 
		"BigintLiteral", "COLON", "COMMA", "COMMENT", "CharSetLiteral", "CharSetName", 
		"DIV", "DIVIDE", "DOLLAR", "DOT", "Digit", "EQUAL", "Exponent", "GREATERTHAN", 
		"GREATERTHANOREQUALTO", "HexDigit", "Identifier", "KW_ADD", "KW_AFTER", 
		"KW_ALL", "KW_ALTER", "KW_ANALYZE", "KW_AND", "KW_ARCHIVE", "KW_ARRAY", 
		"KW_AS", "KW_ASC", "KW_BEFORE", "KW_BETWEEN", "KW_BIGINT", "KW_BINARY", 
		"KW_BOOLEAN", "KW_BOTH", "KW_BUCKET", "KW_BUCKETS", "KW_BY", "KW_CASCADE", 
		"KW_CASE", "KW_CAST", "KW_CHANGE", "KW_CLUSTER", "KW_CLUSTERED", "KW_CLUSTERSTATUS", 
		"KW_COLLECTION", "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMPUTE", 
		"KW_CONCATENATE", "KW_CONTINUE", "KW_CREATE", "KW_CROSS", "KW_CURSOR", 
		"KW_DATA", "KW_DATABASE", "KW_DATABASES", "KW_DATE", "KW_DATETIME", "KW_DBPROPERTIES", 
		"KW_DEFERRED", "KW_DELETE", "KW_DELIMITED", "KW_DESC", "KW_DESCRIBE", 
		"KW_DIRECTORY", "KW_DISABLE", "KW_DISTINCT", "KW_DISTRIBUTE", "KW_DOUBLE", 
		"KW_DROP", "KW_ELEM_TYPE", "KW_ELSE", "KW_ENABLE", "KW_END", "KW_ESCAPED", 
		"KW_EXCLUSIVE", "KW_EXISTS", "KW_EXPLAIN", "KW_EXPORT", "KW_EXTENDED", 
		"KW_EXTERNAL", "KW_FALSE", "KW_FETCH", "KW_FIELDS", "KW_FILEFORMAT", "KW_FIRST", 
		"KW_FLOAT", "KW_FORMAT", "KW_FORMATTED", "KW_FROM", "KW_FULL", "KW_FUNCTION", 
		"KW_FUNCTIONS", "KW_GRANT", "KW_GROUP", "KW_HAVING", "KW_HOLD_DDLTIME", 
		"KW_IDXPROPERTIES", "KW_IF", "KW_IMPORT", "KW_IN", "KW_INDEX", "KW_INDEXES", 
		"KW_INPATH", "KW_INPUTDRIVER", "KW_INPUTFORMAT", "KW_INSERT", "KW_INT", 
		"KW_INTERSECT", "KW_INTO", "KW_IS", "KW_ITEMS", "KW_JOIN", "KW_KEYS", 
		"KW_KEY_TYPE", "KW_LATERAL", "KW_LEFT", "KW_LIKE", "KW_LIMIT", "KW_LINES", 
		"KW_LOAD", "KW_LOCAL", "KW_LOCATION", "KW_LOCK", "KW_LOCKS", "KW_LONG", 
		"KW_MAP", "KW_MAPJOIN", "KW_MATERIALIZED", "KW_MINUS", "KW_MSCK", "KW_NOT", 
		"KW_NO_DROP", "KW_NULL", "KW_OF", "KW_OFFLINE", "KW_ON", "KW_OPTION", 
		"KW_OR", "KW_ORDER", "KW_OUT", "KW_OUTER", "KW_OUTPUTDRIVER", "KW_OUTPUTFORMAT", 
		"KW_OVERWRITE", "KW_PARTITION", "KW_PARTITIONED", "KW_PARTITIONS", "KW_PERCENT", 
		"KW_PLUS", "KW_PRESERVE", "KW_PROCEDURE", "KW_PURGE", "KW_RANGE", "KW_RCFILE", 
		"KW_READ", "KW_READONLY", "KW_READS", "KW_REBUILD", "KW_RECORDREADER", 
		"KW_RECORDWRITER", "KW_REDUCE", "KW_REGEXP", "KW_RENAME", "KW_REPAIR", 
		"KW_REPLACE", "KW_RESTRICT", "KW_REVOKE", "KW_RIGHT", "KW_RLIKE", "KW_ROW", 
		"KW_SCHEMA", "KW_SCHEMAS", "KW_SELECT", "KW_SEMI", "KW_SEQUENCEFILE", 
		"KW_SERDE", "KW_SERDEPROPERTIES", "KW_SET", "KW_SHARED", "KW_SHOW", "KW_SHOW_DATABASE", 
		"KW_SMALLINT", "KW_SORT", "KW_SORTED", "KW_SSL", "KW_STATISTICS", "KW_STORED", 
		"KW_STREAMTABLE", "KW_STRING", "KW_STRUCT", "KW_TABLE", "KW_TABLES", "KW_TABLESAMPLE", 
		"KW_TBLPROPERTIES", "KW_TEMPORARY", "KW_TERMINATED", "KW_TEXTFILE", "KW_THEN", 
		"KW_TIMESTAMP", "KW_TINYINT", "KW_TO", "KW_TOUCH", "KW_TRANSFORM", "KW_TRIGGER", 
		"KW_TRUE", "KW_UNARCHIVE", "KW_UNDO", "KW_UNION", "KW_UNIONTYPE", "KW_UNIQUEJOIN", 
		"KW_UNLOCK", "KW_UNSIGNED", "KW_UPDATE", "KW_USE", "KW_USING", "KW_UTC", 
		"KW_UTCTIMESTAMP", "KW_VALUE_TYPE", "KW_VIEW", "KW_WHEN", "KW_WHERE", 
		"KW_WHILE", "KW_WITH", "LCURLY", "LESSTHAN", "LESSTHANOREQUALTO", "LPAREN", 
		"LSQUARE", "Letter", "MINUS", "MOD", "NOTEQUAL", "Number", "PLUS", "QUESTION", 
		"RCURLY", "RPAREN", "RSQUARE", "RegexComponent", "SEMICOLON", "STAR", 
		"SmallintLiteral", "StringLiteral", "TILDE", "TOK_ALIASLIST", "TOK_ALLCOLREF", 
		"TOK_ALTERDATABASE_PROPERTIES", "TOK_ALTERINDEX_PROPERTIES", "TOK_ALTERINDEX_REBUILD", 
		"TOK_ALTERTABLE_ADDCOLS", "TOK_ALTERTABLE_ADDPARTS", "TOK_ALTERTABLE_ALTERPARTS_MERGEFILES", 
		"TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE", "TOK_ALTERTABLE_ARCHIVE", "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION", 
		"TOK_ALTERTABLE_CLUSTER_SORT", "TOK_ALTERTABLE_DROPPARTS", "TOK_ALTERTABLE_FILEFORMAT", 
		"TOK_ALTERTABLE_LOCATION", "TOK_ALTERTABLE_PARTITION", "TOK_ALTERTABLE_PROPERTIES", 
		"TOK_ALTERTABLE_RENAME", "TOK_ALTERTABLE_RENAMECOL", "TOK_ALTERTABLE_RENAMEPART", 
		"TOK_ALTERTABLE_REPLACECOLS", "TOK_ALTERTABLE_SERDEPROPERTIES", "TOK_ALTERTABLE_SERIALIZER", 
		"TOK_ALTERTABLE_TOUCH", "TOK_ALTERTABLE_UNARCHIVE", "TOK_ALTERVIEW_ADDPARTS", 
		"TOK_ALTERVIEW_DROPPARTS", "TOK_ALTERVIEW_PROPERTIES", "TOK_ALTERVIEW_RENAME", 
		"TOK_ANALYZE", "TOK_BIGINT", "TOK_BINARY", "TOK_BOOLEAN", "TOK_CASCADE", 
		"TOK_CHARSETLITERAL", "TOK_CLUSTERBY", "TOK_COLTYPELIST", "TOK_CREATEDATABASE", 
		"TOK_CREATEFUNCTION", "TOK_CREATEINDEX", "TOK_CREATEINDEX_INDEXTBLNAME", 
		"TOK_CREATEROLE", "TOK_CREATETABLE", "TOK_CREATEVIEW", "TOK_DATABASECOMMENT", 
		"TOK_DATABASELOCATION", "TOK_DATABASEPROPERTIES", "TOK_DATE", "TOK_DATETIME", 
		"TOK_DBPROPLIST", "TOK_DEFERRED_REBUILDINDEX", "TOK_DESCDATABASE", "TOK_DESCFUNCTION", 
		"TOK_DESCTABLE", "TOK_DESTINATION", "TOK_DIR", "TOK_DISABLE", "TOK_DISTRIBUTEBY", 
		"TOK_DOUBLE", "TOK_DROPDATABASE", "TOK_DROPFUNCTION", "TOK_DROPINDEX", 
		"TOK_DROPROLE", "TOK_DROPTABLE", "TOK_DROPVIEW", "TOK_ENABLE", "TOK_EXPLAIN", 
		"TOK_EXPLIST", "TOK_EXPORT", "TOK_FALSE", "TOK_FILEFORMAT_GENERIC", "TOK_FLOAT", 
		"TOK_FROM", "TOK_FULLOUTERJOIN", "TOK_FUNCTION", "TOK_FUNCTIONDI", "TOK_FUNCTIONSTAR", 
		"TOK_GRANT", "TOK_GRANT_ROLE", "TOK_GRANT_WITH_OPTION", "TOK_GROUP", "TOK_GROUPBY", 
		"TOK_HAVING", "TOK_HINT", "TOK_HINTARGLIST", "TOK_HINTLIST", "TOK_HOLD_DDLTIME", 
		"TOK_IFEXISTS", "TOK_IFNOTEXISTS", "TOK_IMPORT", "TOK_INDEXCOMMENT", "TOK_INDEXPROPERTIES", 
		"TOK_INDEXPROPLIST", "TOK_INSERT", "TOK_INSERT_INTO", "TOK_INT", "TOK_ISNOTNULL", 
		"TOK_ISNULL", "TOK_JOIN", "TOK_LATERAL_VIEW", "TOK_LEFTOUTERJOIN", "TOK_LEFTSEMIJOIN", 
		"TOK_LIKETABLE", "TOK_LIMIT", "TOK_LIST", "TOK_LOAD", "TOK_LOCAL_DIR", 
		"TOK_LOCKTABLE", "TOK_MAP", "TOK_MAPJOIN", "TOK_MSCK", "TOK_NO_DROP", 
		"TOK_NULL", "TOK_OFFLINE", "TOK_OP_ADD", "TOK_OP_AND", "TOK_OP_BITAND", 
		"TOK_OP_BITNOT", "TOK_OP_BITOR", "TOK_OP_BITXOR", "TOK_OP_DIV", "TOK_OP_EQ", 
		"TOK_OP_GE", "TOK_OP_GT", "TOK_OP_LE", "TOK_OP_LIKE", "TOK_OP_LT", "TOK_OP_MOD", 
		"TOK_OP_MUL", "TOK_OP_NE", "TOK_OP_NOT", "TOK_OP_OR", "TOK_OP_SUB", "TOK_ORDERBY", 
		"TOK_ORREPLACE", "TOK_PARTITIONLOCATION", "TOK_PARTSPEC", "TOK_PARTVAL", 
		"TOK_PRINCIPAL_NAME", "TOK_PRIVILEGE", "TOK_PRIVILEGE_LIST", "TOK_PRIV_ALL", 
		"TOK_PRIV_ALTER_DATA", "TOK_PRIV_ALTER_METADATA", "TOK_PRIV_CREATE", "TOK_PRIV_DROP", 
		"TOK_PRIV_INDEX", "TOK_PRIV_LOCK", "TOK_PRIV_OBJECT", "TOK_PRIV_OBJECT_COL", 
		"TOK_PRIV_SELECT", "TOK_PRIV_SHOW_DATABASE", "TOK_QUERY", "TOK_READONLY", 
		"TOK_RECORDREADER", "TOK_RECORDWRITER", "TOK_RESTRICT", "TOK_REVOKE", 
		"TOK_REVOKE_ROLE", "TOK_RIGHTOUTERJOIN", "TOK_ROLE", "TOK_SELECT", "TOK_SELECTDI", 
		"TOK_SELEXPR", "TOK_SERDE", "TOK_SERDENAME", "TOK_SERDEPROPS", "TOK_SHOWDATABASES", 
		"TOK_SHOWFUNCTIONS", "TOK_SHOWINDEXES", "TOK_SHOWLOCKS", "TOK_SHOWPARTITIONS", 
		"TOK_SHOWTABLES", "TOK_SHOW_GRANT", "TOK_SHOW_ROLE_GRANT", "TOK_SHOW_TABLESTATUS", 
		"TOK_SMALLINT", "TOK_SORTBY", "TOK_STORAGEHANDLER", "TOK_STREAMTABLE", 
		"TOK_STRING", "TOK_STRINGLITERALSEQUENCE", "TOK_STRUCT", "TOK_SUBQUERY", 
		"TOK_SWITCHDATABASE", "TOK_TAB", "TOK_TABALIAS", "TOK_TABCOL", "TOK_TABCOLLIST", 
		"TOK_TABCOLNAME", "TOK_TABLEBUCKETS", "TOK_TABLEBUCKETSAMPLE", "TOK_TABLECOMMENT", 
		"TOK_TABLEFILEFORMAT", "TOK_TABLELOCATION", "TOK_TABLEPARTCOLS", "TOK_TABLEPROPERTIES", 
		"TOK_TABLEPROPERTY", "TOK_TABLEPROPLIST", "TOK_TABLEROWFORMAT", "TOK_TABLEROWFORMATCOLLITEMS", 
		"TOK_TABLEROWFORMATFIELD", "TOK_TABLEROWFORMATLINES", "TOK_TABLEROWFORMATMAPKEYS", 
		"TOK_TABLESERIALIZER", "TOK_TABLESPLITSAMPLE", "TOK_TABLE_OR_COL", "TOK_TABLE_PARTITION", 
		"TOK_TABNAME", "TOK_TABREF", "TOK_TABSORTCOLNAMEASC", "TOK_TABSORTCOLNAMEDESC", 
		"TOK_TABSRC", "TOK_TABTYPE", "TOK_TBLRCFILE", "TOK_TBLSEQUENCEFILE", "TOK_TBLTEXTFILE", 
		"TOK_TIMESTAMP", "TOK_TINYINT", "TOK_TMP_FILE", "TOK_TRANSFORM", "TOK_TRUE", 
		"TOK_UNION", "TOK_UNIONTYPE", "TOK_UNIQUEJOIN", "TOK_UNLOCKTABLE", "TOK_USER", 
		"TOK_USERSCRIPTCOLNAMES", "TOK_USERSCRIPTCOLSCHEMA", "TOK_VIEWPARTCOLS", 
		"TOK_WHERE", "TinyintLiteral", "WS"
	};
	public static final int EOF=-1;
	public static final int AMPERSAND=4;
	public static final int BITWISEOR=5;
	public static final int BITWISEXOR=6;
	public static final int BigintLiteral=7;
	public static final int COLON=8;
	public static final int COMMA=9;
	public static final int COMMENT=10;
	public static final int CharSetLiteral=11;
	public static final int CharSetName=12;
	public static final int DIV=13;
	public static final int DIVIDE=14;
	public static final int DOLLAR=15;
	public static final int DOT=16;
	public static final int Digit=17;
	public static final int EQUAL=18;
	public static final int Exponent=19;
	public static final int GREATERTHAN=20;
	public static final int GREATERTHANOREQUALTO=21;
	public static final int HexDigit=22;
	public static final int Identifier=23;
	public static final int KW_ADD=24;
	public static final int KW_AFTER=25;
	public static final int KW_ALL=26;
	public static final int KW_ALTER=27;
	public static final int KW_ANALYZE=28;
	public static final int KW_AND=29;
	public static final int KW_ARCHIVE=30;
	public static final int KW_ARRAY=31;
	public static final int KW_AS=32;
	public static final int KW_ASC=33;
	public static final int KW_BEFORE=34;
	public static final int KW_BETWEEN=35;
	public static final int KW_BIGINT=36;
	public static final int KW_BINARY=37;
	public static final int KW_BOOLEAN=38;
	public static final int KW_BOTH=39;
	public static final int KW_BUCKET=40;
	public static final int KW_BUCKETS=41;
	public static final int KW_BY=42;
	public static final int KW_CASCADE=43;
	public static final int KW_CASE=44;
	public static final int KW_CAST=45;
	public static final int KW_CHANGE=46;
	public static final int KW_CLUSTER=47;
	public static final int KW_CLUSTERED=48;
	public static final int KW_CLUSTERSTATUS=49;
	public static final int KW_COLLECTION=50;
	public static final int KW_COLUMN=51;
	public static final int KW_COLUMNS=52;
	public static final int KW_COMMENT=53;
	public static final int KW_COMPUTE=54;
	public static final int KW_CONCATENATE=55;
	public static final int KW_CONTINUE=56;
	public static final int KW_CREATE=57;
	public static final int KW_CROSS=58;
	public static final int KW_CURSOR=59;
	public static final int KW_DATA=60;
	public static final int KW_DATABASE=61;
	public static final int KW_DATABASES=62;
	public static final int KW_DATE=63;
	public static final int KW_DATETIME=64;
	public static final int KW_DBPROPERTIES=65;
	public static final int KW_DEFERRED=66;
	public static final int KW_DELETE=67;
	public static final int KW_DELIMITED=68;
	public static final int KW_DESC=69;
	public static final int KW_DESCRIBE=70;
	public static final int KW_DIRECTORY=71;
	public static final int KW_DISABLE=72;
	public static final int KW_DISTINCT=73;
	public static final int KW_DISTRIBUTE=74;
	public static final int KW_DOUBLE=75;
	public static final int KW_DROP=76;
	public static final int KW_ELEM_TYPE=77;
	public static final int KW_ELSE=78;
	public static final int KW_ENABLE=79;
	public static final int KW_END=80;
	public static final int KW_ESCAPED=81;
	public static final int KW_EXCLUSIVE=82;
	public static final int KW_EXISTS=83;
	public static final int KW_EXPLAIN=84;
	public static final int KW_EXPORT=85;
	public static final int KW_EXTENDED=86;
	public static final int KW_EXTERNAL=87;
	public static final int KW_FALSE=88;
	public static final int KW_FETCH=89;
	public static final int KW_FIELDS=90;
	public static final int KW_FILEFORMAT=91;
	public static final int KW_FIRST=92;
	public static final int KW_FLOAT=93;
	public static final int KW_FORMAT=94;
	public static final int KW_FORMATTED=95;
	public static final int KW_FROM=96;
	public static final int KW_FULL=97;
	public static final int KW_FUNCTION=98;
	public static final int KW_FUNCTIONS=99;
	public static final int KW_GRANT=100;
	public static final int KW_GROUP=101;
	public static final int KW_HAVING=102;
	public static final int KW_HOLD_DDLTIME=103;
	public static final int KW_IDXPROPERTIES=104;
	public static final int KW_IF=105;
	public static final int KW_IMPORT=106;
	public static final int KW_IN=107;
	public static final int KW_INDEX=108;
	public static final int KW_INDEXES=109;
	public static final int KW_INPATH=110;
	public static final int KW_INPUTDRIVER=111;
	public static final int KW_INPUTFORMAT=112;
	public static final int KW_INSERT=113;
	public static final int KW_INT=114;
	public static final int KW_INTERSECT=115;
	public static final int KW_INTO=116;
	public static final int KW_IS=117;
	public static final int KW_ITEMS=118;
	public static final int KW_JOIN=119;
	public static final int KW_KEYS=120;
	public static final int KW_KEY_TYPE=121;
	public static final int KW_LATERAL=122;
	public static final int KW_LEFT=123;
	public static final int KW_LIKE=124;
	public static final int KW_LIMIT=125;
	public static final int KW_LINES=126;
	public static final int KW_LOAD=127;
	public static final int KW_LOCAL=128;
	public static final int KW_LOCATION=129;
	public static final int KW_LOCK=130;
	public static final int KW_LOCKS=131;
	public static final int KW_LONG=132;
	public static final int KW_MAP=133;
	public static final int KW_MAPJOIN=134;
	public static final int KW_MATERIALIZED=135;
	public static final int KW_MINUS=136;
	public static final int KW_MSCK=137;
	public static final int KW_NOT=138;
	public static final int KW_NO_DROP=139;
	public static final int KW_NULL=140;
	public static final int KW_OF=141;
	public static final int KW_OFFLINE=142;
	public static final int KW_ON=143;
	public static final int KW_OPTION=144;
	public static final int KW_OR=145;
	public static final int KW_ORDER=146;
	public static final int KW_OUT=147;
	public static final int KW_OUTER=148;
	public static final int KW_OUTPUTDRIVER=149;
	public static final int KW_OUTPUTFORMAT=150;
	public static final int KW_OVERWRITE=151;
	public static final int KW_PARTITION=152;
	public static final int KW_PARTITIONED=153;
	public static final int KW_PARTITIONS=154;
	public static final int KW_PERCENT=155;
	public static final int KW_PLUS=156;
	public static final int KW_PRESERVE=157;
	public static final int KW_PROCEDURE=158;
	public static final int KW_PURGE=159;
	public static final int KW_RANGE=160;
	public static final int KW_RCFILE=161;
	public static final int KW_READ=162;
	public static final int KW_READONLY=163;
	public static final int KW_READS=164;
	public static final int KW_REBUILD=165;
	public static final int KW_RECORDREADER=166;
	public static final int KW_RECORDWRITER=167;
	public static final int KW_REDUCE=168;
	public static final int KW_REGEXP=169;
	public static final int KW_RENAME=170;
	public static final int KW_REPAIR=171;
	public static final int KW_REPLACE=172;
	public static final int KW_RESTRICT=173;
	public static final int KW_REVOKE=174;
	public static final int KW_RIGHT=175;
	public static final int KW_RLIKE=176;
	public static final int KW_ROW=177;
	public static final int KW_SCHEMA=178;
	public static final int KW_SCHEMAS=179;
	public static final int KW_SELECT=180;
	public static final int KW_SEMI=181;
	public static final int KW_SEQUENCEFILE=182;
	public static final int KW_SERDE=183;
	public static final int KW_SERDEPROPERTIES=184;
	public static final int KW_SET=185;
	public static final int KW_SHARED=186;
	public static final int KW_SHOW=187;
	public static final int KW_SHOW_DATABASE=188;
	public static final int KW_SMALLINT=189;
	public static final int KW_SORT=190;
	public static final int KW_SORTED=191;
	public static final int KW_SSL=192;
	public static final int KW_STATISTICS=193;
	public static final int KW_STORED=194;
	public static final int KW_STREAMTABLE=195;
	public static final int KW_STRING=196;
	public static final int KW_STRUCT=197;
	public static final int KW_TABLE=198;
	public static final int KW_TABLES=199;
	public static final int KW_TABLESAMPLE=200;
	public static final int KW_TBLPROPERTIES=201;
	public static final int KW_TEMPORARY=202;
	public static final int KW_TERMINATED=203;
	public static final int KW_TEXTFILE=204;
	public static final int KW_THEN=205;
	public static final int KW_TIMESTAMP=206;
	public static final int KW_TINYINT=207;
	public static final int KW_TO=208;
	public static final int KW_TOUCH=209;
	public static final int KW_TRANSFORM=210;
	public static final int KW_TRIGGER=211;
	public static final int KW_TRUE=212;
	public static final int KW_UNARCHIVE=213;
	public static final int KW_UNDO=214;
	public static final int KW_UNION=215;
	public static final int KW_UNIONTYPE=216;
	public static final int KW_UNIQUEJOIN=217;
	public static final int KW_UNLOCK=218;
	public static final int KW_UNSIGNED=219;
	public static final int KW_UPDATE=220;
	public static final int KW_USE=221;
	public static final int KW_USING=222;
	public static final int KW_UTC=223;
	public static final int KW_UTCTIMESTAMP=224;
	public static final int KW_VALUE_TYPE=225;
	public static final int KW_VIEW=226;
	public static final int KW_WHEN=227;
	public static final int KW_WHERE=228;
	public static final int KW_WHILE=229;
	public static final int KW_WITH=230;
	public static final int LCURLY=231;
	public static final int LESSTHAN=232;
	public static final int LESSTHANOREQUALTO=233;
	public static final int LPAREN=234;
	public static final int LSQUARE=235;
	public static final int Letter=236;
	public static final int MINUS=237;
	public static final int MOD=238;
	public static final int NOTEQUAL=239;
	public static final int Number=240;
	public static final int PLUS=241;
	public static final int QUESTION=242;
	public static final int RCURLY=243;
	public static final int RPAREN=244;
	public static final int RSQUARE=245;
	public static final int RegexComponent=246;
	public static final int SEMICOLON=247;
	public static final int STAR=248;
	public static final int SmallintLiteral=249;
	public static final int StringLiteral=250;
	public static final int TILDE=251;
	public static final int TOK_ALIASLIST=252;
	public static final int TOK_ALLCOLREF=253;
	public static final int TOK_ALTERDATABASE_PROPERTIES=254;
	public static final int TOK_ALTERINDEX_PROPERTIES=255;
	public static final int TOK_ALTERINDEX_REBUILD=256;
	public static final int TOK_ALTERTABLE_ADDCOLS=257;
	public static final int TOK_ALTERTABLE_ADDPARTS=258;
	public static final int TOK_ALTERTABLE_ALTERPARTS_MERGEFILES=259;
	public static final int TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE=260;
	public static final int TOK_ALTERTABLE_ARCHIVE=261;
	public static final int TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION=262;
	public static final int TOK_ALTERTABLE_CLUSTER_SORT=263;
	public static final int TOK_ALTERTABLE_DROPPARTS=264;
	public static final int TOK_ALTERTABLE_FILEFORMAT=265;
	public static final int TOK_ALTERTABLE_LOCATION=266;
	public static final int TOK_ALTERTABLE_PARTITION=267;
	public static final int TOK_ALTERTABLE_PROPERTIES=268;
	public static final int TOK_ALTERTABLE_RENAME=269;
	public static final int TOK_ALTERTABLE_RENAMECOL=270;
	public static final int TOK_ALTERTABLE_RENAMEPART=271;
	public static final int TOK_ALTERTABLE_REPLACECOLS=272;
	public static final int TOK_ALTERTABLE_SERDEPROPERTIES=273;
	public static final int TOK_ALTERTABLE_SERIALIZER=274;
	public static final int TOK_ALTERTABLE_TOUCH=275;
	public static final int TOK_ALTERTABLE_UNARCHIVE=276;
	public static final int TOK_ALTERVIEW_ADDPARTS=277;
	public static final int TOK_ALTERVIEW_DROPPARTS=278;
	public static final int TOK_ALTERVIEW_PROPERTIES=279;
	public static final int TOK_ALTERVIEW_RENAME=280;
	public static final int TOK_ANALYZE=281;
	public static final int TOK_BIGINT=282;
	public static final int TOK_BINARY=283;
	public static final int TOK_BOOLEAN=284;
	public static final int TOK_CASCADE=285;
	public static final int TOK_CHARSETLITERAL=286;
	public static final int TOK_CLUSTERBY=287;
	public static final int TOK_COLTYPELIST=288;
	public static final int TOK_CREATEDATABASE=289;
	public static final int TOK_CREATEFUNCTION=290;
	public static final int TOK_CREATEINDEX=291;
	public static final int TOK_CREATEINDEX_INDEXTBLNAME=292;
	public static final int TOK_CREATEROLE=293;
	public static final int TOK_CREATETABLE=294;
	public static final int TOK_CREATEVIEW=295;
	public static final int TOK_DATABASECOMMENT=296;
	public static final int TOK_DATABASELOCATION=297;
	public static final int TOK_DATABASEPROPERTIES=298;
	public static final int TOK_DATE=299;
	public static final int TOK_DATETIME=300;
	public static final int TOK_DBPROPLIST=301;
	public static final int TOK_DEFERRED_REBUILDINDEX=302;
	public static final int TOK_DESCDATABASE=303;
	public static final int TOK_DESCFUNCTION=304;
	public static final int TOK_DESCTABLE=305;
	public static final int TOK_DESTINATION=306;
	public static final int TOK_DIR=307;
	public static final int TOK_DISABLE=308;
	public static final int TOK_DISTRIBUTEBY=309;
	public static final int TOK_DOUBLE=310;
	public static final int TOK_DROPDATABASE=311;
	public static final int TOK_DROPFUNCTION=312;
	public static final int TOK_DROPINDEX=313;
	public static final int TOK_DROPROLE=314;
	public static final int TOK_DROPTABLE=315;
	public static final int TOK_DROPVIEW=316;
	public static final int TOK_ENABLE=317;
	public static final int TOK_EXPLAIN=318;
	public static final int TOK_EXPLIST=319;
	public static final int TOK_EXPORT=320;
	public static final int TOK_FALSE=321;
	public static final int TOK_FILEFORMAT_GENERIC=322;
	public static final int TOK_FLOAT=323;
	public static final int TOK_FROM=324;
	public static final int TOK_FULLOUTERJOIN=325;
	public static final int TOK_FUNCTION=326;
	public static final int TOK_FUNCTIONDI=327;
	public static final int TOK_FUNCTIONSTAR=328;
	public static final int TOK_GRANT=329;
	public static final int TOK_GRANT_ROLE=330;
	public static final int TOK_GRANT_WITH_OPTION=331;
	public static final int TOK_GROUP=332;
	public static final int TOK_GROUPBY=333;
	public static final int TOK_HAVING=334;
	public static final int TOK_HINT=335;
	public static final int TOK_HINTARGLIST=336;
	public static final int TOK_HINTLIST=337;
	public static final int TOK_HOLD_DDLTIME=338;
	public static final int TOK_IFEXISTS=339;
	public static final int TOK_IFNOTEXISTS=340;
	public static final int TOK_IMPORT=341;
	public static final int TOK_INDEXCOMMENT=342;
	public static final int TOK_INDEXPROPERTIES=343;
	public static final int TOK_INDEXPROPLIST=344;
	public static final int TOK_INSERT=345;
	public static final int TOK_INSERT_INTO=346;
	public static final int TOK_INT=347;
	public static final int TOK_ISNOTNULL=348;
	public static final int TOK_ISNULL=349;
	public static final int TOK_JOIN=350;
	public static final int TOK_LATERAL_VIEW=351;
	public static final int TOK_LEFTOUTERJOIN=352;
	public static final int TOK_LEFTSEMIJOIN=353;
	public static final int TOK_LIKETABLE=354;
	public static final int TOK_LIMIT=355;
	public static final int TOK_LIST=356;
	public static final int TOK_LOAD=357;
	public static final int TOK_LOCAL_DIR=358;
	public static final int TOK_LOCKTABLE=359;
	public static final int TOK_MAP=360;
	public static final int TOK_MAPJOIN=361;
	public static final int TOK_MSCK=362;
	public static final int TOK_NO_DROP=363;
	public static final int TOK_NULL=364;
	public static final int TOK_OFFLINE=365;
	public static final int TOK_OP_ADD=366;
	public static final int TOK_OP_AND=367;
	public static final int TOK_OP_BITAND=368;
	public static final int TOK_OP_BITNOT=369;
	public static final int TOK_OP_BITOR=370;
	public static final int TOK_OP_BITXOR=371;
	public static final int TOK_OP_DIV=372;
	public static final int TOK_OP_EQ=373;
	public static final int TOK_OP_GE=374;
	public static final int TOK_OP_GT=375;
	public static final int TOK_OP_LE=376;
	public static final int TOK_OP_LIKE=377;
	public static final int TOK_OP_LT=378;
	public static final int TOK_OP_MOD=379;
	public static final int TOK_OP_MUL=380;
	public static final int TOK_OP_NE=381;
	public static final int TOK_OP_NOT=382;
	public static final int TOK_OP_OR=383;
	public static final int TOK_OP_SUB=384;
	public static final int TOK_ORDERBY=385;
	public static final int TOK_ORREPLACE=386;
	public static final int TOK_PARTITIONLOCATION=387;
	public static final int TOK_PARTSPEC=388;
	public static final int TOK_PARTVAL=389;
	public static final int TOK_PRINCIPAL_NAME=390;
	public static final int TOK_PRIVILEGE=391;
	public static final int TOK_PRIVILEGE_LIST=392;
	public static final int TOK_PRIV_ALL=393;
	public static final int TOK_PRIV_ALTER_DATA=394;
	public static final int TOK_PRIV_ALTER_METADATA=395;
	public static final int TOK_PRIV_CREATE=396;
	public static final int TOK_PRIV_DROP=397;
	public static final int TOK_PRIV_INDEX=398;
	public static final int TOK_PRIV_LOCK=399;
	public static final int TOK_PRIV_OBJECT=400;
	public static final int TOK_PRIV_OBJECT_COL=401;
	public static final int TOK_PRIV_SELECT=402;
	public static final int TOK_PRIV_SHOW_DATABASE=403;
	public static final int TOK_QUERY=404;
	public static final int TOK_READONLY=405;
	public static final int TOK_RECORDREADER=406;
	public static final int TOK_RECORDWRITER=407;
	public static final int TOK_RESTRICT=408;
	public static final int TOK_REVOKE=409;
	public static final int TOK_REVOKE_ROLE=410;
	public static final int TOK_RIGHTOUTERJOIN=411;
	public static final int TOK_ROLE=412;
	public static final int TOK_SELECT=413;
	public static final int TOK_SELECTDI=414;
	public static final int TOK_SELEXPR=415;
	public static final int TOK_SERDE=416;
	public static final int TOK_SERDENAME=417;
	public static final int TOK_SERDEPROPS=418;
	public static final int TOK_SHOWDATABASES=419;
	public static final int TOK_SHOWFUNCTIONS=420;
	public static final int TOK_SHOWINDEXES=421;
	public static final int TOK_SHOWLOCKS=422;
	public static final int TOK_SHOWPARTITIONS=423;
	public static final int TOK_SHOWTABLES=424;
	public static final int TOK_SHOW_GRANT=425;
	public static final int TOK_SHOW_ROLE_GRANT=426;
	public static final int TOK_SHOW_TABLESTATUS=427;
	public static final int TOK_SMALLINT=428;
	public static final int TOK_SORTBY=429;
	public static final int TOK_STORAGEHANDLER=430;
	public static final int TOK_STREAMTABLE=431;
	public static final int TOK_STRING=432;
	public static final int TOK_STRINGLITERALSEQUENCE=433;
	public static final int TOK_STRUCT=434;
	public static final int TOK_SUBQUERY=435;
	public static final int TOK_SWITCHDATABASE=436;
	public static final int TOK_TAB=437;
	public static final int TOK_TABALIAS=438;
	public static final int TOK_TABCOL=439;
	public static final int TOK_TABCOLLIST=440;
	public static final int TOK_TABCOLNAME=441;
	public static final int TOK_TABLEBUCKETS=442;
	public static final int TOK_TABLEBUCKETSAMPLE=443;
	public static final int TOK_TABLECOMMENT=444;
	public static final int TOK_TABLEFILEFORMAT=445;
	public static final int TOK_TABLELOCATION=446;
	public static final int TOK_TABLEPARTCOLS=447;
	public static final int TOK_TABLEPROPERTIES=448;
	public static final int TOK_TABLEPROPERTY=449;
	public static final int TOK_TABLEPROPLIST=450;
	public static final int TOK_TABLEROWFORMAT=451;
	public static final int TOK_TABLEROWFORMATCOLLITEMS=452;
	public static final int TOK_TABLEROWFORMATFIELD=453;
	public static final int TOK_TABLEROWFORMATLINES=454;
	public static final int TOK_TABLEROWFORMATMAPKEYS=455;
	public static final int TOK_TABLESERIALIZER=456;
	public static final int TOK_TABLESPLITSAMPLE=457;
	public static final int TOK_TABLE_OR_COL=458;
	public static final int TOK_TABLE_PARTITION=459;
	public static final int TOK_TABNAME=460;
	public static final int TOK_TABREF=461;
	public static final int TOK_TABSORTCOLNAMEASC=462;
	public static final int TOK_TABSORTCOLNAMEDESC=463;
	public static final int TOK_TABSRC=464;
	public static final int TOK_TABTYPE=465;
	public static final int TOK_TBLRCFILE=466;
	public static final int TOK_TBLSEQUENCEFILE=467;
	public static final int TOK_TBLTEXTFILE=468;
	public static final int TOK_TIMESTAMP=469;
	public static final int TOK_TINYINT=470;
	public static final int TOK_TMP_FILE=471;
	public static final int TOK_TRANSFORM=472;
	public static final int TOK_TRUE=473;
	public static final int TOK_UNION=474;
	public static final int TOK_UNIONTYPE=475;
	public static final int TOK_UNIQUEJOIN=476;
	public static final int TOK_UNLOCKTABLE=477;
	public static final int TOK_USER=478;
	public static final int TOK_USERSCRIPTCOLNAMES=479;
	public static final int TOK_USERSCRIPTCOLSCHEMA=480;
	public static final int TOK_VIEWPARTCOLS=481;
	public static final int TOK_WHERE=482;
	public static final int TinyintLiteral=483;
	public static final int WS=484;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public HiveParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public HiveParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return HiveParser.tokenNames; }
	@Override public String getGrammarFileName() { return "Hive.g"; }


	  Stack msgs = new Stack<String>();


	public static class statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "statement"
	// Hive.g:281:1: statement : ( explainStatement EOF | execStatement EOF );
	public final HiveParser.statement_return statement() throws RecognitionException {
		HiveParser.statement_return retval = new HiveParser.statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token EOF2=null;
		Token EOF4=null;
		ParserRuleReturnScope explainStatement1 =null;
		ParserRuleReturnScope execStatement3 =null;

		CommonTree EOF2_tree=null;
		CommonTree EOF4_tree=null;

		try {
			// Hive.g:282:2: ( explainStatement EOF | execStatement EOF )
			int alt1=2;
			int LA1_0 = input.LA(1);
			if ( (LA1_0==KW_EXPLAIN) ) {
				alt1=1;
			}
			else if ( ((LA1_0 >= KW_ALTER && LA1_0 <= KW_ANALYZE)||LA1_0==KW_CREATE||(LA1_0 >= KW_DESC && LA1_0 <= KW_DESCRIBE)||LA1_0==KW_DROP||LA1_0==KW_EXPORT||LA1_0==KW_FROM||LA1_0==KW_GRANT||LA1_0==KW_IMPORT||LA1_0==KW_INSERT||LA1_0==KW_LOAD||LA1_0==KW_LOCK||LA1_0==KW_MAP||LA1_0==KW_MSCK||LA1_0==KW_REDUCE||LA1_0==KW_REVOKE||LA1_0==KW_SELECT||LA1_0==KW_SHOW||LA1_0==KW_UNLOCK||LA1_0==KW_USE) ) {
				alt1=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 1, 0, input);
				throw nvae;
			}

			switch (alt1) {
				case 1 :
					// Hive.g:282:4: explainStatement EOF
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_explainStatement_in_statement766);
					explainStatement1=explainStatement();
					state._fsp--;

					adaptor.addChild(root_0, explainStatement1.getTree());

					EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_statement768); 
					EOF2_tree = (CommonTree)adaptor.create(EOF2);
					adaptor.addChild(root_0, EOF2_tree);

					}
					break;
				case 2 :
					// Hive.g:283:4: execStatement EOF
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_execStatement_in_statement773);
					execStatement3=execStatement();
					state._fsp--;

					adaptor.addChild(root_0, execStatement3.getTree());

					EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_statement775); 
					EOF4_tree = (CommonTree)adaptor.create(EOF4);
					adaptor.addChild(root_0, EOF4_tree);

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class explainStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "explainStatement"
	// Hive.g:286:1: explainStatement : KW_EXPLAIN (explainOptions= KW_EXTENDED |explainOptions= KW_FORMATTED )? execStatement -> ^( TOK_EXPLAIN execStatement ( $explainOptions)? ) ;
	public final HiveParser.explainStatement_return explainStatement() throws RecognitionException {
		HiveParser.explainStatement_return retval = new HiveParser.explainStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token explainOptions=null;
		Token KW_EXPLAIN5=null;
		ParserRuleReturnScope execStatement6 =null;

		CommonTree explainOptions_tree=null;
		CommonTree KW_EXPLAIN5_tree=null;
		RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
		RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
		RewriteRuleTokenStream stream_KW_EXPLAIN=new RewriteRuleTokenStream(adaptor,"token KW_EXPLAIN");
		RewriteRuleSubtreeStream stream_execStatement=new RewriteRuleSubtreeStream(adaptor,"rule execStatement");

		 msgs.push("explain statement"); 
		try {
			// Hive.g:289:2: ( KW_EXPLAIN (explainOptions= KW_EXTENDED |explainOptions= KW_FORMATTED )? execStatement -> ^( TOK_EXPLAIN execStatement ( $explainOptions)? ) )
			// Hive.g:289:4: KW_EXPLAIN (explainOptions= KW_EXTENDED |explainOptions= KW_FORMATTED )? execStatement
			{
			KW_EXPLAIN5=(Token)match(input,KW_EXPLAIN,FOLLOW_KW_EXPLAIN_in_explainStatement796);  
			stream_KW_EXPLAIN.add(KW_EXPLAIN5);

			// Hive.g:289:15: (explainOptions= KW_EXTENDED |explainOptions= KW_FORMATTED )?
			int alt2=3;
			int LA2_0 = input.LA(1);
			if ( (LA2_0==KW_EXTENDED) ) {
				alt2=1;
			}
			else if ( (LA2_0==KW_FORMATTED) ) {
				alt2=2;
			}
			switch (alt2) {
				case 1 :
					// Hive.g:289:16: explainOptions= KW_EXTENDED
					{
					explainOptions=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_explainStatement801);  
					stream_KW_EXTENDED.add(explainOptions);

					}
					break;
				case 2 :
					// Hive.g:289:43: explainOptions= KW_FORMATTED
					{
					explainOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_explainStatement805);  
					stream_KW_FORMATTED.add(explainOptions);

					}
					break;

			}

			pushFollow(FOLLOW_execStatement_in_explainStatement809);
			execStatement6=execStatement();
			state._fsp--;

			stream_execStatement.add(execStatement6.getTree());
			// AST REWRITE
			// elements: explainOptions, execStatement
			// token labels: explainOptions
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_explainOptions=new RewriteRuleTokenStream(adaptor,"token explainOptions",explainOptions);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 290:7: -> ^( TOK_EXPLAIN execStatement ( $explainOptions)? )
			{
				// Hive.g:290:10: ^( TOK_EXPLAIN execStatement ( $explainOptions)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_EXPLAIN, "TOK_EXPLAIN"), root_1);
				adaptor.addChild(root_1, stream_execStatement.nextTree());
				// Hive.g:290:39: ( $explainOptions)?
				if ( stream_explainOptions.hasNext() ) {
					adaptor.addChild(root_1, stream_explainOptions.nextNode());
				}
				stream_explainOptions.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "explainStatement"


	public static class execStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "execStatement"
	// Hive.g:293:1: execStatement : ( queryStatementExpression | loadStatement | exportStatement | importStatement | ddlStatement );
	public final HiveParser.execStatement_return execStatement() throws RecognitionException {
		HiveParser.execStatement_return retval = new HiveParser.execStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope queryStatementExpression7 =null;
		ParserRuleReturnScope loadStatement8 =null;
		ParserRuleReturnScope exportStatement9 =null;
		ParserRuleReturnScope importStatement10 =null;
		ParserRuleReturnScope ddlStatement11 =null;


		 msgs.push("statement"); 
		try {
			// Hive.g:296:5: ( queryStatementExpression | loadStatement | exportStatement | importStatement | ddlStatement )
			int alt3=5;
			switch ( input.LA(1) ) {
			case KW_FROM:
			case KW_INSERT:
			case KW_MAP:
			case KW_REDUCE:
			case KW_SELECT:
				{
				alt3=1;
				}
				break;
			case KW_LOAD:
				{
				alt3=2;
				}
				break;
			case KW_EXPORT:
				{
				alt3=3;
				}
				break;
			case KW_IMPORT:
				{
				alt3=4;
				}
				break;
			case KW_ALTER:
			case KW_ANALYZE:
			case KW_CREATE:
			case KW_DESC:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_GRANT:
			case KW_LOCK:
			case KW_MSCK:
			case KW_REVOKE:
			case KW_SHOW:
			case KW_UNLOCK:
			case KW_USE:
				{
				alt3=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 3, 0, input);
				throw nvae;
			}
			switch (alt3) {
				case 1 :
					// Hive.g:296:7: queryStatementExpression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_queryStatementExpression_in_execStatement851);
					queryStatementExpression7=queryStatementExpression();
					state._fsp--;

					adaptor.addChild(root_0, queryStatementExpression7.getTree());

					}
					break;
				case 2 :
					// Hive.g:297:7: loadStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_loadStatement_in_execStatement859);
					loadStatement8=loadStatement();
					state._fsp--;

					adaptor.addChild(root_0, loadStatement8.getTree());

					}
					break;
				case 3 :
					// Hive.g:298:7: exportStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_exportStatement_in_execStatement867);
					exportStatement9=exportStatement();
					state._fsp--;

					adaptor.addChild(root_0, exportStatement9.getTree());

					}
					break;
				case 4 :
					// Hive.g:299:7: importStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_importStatement_in_execStatement875);
					importStatement10=importStatement();
					state._fsp--;

					adaptor.addChild(root_0, importStatement10.getTree());

					}
					break;
				case 5 :
					// Hive.g:300:7: ddlStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_ddlStatement_in_execStatement883);
					ddlStatement11=ddlStatement();
					state._fsp--;

					adaptor.addChild(root_0, ddlStatement11.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "execStatement"


	public static class loadStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "loadStatement"
	// Hive.g:303:1: loadStatement : KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) ;
	public final HiveParser.loadStatement_return loadStatement() throws RecognitionException {
		HiveParser.loadStatement_return retval = new HiveParser.loadStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token islocal=null;
		Token path=null;
		Token isoverwrite=null;
		Token KW_LOAD12=null;
		Token KW_DATA13=null;
		Token KW_INPATH14=null;
		Token KW_INTO15=null;
		Token KW_TABLE16=null;
		ParserRuleReturnScope tab =null;

		CommonTree islocal_tree=null;
		CommonTree path_tree=null;
		CommonTree isoverwrite_tree=null;
		CommonTree KW_LOAD12_tree=null;
		CommonTree KW_DATA13_tree=null;
		CommonTree KW_INPATH14_tree=null;
		CommonTree KW_INTO15_tree=null;
		CommonTree KW_TABLE16_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_INPATH=new RewriteRuleTokenStream(adaptor,"token KW_INPATH");
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
		RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_LOAD=new RewriteRuleTokenStream(adaptor,"token KW_LOAD");
		RewriteRuleTokenStream stream_KW_DATA=new RewriteRuleTokenStream(adaptor,"token KW_DATA");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");

		 msgs.push("load statement"); 
		try {
			// Hive.g:306:5: ( KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) )
			// Hive.g:306:7: KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition )
			{
			KW_LOAD12=(Token)match(input,KW_LOAD,FOLLOW_KW_LOAD_in_loadStatement910);  
			stream_KW_LOAD.add(KW_LOAD12);

			KW_DATA13=(Token)match(input,KW_DATA,FOLLOW_KW_DATA_in_loadStatement912);  
			stream_KW_DATA.add(KW_DATA13);

			// Hive.g:306:23: (islocal= KW_LOCAL )?
			int alt4=2;
			int LA4_0 = input.LA(1);
			if ( (LA4_0==KW_LOCAL) ) {
				alt4=1;
			}
			switch (alt4) {
				case 1 :
					// Hive.g:306:24: islocal= KW_LOCAL
					{
					islocal=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_loadStatement917);  
					stream_KW_LOCAL.add(islocal);

					}
					break;

			}

			KW_INPATH14=(Token)match(input,KW_INPATH,FOLLOW_KW_INPATH_in_loadStatement921);  
			stream_KW_INPATH.add(KW_INPATH14);

			// Hive.g:306:53: (path= StringLiteral )
			// Hive.g:306:54: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_loadStatement926);  
			stream_StringLiteral.add(path);

			}

			// Hive.g:306:74: (isoverwrite= KW_OVERWRITE )?
			int alt5=2;
			int LA5_0 = input.LA(1);
			if ( (LA5_0==KW_OVERWRITE) ) {
				alt5=1;
			}
			switch (alt5) {
				case 1 :
					// Hive.g:306:75: isoverwrite= KW_OVERWRITE
					{
					isoverwrite=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_loadStatement932);  
					stream_KW_OVERWRITE.add(isoverwrite);

					}
					break;

			}

			KW_INTO15=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_loadStatement936);  
			stream_KW_INTO.add(KW_INTO15);

			KW_TABLE16=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_loadStatement938);  
			stream_KW_TABLE.add(KW_TABLE16);

			// Hive.g:306:119: (tab= tableOrPartition )
			// Hive.g:306:120: tab= tableOrPartition
			{
			pushFollow(FOLLOW_tableOrPartition_in_loadStatement943);
			tab=tableOrPartition();
			state._fsp--;

			stream_tableOrPartition.add(tab.getTree());
			}

			// AST REWRITE
			// elements: tab, path, isoverwrite, islocal
			// token labels: islocal, isoverwrite, path
			// rule labels: retval, tab
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_islocal=new RewriteRuleTokenStream(adaptor,"token islocal",islocal);
			RewriteRuleTokenStream stream_isoverwrite=new RewriteRuleTokenStream(adaptor,"token isoverwrite",isoverwrite);
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 307:5: -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
			{
				// Hive.g:307:8: ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LOAD, "TOK_LOAD"), root_1);
				adaptor.addChild(root_1, stream_path.nextNode());
				adaptor.addChild(root_1, stream_tab.nextTree());
				// Hive.g:307:31: ( $islocal)?
				if ( stream_islocal.hasNext() ) {
					adaptor.addChild(root_1, stream_islocal.nextNode());
				}
				stream_islocal.reset();

				// Hive.g:307:41: ( $isoverwrite)?
				if ( stream_isoverwrite.hasNext() ) {
					adaptor.addChild(root_1, stream_isoverwrite.nextNode());
				}
				stream_isoverwrite.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "loadStatement"


	public static class exportStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "exportStatement"
	// Hive.g:310:1: exportStatement : KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) -> ^( TOK_EXPORT $tab $path) ;
	public final HiveParser.exportStatement_return exportStatement() throws RecognitionException {
		HiveParser.exportStatement_return retval = new HiveParser.exportStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token path=null;
		Token KW_EXPORT17=null;
		Token KW_TABLE18=null;
		Token KW_TO19=null;
		ParserRuleReturnScope tab =null;

		CommonTree path_tree=null;
		CommonTree KW_EXPORT17_tree=null;
		CommonTree KW_TABLE18_tree=null;
		CommonTree KW_TO19_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_EXPORT=new RewriteRuleTokenStream(adaptor,"token KW_EXPORT");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");

		 msgs.push("export statement"); 
		try {
			// Hive.g:313:5: ( KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) -> ^( TOK_EXPORT $tab $path) )
			// Hive.g:313:7: KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral )
			{
			KW_EXPORT17=(Token)match(input,KW_EXPORT,FOLLOW_KW_EXPORT_in_exportStatement995);  
			stream_KW_EXPORT.add(KW_EXPORT17);

			KW_TABLE18=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_exportStatement997);  
			stream_KW_TABLE.add(KW_TABLE18);

			// Hive.g:313:26: (tab= tableOrPartition )
			// Hive.g:313:27: tab= tableOrPartition
			{
			pushFollow(FOLLOW_tableOrPartition_in_exportStatement1002);
			tab=tableOrPartition();
			state._fsp--;

			stream_tableOrPartition.add(tab.getTree());
			}

			KW_TO19=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_exportStatement1005);  
			stream_KW_TO.add(KW_TO19);

			// Hive.g:313:55: (path= StringLiteral )
			// Hive.g:313:56: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_exportStatement1010);  
			stream_StringLiteral.add(path);

			}

			// AST REWRITE
			// elements: path, tab
			// token labels: path
			// rule labels: retval, tab
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 314:5: -> ^( TOK_EXPORT $tab $path)
			{
				// Hive.g:314:8: ^( TOK_EXPORT $tab $path)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_EXPORT, "TOK_EXPORT"), root_1);
				adaptor.addChild(root_1, stream_tab.nextTree());
				adaptor.addChild(root_1, stream_path.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exportStatement"


	public static class importStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "importStatement"
	// Hive.g:317:1: importStatement : KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) ;
	public final HiveParser.importStatement_return importStatement() throws RecognitionException {
		HiveParser.importStatement_return retval = new HiveParser.importStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ext=null;
		Token path=null;
		Token KW_IMPORT20=null;
		Token KW_TABLE21=null;
		Token KW_FROM22=null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope tableLocation23 =null;

		CommonTree ext_tree=null;
		CommonTree path_tree=null;
		CommonTree KW_IMPORT20_tree=null;
		CommonTree KW_TABLE21_tree=null;
		CommonTree KW_FROM22_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_IMPORT=new RewriteRuleTokenStream(adaptor,"token KW_IMPORT");
		RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");

		 msgs.push("import statement"); 
		try {
			// Hive.g:320:2: ( KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) )
			// Hive.g:320:4: KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )?
			{
			KW_IMPORT20=(Token)match(input,KW_IMPORT,FOLLOW_KW_IMPORT_in_importStatement1051);  
			stream_KW_IMPORT.add(KW_IMPORT20);

			// Hive.g:320:14: ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )?
			int alt7=2;
			int LA7_0 = input.LA(1);
			if ( (LA7_0==KW_EXTERNAL||LA7_0==KW_TABLE) ) {
				alt7=1;
			}
			switch (alt7) {
				case 1 :
					// Hive.g:320:15: (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition )
					{
					// Hive.g:320:15: (ext= KW_EXTERNAL )?
					int alt6=2;
					int LA6_0 = input.LA(1);
					if ( (LA6_0==KW_EXTERNAL) ) {
						alt6=1;
					}
					switch (alt6) {
						case 1 :
							// Hive.g:320:16: ext= KW_EXTERNAL
							{
							ext=(Token)match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_importStatement1057);  
							stream_KW_EXTERNAL.add(ext);

							}
							break;

					}

					KW_TABLE21=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_importStatement1061);  
					stream_KW_TABLE.add(KW_TABLE21);

					// Hive.g:320:43: (tab= tableOrPartition )
					// Hive.g:320:44: tab= tableOrPartition
					{
					pushFollow(FOLLOW_tableOrPartition_in_importStatement1066);
					tab=tableOrPartition();
					state._fsp--;

					stream_tableOrPartition.add(tab.getTree());
					}

					}
					break;

			}

			KW_FROM22=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_importStatement1071);  
			stream_KW_FROM.add(KW_FROM22);

			// Hive.g:320:76: (path= StringLiteral )
			// Hive.g:320:77: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_importStatement1076);  
			stream_StringLiteral.add(path);

			}

			// Hive.g:320:97: ( tableLocation )?
			int alt8=2;
			int LA8_0 = input.LA(1);
			if ( (LA8_0==KW_LOCATION) ) {
				alt8=1;
			}
			switch (alt8) {
				case 1 :
					// Hive.g:320:97: tableLocation
					{
					pushFollow(FOLLOW_tableLocation_in_importStatement1079);
					tableLocation23=tableLocation();
					state._fsp--;

					stream_tableLocation.add(tableLocation23.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tab, path, ext, tableLocation
			// token labels: path, ext
			// rule labels: retval, tab
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 321:5: -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
			{
				// Hive.g:321:8: ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_IMPORT, "TOK_IMPORT"), root_1);
				adaptor.addChild(root_1, stream_path.nextNode());
				// Hive.g:321:28: ( $tab)?
				if ( stream_tab.hasNext() ) {
					adaptor.addChild(root_1, stream_tab.nextTree());
				}
				stream_tab.reset();

				// Hive.g:321:34: ( $ext)?
				if ( stream_ext.hasNext() ) {
					adaptor.addChild(root_1, stream_ext.nextNode());
				}
				stream_ext.reset();

				// Hive.g:321:39: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "importStatement"


	public static class ddlStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ddlStatement"
	// Hive.g:324:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );
	public final HiveParser.ddlStatement_return ddlStatement() throws RecognitionException {
		HiveParser.ddlStatement_return retval = new HiveParser.ddlStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope createDatabaseStatement24 =null;
		ParserRuleReturnScope switchDatabaseStatement25 =null;
		ParserRuleReturnScope dropDatabaseStatement26 =null;
		ParserRuleReturnScope createTableStatement27 =null;
		ParserRuleReturnScope dropTableStatement28 =null;
		ParserRuleReturnScope alterStatement29 =null;
		ParserRuleReturnScope descStatement30 =null;
		ParserRuleReturnScope showStatement31 =null;
		ParserRuleReturnScope metastoreCheck32 =null;
		ParserRuleReturnScope createViewStatement33 =null;
		ParserRuleReturnScope dropViewStatement34 =null;
		ParserRuleReturnScope createFunctionStatement35 =null;
		ParserRuleReturnScope createIndexStatement36 =null;
		ParserRuleReturnScope dropIndexStatement37 =null;
		ParserRuleReturnScope dropFunctionStatement38 =null;
		ParserRuleReturnScope analyzeStatement39 =null;
		ParserRuleReturnScope lockStatement40 =null;
		ParserRuleReturnScope unlockStatement41 =null;
		ParserRuleReturnScope createRoleStatement42 =null;
		ParserRuleReturnScope dropRoleStatement43 =null;
		ParserRuleReturnScope grantPrivileges44 =null;
		ParserRuleReturnScope revokePrivileges45 =null;
		ParserRuleReturnScope showGrants46 =null;
		ParserRuleReturnScope showRoleGrants47 =null;
		ParserRuleReturnScope grantRole48 =null;
		ParserRuleReturnScope revokeRole49 =null;


		 msgs.push("ddl statement"); 
		try {
			// Hive.g:327:5: ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole )
			int alt9=26;
			alt9 = dfa9.predict(input);
			switch (alt9) {
				case 1 :
					// Hive.g:327:7: createDatabaseStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createDatabaseStatement_in_ddlStatement1131);
					createDatabaseStatement24=createDatabaseStatement();
					state._fsp--;

					adaptor.addChild(root_0, createDatabaseStatement24.getTree());

					}
					break;
				case 2 :
					// Hive.g:328:7: switchDatabaseStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_switchDatabaseStatement_in_ddlStatement1139);
					switchDatabaseStatement25=switchDatabaseStatement();
					state._fsp--;

					adaptor.addChild(root_0, switchDatabaseStatement25.getTree());

					}
					break;
				case 3 :
					// Hive.g:329:7: dropDatabaseStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropDatabaseStatement_in_ddlStatement1147);
					dropDatabaseStatement26=dropDatabaseStatement();
					state._fsp--;

					adaptor.addChild(root_0, dropDatabaseStatement26.getTree());

					}
					break;
				case 4 :
					// Hive.g:330:7: createTableStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createTableStatement_in_ddlStatement1155);
					createTableStatement27=createTableStatement();
					state._fsp--;

					adaptor.addChild(root_0, createTableStatement27.getTree());

					}
					break;
				case 5 :
					// Hive.g:331:7: dropTableStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropTableStatement_in_ddlStatement1163);
					dropTableStatement28=dropTableStatement();
					state._fsp--;

					adaptor.addChild(root_0, dropTableStatement28.getTree());

					}
					break;
				case 6 :
					// Hive.g:332:7: alterStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatement_in_ddlStatement1171);
					alterStatement29=alterStatement();
					state._fsp--;

					adaptor.addChild(root_0, alterStatement29.getTree());

					}
					break;
				case 7 :
					// Hive.g:333:7: descStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_descStatement_in_ddlStatement1179);
					descStatement30=descStatement();
					state._fsp--;

					adaptor.addChild(root_0, descStatement30.getTree());

					}
					break;
				case 8 :
					// Hive.g:334:7: showStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showStatement_in_ddlStatement1187);
					showStatement31=showStatement();
					state._fsp--;

					adaptor.addChild(root_0, showStatement31.getTree());

					}
					break;
				case 9 :
					// Hive.g:335:7: metastoreCheck
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_metastoreCheck_in_ddlStatement1195);
					metastoreCheck32=metastoreCheck();
					state._fsp--;

					adaptor.addChild(root_0, metastoreCheck32.getTree());

					}
					break;
				case 10 :
					// Hive.g:336:7: createViewStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createViewStatement_in_ddlStatement1203);
					createViewStatement33=createViewStatement();
					state._fsp--;

					adaptor.addChild(root_0, createViewStatement33.getTree());

					}
					break;
				case 11 :
					// Hive.g:337:7: dropViewStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropViewStatement_in_ddlStatement1211);
					dropViewStatement34=dropViewStatement();
					state._fsp--;

					adaptor.addChild(root_0, dropViewStatement34.getTree());

					}
					break;
				case 12 :
					// Hive.g:338:7: createFunctionStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createFunctionStatement_in_ddlStatement1219);
					createFunctionStatement35=createFunctionStatement();
					state._fsp--;

					adaptor.addChild(root_0, createFunctionStatement35.getTree());

					}
					break;
				case 13 :
					// Hive.g:339:7: createIndexStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createIndexStatement_in_ddlStatement1227);
					createIndexStatement36=createIndexStatement();
					state._fsp--;

					adaptor.addChild(root_0, createIndexStatement36.getTree());

					}
					break;
				case 14 :
					// Hive.g:340:7: dropIndexStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropIndexStatement_in_ddlStatement1235);
					dropIndexStatement37=dropIndexStatement();
					state._fsp--;

					adaptor.addChild(root_0, dropIndexStatement37.getTree());

					}
					break;
				case 15 :
					// Hive.g:341:7: dropFunctionStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropFunctionStatement_in_ddlStatement1243);
					dropFunctionStatement38=dropFunctionStatement();
					state._fsp--;

					adaptor.addChild(root_0, dropFunctionStatement38.getTree());

					}
					break;
				case 16 :
					// Hive.g:342:7: analyzeStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_analyzeStatement_in_ddlStatement1251);
					analyzeStatement39=analyzeStatement();
					state._fsp--;

					adaptor.addChild(root_0, analyzeStatement39.getTree());

					}
					break;
				case 17 :
					// Hive.g:343:7: lockStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_lockStatement_in_ddlStatement1259);
					lockStatement40=lockStatement();
					state._fsp--;

					adaptor.addChild(root_0, lockStatement40.getTree());

					}
					break;
				case 18 :
					// Hive.g:344:7: unlockStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_unlockStatement_in_ddlStatement1267);
					unlockStatement41=unlockStatement();
					state._fsp--;

					adaptor.addChild(root_0, unlockStatement41.getTree());

					}
					break;
				case 19 :
					// Hive.g:345:7: createRoleStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createRoleStatement_in_ddlStatement1275);
					createRoleStatement42=createRoleStatement();
					state._fsp--;

					adaptor.addChild(root_0, createRoleStatement42.getTree());

					}
					break;
				case 20 :
					// Hive.g:346:7: dropRoleStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropRoleStatement_in_ddlStatement1283);
					dropRoleStatement43=dropRoleStatement();
					state._fsp--;

					adaptor.addChild(root_0, dropRoleStatement43.getTree());

					}
					break;
				case 21 :
					// Hive.g:347:7: grantPrivileges
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_grantPrivileges_in_ddlStatement1291);
					grantPrivileges44=grantPrivileges();
					state._fsp--;

					adaptor.addChild(root_0, grantPrivileges44.getTree());

					}
					break;
				case 22 :
					// Hive.g:348:7: revokePrivileges
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_revokePrivileges_in_ddlStatement1299);
					revokePrivileges45=revokePrivileges();
					state._fsp--;

					adaptor.addChild(root_0, revokePrivileges45.getTree());

					}
					break;
				case 23 :
					// Hive.g:349:7: showGrants
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showGrants_in_ddlStatement1307);
					showGrants46=showGrants();
					state._fsp--;

					adaptor.addChild(root_0, showGrants46.getTree());

					}
					break;
				case 24 :
					// Hive.g:350:7: showRoleGrants
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showRoleGrants_in_ddlStatement1315);
					showRoleGrants47=showRoleGrants();
					state._fsp--;

					adaptor.addChild(root_0, showRoleGrants47.getTree());

					}
					break;
				case 25 :
					// Hive.g:351:7: grantRole
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_grantRole_in_ddlStatement1323);
					grantRole48=grantRole();
					state._fsp--;

					adaptor.addChild(root_0, grantRole48.getTree());

					}
					break;
				case 26 :
					// Hive.g:352:7: revokeRole
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_revokeRole_in_ddlStatement1331);
					revokeRole49=revokeRole();
					state._fsp--;

					adaptor.addChild(root_0, revokeRole49.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ddlStatement"


	public static class ifExists_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ifExists"
	// Hive.g:355:1: ifExists : KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) ;
	public final HiveParser.ifExists_return ifExists() throws RecognitionException {
		HiveParser.ifExists_return retval = new HiveParser.ifExists_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_IF50=null;
		Token KW_EXISTS51=null;

		CommonTree KW_IF50_tree=null;
		CommonTree KW_EXISTS51_tree=null;
		RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");
		RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");

		 msgs.push("if exists clause"); 
		try {
			// Hive.g:358:5: ( KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) )
			// Hive.g:358:7: KW_IF KW_EXISTS
			{
			KW_IF50=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifExists1358);  
			stream_KW_IF.add(KW_IF50);

			KW_EXISTS51=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifExists1360);  
			stream_KW_EXISTS.add(KW_EXISTS51);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 359:5: -> ^( TOK_IFEXISTS )
			{
				// Hive.g:359:8: ^( TOK_IFEXISTS )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_IFEXISTS, "TOK_IFEXISTS"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ifExists"


	public static class restrictOrCascade_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "restrictOrCascade"
	// Hive.g:362:1: restrictOrCascade : ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) );
	public final HiveParser.restrictOrCascade_return restrictOrCascade() throws RecognitionException {
		HiveParser.restrictOrCascade_return retval = new HiveParser.restrictOrCascade_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RESTRICT52=null;
		Token KW_CASCADE53=null;

		CommonTree KW_RESTRICT52_tree=null;
		CommonTree KW_CASCADE53_tree=null;
		RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
		RewriteRuleTokenStream stream_KW_RESTRICT=new RewriteRuleTokenStream(adaptor,"token KW_RESTRICT");

		 msgs.push("restrict or cascade clause"); 
		try {
			// Hive.g:365:5: ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) )
			int alt10=2;
			int LA10_0 = input.LA(1);
			if ( (LA10_0==KW_RESTRICT) ) {
				alt10=1;
			}
			else if ( (LA10_0==KW_CASCADE) ) {
				alt10=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 10, 0, input);
				throw nvae;
			}

			switch (alt10) {
				case 1 :
					// Hive.g:365:7: KW_RESTRICT
					{
					KW_RESTRICT52=(Token)match(input,KW_RESTRICT,FOLLOW_KW_RESTRICT_in_restrictOrCascade1397);  
					stream_KW_RESTRICT.add(KW_RESTRICT52);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 366:5: -> ^( TOK_RESTRICT )
					{
						// Hive.g:366:8: ^( TOK_RESTRICT )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RESTRICT, "TOK_RESTRICT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:367:7: KW_CASCADE
					{
					KW_CASCADE53=(Token)match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_restrictOrCascade1415);  
					stream_KW_CASCADE.add(KW_CASCADE53);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 368:5: -> ^( TOK_CASCADE )
					{
						// Hive.g:368:8: ^( TOK_CASCADE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CASCADE, "TOK_CASCADE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "restrictOrCascade"


	public static class ifNotExists_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ifNotExists"
	// Hive.g:371:1: ifNotExists : KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) ;
	public final HiveParser.ifNotExists_return ifNotExists() throws RecognitionException {
		HiveParser.ifNotExists_return retval = new HiveParser.ifNotExists_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_IF54=null;
		Token KW_NOT55=null;
		Token KW_EXISTS56=null;

		CommonTree KW_IF54_tree=null;
		CommonTree KW_NOT55_tree=null;
		CommonTree KW_EXISTS56_tree=null;
		RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");

		 msgs.push("if not exists clause"); 
		try {
			// Hive.g:374:5: ( KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) )
			// Hive.g:374:7: KW_IF KW_NOT KW_EXISTS
			{
			KW_IF54=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifNotExists1452);  
			stream_KW_IF.add(KW_IF54);

			KW_NOT55=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_ifNotExists1454);  
			stream_KW_NOT.add(KW_NOT55);

			KW_EXISTS56=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifNotExists1456);  
			stream_KW_EXISTS.add(KW_EXISTS56);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 375:5: -> ^( TOK_IFNOTEXISTS )
			{
				// Hive.g:375:8: ^( TOK_IFNOTEXISTS )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_IFNOTEXISTS, "TOK_IFNOTEXISTS"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ifNotExists"


	public static class orReplace_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "orReplace"
	// Hive.g:378:1: orReplace : KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) ;
	public final HiveParser.orReplace_return orReplace() throws RecognitionException {
		HiveParser.orReplace_return retval = new HiveParser.orReplace_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_OR57=null;
		Token KW_REPLACE58=null;

		CommonTree KW_OR57_tree=null;
		CommonTree KW_REPLACE58_tree=null;
		RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
		RewriteRuleTokenStream stream_KW_OR=new RewriteRuleTokenStream(adaptor,"token KW_OR");

		 msgs.push("or replace clause"); 
		try {
			// Hive.g:381:5: ( KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) )
			// Hive.g:381:7: KW_OR KW_REPLACE
			{
			KW_OR57=(Token)match(input,KW_OR,FOLLOW_KW_OR_in_orReplace1493);  
			stream_KW_OR.add(KW_OR57);

			KW_REPLACE58=(Token)match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_orReplace1495);  
			stream_KW_REPLACE.add(KW_REPLACE58);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 382:5: -> ^( TOK_ORREPLACE )
			{
				// Hive.g:382:8: ^( TOK_ORREPLACE )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ORREPLACE, "TOK_ORREPLACE"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "orReplace"


	public static class createDatabaseStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createDatabaseStatement"
	// Hive.g:386:1: createDatabaseStatement : KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= Identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) ;
	public final HiveParser.createDatabaseStatement_return createDatabaseStatement() throws RecognitionException {
		HiveParser.createDatabaseStatement_return retval = new HiveParser.createDatabaseStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token name=null;
		Token KW_CREATE59=null;
		Token KW_DATABASE60=null;
		Token KW_SCHEMA61=null;
		Token KW_WITH65=null;
		Token KW_DBPROPERTIES66=null;
		ParserRuleReturnScope dbprops =null;
		ParserRuleReturnScope ifNotExists62 =null;
		ParserRuleReturnScope databaseComment63 =null;
		ParserRuleReturnScope dbLocation64 =null;

		CommonTree name_tree=null;
		CommonTree KW_CREATE59_tree=null;
		CommonTree KW_DATABASE60_tree=null;
		CommonTree KW_SCHEMA61_tree=null;
		CommonTree KW_WITH65_tree=null;
		CommonTree KW_DBPROPERTIES66_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");
		RewriteRuleSubtreeStream stream_dbLocation=new RewriteRuleSubtreeStream(adaptor,"rule dbLocation");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_databaseComment=new RewriteRuleSubtreeStream(adaptor,"rule databaseComment");

		 msgs.push("create database statement"); 
		try {
			// Hive.g:389:5: ( KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= Identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) )
			// Hive.g:389:7: KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= Identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
			{
			KW_CREATE59=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createDatabaseStatement1533);  
			stream_KW_CREATE.add(KW_CREATE59);

			// Hive.g:389:17: ( KW_DATABASE | KW_SCHEMA )
			int alt11=2;
			int LA11_0 = input.LA(1);
			if ( (LA11_0==KW_DATABASE) ) {
				alt11=1;
			}
			else if ( (LA11_0==KW_SCHEMA) ) {
				alt11=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 11, 0, input);
				throw nvae;
			}

			switch (alt11) {
				case 1 :
					// Hive.g:389:18: KW_DATABASE
					{
					KW_DATABASE60=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_createDatabaseStatement1536);  
					stream_KW_DATABASE.add(KW_DATABASE60);

					}
					break;
				case 2 :
					// Hive.g:389:30: KW_SCHEMA
					{
					KW_SCHEMA61=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_createDatabaseStatement1538);  
					stream_KW_SCHEMA.add(KW_SCHEMA61);

					}
					break;

			}

			// Hive.g:390:9: ( ifNotExists )?
			int alt12=2;
			int LA12_0 = input.LA(1);
			if ( (LA12_0==KW_IF) ) {
				alt12=1;
			}
			switch (alt12) {
				case 1 :
					// Hive.g:390:9: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createDatabaseStatement1549);
					ifNotExists62=ifNotExists();
					state._fsp--;

					stream_ifNotExists.add(ifNotExists62.getTree());
					}
					break;

			}

			name=(Token)match(input,Identifier,FOLLOW_Identifier_in_createDatabaseStatement1562);  
			stream_Identifier.add(name);

			// Hive.g:392:9: ( databaseComment )?
			int alt13=2;
			int LA13_0 = input.LA(1);
			if ( (LA13_0==KW_COMMENT) ) {
				alt13=1;
			}
			switch (alt13) {
				case 1 :
					// Hive.g:392:9: databaseComment
					{
					pushFollow(FOLLOW_databaseComment_in_createDatabaseStatement1572);
					databaseComment63=databaseComment();
					state._fsp--;

					stream_databaseComment.add(databaseComment63.getTree());
					}
					break;

			}

			// Hive.g:393:9: ( dbLocation )?
			int alt14=2;
			int LA14_0 = input.LA(1);
			if ( (LA14_0==KW_LOCATION) ) {
				alt14=1;
			}
			switch (alt14) {
				case 1 :
					// Hive.g:393:9: dbLocation
					{
					pushFollow(FOLLOW_dbLocation_in_createDatabaseStatement1583);
					dbLocation64=dbLocation();
					state._fsp--;

					stream_dbLocation.add(dbLocation64.getTree());
					}
					break;

			}

			// Hive.g:394:9: ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
			int alt15=2;
			int LA15_0 = input.LA(1);
			if ( (LA15_0==KW_WITH) ) {
				alt15=1;
			}
			switch (alt15) {
				case 1 :
					// Hive.g:394:10: KW_WITH KW_DBPROPERTIES dbprops= dbProperties
					{
					KW_WITH65=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_createDatabaseStatement1595);  
					stream_KW_WITH.add(KW_WITH65);

					KW_DBPROPERTIES66=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement1597);  
					stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES66);

					pushFollow(FOLLOW_dbProperties_in_createDatabaseStatement1601);
					dbprops=dbProperties();
					state._fsp--;

					stream_dbProperties.add(dbprops.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: databaseComment, dbLocation, ifNotExists, dbprops, name
			// token labels: name
			// rule labels: retval, dbprops
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_dbprops=new RewriteRuleSubtreeStream(adaptor,"rule dbprops",dbprops!=null?dbprops.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 395:5: -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
			{
				// Hive.g:395:8: ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEDATABASE, "TOK_CREATEDATABASE"), root_1);
				adaptor.addChild(root_1, stream_name.nextNode());
				// Hive.g:395:35: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// Hive.g:395:48: ( dbLocation )?
				if ( stream_dbLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_dbLocation.nextTree());
				}
				stream_dbLocation.reset();

				// Hive.g:395:60: ( databaseComment )?
				if ( stream_databaseComment.hasNext() ) {
					adaptor.addChild(root_1, stream_databaseComment.nextTree());
				}
				stream_databaseComment.reset();

				// Hive.g:395:78: ( $dbprops)?
				if ( stream_dbprops.hasNext() ) {
					adaptor.addChild(root_1, stream_dbprops.nextTree());
				}
				stream_dbprops.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createDatabaseStatement"


	public static class dbLocation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dbLocation"
	// Hive.g:398:1: dbLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) ;
	public final HiveParser.dbLocation_return dbLocation() throws RecognitionException {
		HiveParser.dbLocation_return retval = new HiveParser.dbLocation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token locn=null;
		Token KW_LOCATION67=null;

		CommonTree locn_tree=null;
		CommonTree KW_LOCATION67_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		 msgs.push("database location specification"); 
		try {
			// Hive.g:401:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) )
			// Hive.g:402:7: KW_LOCATION locn= StringLiteral
			{
			KW_LOCATION67=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_dbLocation1662);  
			stream_KW_LOCATION.add(KW_LOCATION67);

			locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_dbLocation1666);  
			stream_StringLiteral.add(locn);

			// AST REWRITE
			// elements: locn
			// token labels: locn
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 402:38: -> ^( TOK_DATABASELOCATION $locn)
			{
				// Hive.g:402:41: ^( TOK_DATABASELOCATION $locn)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DATABASELOCATION, "TOK_DATABASELOCATION"), root_1);
				adaptor.addChild(root_1, stream_locn.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dbLocation"


	public static class dbProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dbProperties"
	// Hive.g:405:1: dbProperties : LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) ;
	public final HiveParser.dbProperties_return dbProperties() throws RecognitionException {
		HiveParser.dbProperties_return retval = new HiveParser.dbProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN68=null;
		Token RPAREN70=null;
		ParserRuleReturnScope dbPropertiesList69 =null;

		CommonTree LPAREN68_tree=null;
		CommonTree RPAREN70_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_dbPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule dbPropertiesList");

		 msgs.push("dbproperties"); 
		try {
			// Hive.g:408:5: ( LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) )
			// Hive.g:409:7: LPAREN dbPropertiesList RPAREN
			{
			LPAREN68=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_dbProperties1708);  
			stream_LPAREN.add(LPAREN68);

			pushFollow(FOLLOW_dbPropertiesList_in_dbProperties1710);
			dbPropertiesList69=dbPropertiesList();
			state._fsp--;

			stream_dbPropertiesList.add(dbPropertiesList69.getTree());
			RPAREN70=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_dbProperties1712);  
			stream_RPAREN.add(RPAREN70);

			// AST REWRITE
			// elements: dbPropertiesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 409:38: -> ^( TOK_DATABASEPROPERTIES dbPropertiesList )
			{
				// Hive.g:409:41: ^( TOK_DATABASEPROPERTIES dbPropertiesList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DATABASEPROPERTIES, "TOK_DATABASEPROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_dbPropertiesList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dbProperties"


	public static class dbPropertiesList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dbPropertiesList"
	// Hive.g:412:1: dbPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) ;
	public final HiveParser.dbPropertiesList_return dbPropertiesList() throws RecognitionException {
		HiveParser.dbPropertiesList_return retval = new HiveParser.dbPropertiesList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA72=null;
		ParserRuleReturnScope keyValueProperty71 =null;
		ParserRuleReturnScope keyValueProperty73 =null;

		CommonTree COMMA72_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");

		 msgs.push("database properties list"); 
		try {
			// Hive.g:415:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) )
			// Hive.g:416:7: keyValueProperty ( COMMA keyValueProperty )*
			{
			pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList1753);
			keyValueProperty71=keyValueProperty();
			state._fsp--;

			stream_keyValueProperty.add(keyValueProperty71.getTree());
			// Hive.g:416:24: ( COMMA keyValueProperty )*
			loop16:
			while (true) {
				int alt16=2;
				int LA16_0 = input.LA(1);
				if ( (LA16_0==COMMA) ) {
					alt16=1;
				}

				switch (alt16) {
				case 1 :
					// Hive.g:416:25: COMMA keyValueProperty
					{
					COMMA72=(Token)match(input,COMMA,FOLLOW_COMMA_in_dbPropertiesList1756);  
					stream_COMMA.add(COMMA72);

					pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList1758);
					keyValueProperty73=keyValueProperty();
					state._fsp--;

					stream_keyValueProperty.add(keyValueProperty73.getTree());
					}
					break;

				default :
					break loop16;
				}
			}

			// AST REWRITE
			// elements: keyValueProperty
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 416:50: -> ^( TOK_DBPROPLIST ( keyValueProperty )+ )
			{
				// Hive.g:416:53: ^( TOK_DBPROPLIST ( keyValueProperty )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DBPROPLIST, "TOK_DBPROPLIST"), root_1);
				if ( !(stream_keyValueProperty.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_keyValueProperty.hasNext() ) {
					adaptor.addChild(root_1, stream_keyValueProperty.nextTree());
				}
				stream_keyValueProperty.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dbPropertiesList"


	public static class switchDatabaseStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "switchDatabaseStatement"
	// Hive.g:420:1: switchDatabaseStatement : KW_USE Identifier -> ^( TOK_SWITCHDATABASE Identifier ) ;
	public final HiveParser.switchDatabaseStatement_return switchDatabaseStatement() throws RecognitionException {
		HiveParser.switchDatabaseStatement_return retval = new HiveParser.switchDatabaseStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_USE74=null;
		Token Identifier75=null;

		CommonTree KW_USE74_tree=null;
		CommonTree Identifier75_tree=null;
		RewriteRuleTokenStream stream_KW_USE=new RewriteRuleTokenStream(adaptor,"token KW_USE");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

		 msgs.push("switch database statement"); 
		try {
			// Hive.g:423:5: ( KW_USE Identifier -> ^( TOK_SWITCHDATABASE Identifier ) )
			// Hive.g:423:7: KW_USE Identifier
			{
			KW_USE74=(Token)match(input,KW_USE,FOLLOW_KW_USE_in_switchDatabaseStatement1797);  
			stream_KW_USE.add(KW_USE74);

			Identifier75=(Token)match(input,Identifier,FOLLOW_Identifier_in_switchDatabaseStatement1799);  
			stream_Identifier.add(Identifier75);

			// AST REWRITE
			// elements: Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 424:5: -> ^( TOK_SWITCHDATABASE Identifier )
			{
				// Hive.g:424:8: ^( TOK_SWITCHDATABASE Identifier )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SWITCHDATABASE, "TOK_SWITCHDATABASE"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "switchDatabaseStatement"


	public static class dropDatabaseStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropDatabaseStatement"
	// Hive.g:427:1: dropDatabaseStatement : KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? Identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? ) ;
	public final HiveParser.dropDatabaseStatement_return dropDatabaseStatement() throws RecognitionException {
		HiveParser.dropDatabaseStatement_return retval = new HiveParser.dropDatabaseStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP76=null;
		Token KW_DATABASE77=null;
		Token KW_SCHEMA78=null;
		Token Identifier80=null;
		ParserRuleReturnScope ifExists79 =null;
		ParserRuleReturnScope restrictOrCascade81 =null;

		CommonTree KW_DROP76_tree=null;
		CommonTree KW_DATABASE77_tree=null;
		CommonTree KW_SCHEMA78_tree=null;
		CommonTree Identifier80_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 msgs.push("drop database statement"); 
		try {
			// Hive.g:430:5: ( KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? Identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? ) )
			// Hive.g:430:7: KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? Identifier ( restrictOrCascade )?
			{
			KW_DROP76=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropDatabaseStatement1838);  
			stream_KW_DROP.add(KW_DROP76);

			// Hive.g:430:15: ( KW_DATABASE | KW_SCHEMA )
			int alt17=2;
			int LA17_0 = input.LA(1);
			if ( (LA17_0==KW_DATABASE) ) {
				alt17=1;
			}
			else if ( (LA17_0==KW_SCHEMA) ) {
				alt17=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 17, 0, input);
				throw nvae;
			}

			switch (alt17) {
				case 1 :
					// Hive.g:430:16: KW_DATABASE
					{
					KW_DATABASE77=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_dropDatabaseStatement1841);  
					stream_KW_DATABASE.add(KW_DATABASE77);

					}
					break;
				case 2 :
					// Hive.g:430:28: KW_SCHEMA
					{
					KW_SCHEMA78=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_dropDatabaseStatement1843);  
					stream_KW_SCHEMA.add(KW_SCHEMA78);

					}
					break;

			}

			// Hive.g:430:39: ( ifExists )?
			int alt18=2;
			int LA18_0 = input.LA(1);
			if ( (LA18_0==KW_IF) ) {
				alt18=1;
			}
			switch (alt18) {
				case 1 :
					// Hive.g:430:39: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropDatabaseStatement1846);
					ifExists79=ifExists();
					state._fsp--;

					stream_ifExists.add(ifExists79.getTree());
					}
					break;

			}

			Identifier80=(Token)match(input,Identifier,FOLLOW_Identifier_in_dropDatabaseStatement1849);  
			stream_Identifier.add(Identifier80);

			// Hive.g:430:60: ( restrictOrCascade )?
			int alt19=2;
			int LA19_0 = input.LA(1);
			if ( (LA19_0==KW_CASCADE||LA19_0==KW_RESTRICT) ) {
				alt19=1;
			}
			switch (alt19) {
				case 1 :
					// Hive.g:430:60: restrictOrCascade
					{
					pushFollow(FOLLOW_restrictOrCascade_in_dropDatabaseStatement1851);
					restrictOrCascade81=restrictOrCascade();
					state._fsp--;

					stream_restrictOrCascade.add(restrictOrCascade81.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: restrictOrCascade, Identifier, ifExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 431:5: -> ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? )
			{
				// Hive.g:431:8: ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPDATABASE, "TOK_DROPDATABASE"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// Hive.g:431:38: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				// Hive.g:431:48: ( restrictOrCascade )?
				if ( stream_restrictOrCascade.hasNext() ) {
					adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());
				}
				stream_restrictOrCascade.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropDatabaseStatement"


	public static class databaseComment_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "databaseComment"
	// Hive.g:434:1: databaseComment : KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) ;
	public final HiveParser.databaseComment_return databaseComment() throws RecognitionException {
		HiveParser.databaseComment_return retval = new HiveParser.databaseComment_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_COMMENT82=null;

		CommonTree comment_tree=null;
		CommonTree KW_COMMENT82_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

		 msgs.push("database's comment"); 
		try {
			// Hive.g:437:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) )
			// Hive.g:437:7: KW_COMMENT comment= StringLiteral
			{
			KW_COMMENT82=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_databaseComment1897);  
			stream_KW_COMMENT.add(KW_COMMENT82);

			comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_databaseComment1901);  
			stream_StringLiteral.add(comment);

			// AST REWRITE
			// elements: comment
			// token labels: comment
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 438:5: -> ^( TOK_DATABASECOMMENT $comment)
			{
				// Hive.g:438:8: ^( TOK_DATABASECOMMENT $comment)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DATABASECOMMENT, "TOK_DATABASECOMMENT"), root_1);
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "databaseComment"


	public static class createTableStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createTableStatement"
	// Hive.g:441:1: createTableStatement : KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? ) -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? ) ;
	public final HiveParser.createTableStatement_return createTableStatement() throws RecognitionException {
		HiveParser.createTableStatement_return retval = new HiveParser.createTableStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ext=null;
		Token like=null;
		Token KW_CREATE83=null;
		Token KW_TABLE84=null;
		Token LPAREN87=null;
		Token RPAREN89=null;
		Token KW_AS97=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope likeName =null;
		ParserRuleReturnScope ifNotExists85 =null;
		ParserRuleReturnScope tableLocation86 =null;
		ParserRuleReturnScope columnNameTypeList88 =null;
		ParserRuleReturnScope tableComment90 =null;
		ParserRuleReturnScope tablePartition91 =null;
		ParserRuleReturnScope tableBuckets92 =null;
		ParserRuleReturnScope tableRowFormat93 =null;
		ParserRuleReturnScope tableFileFormat94 =null;
		ParserRuleReturnScope tableLocation95 =null;
		ParserRuleReturnScope tablePropertiesPrefixed96 =null;
		ParserRuleReturnScope selectStatement98 =null;

		CommonTree ext_tree=null;
		CommonTree like_tree=null;
		CommonTree KW_CREATE83_tree=null;
		CommonTree KW_TABLE84_tree=null;
		CommonTree LPAREN87_tree=null;
		CommonTree RPAREN89_tree=null;
		CommonTree KW_AS97_tree=null;
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
		RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
		RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_tablePartition=new RewriteRuleSubtreeStream(adaptor,"rule tablePartition");
		RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
		RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
		RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");

		 msgs.push("create table statement"); 
		try {
			// Hive.g:444:5: ( KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? ) -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? ) )
			// Hive.g:444:7: KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? )
			{
			KW_CREATE83=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createTableStatement1941);  
			stream_KW_CREATE.add(KW_CREATE83);

			// Hive.g:444:17: (ext= KW_EXTERNAL )?
			int alt20=2;
			int LA20_0 = input.LA(1);
			if ( (LA20_0==KW_EXTERNAL) ) {
				alt20=1;
			}
			switch (alt20) {
				case 1 :
					// Hive.g:444:18: ext= KW_EXTERNAL
					{
					ext=(Token)match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_createTableStatement1946);  
					stream_KW_EXTERNAL.add(ext);

					}
					break;

			}

			KW_TABLE84=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createTableStatement1950);  
			stream_KW_TABLE.add(KW_TABLE84);

			// Hive.g:444:45: ( ifNotExists )?
			int alt21=2;
			int LA21_0 = input.LA(1);
			if ( (LA21_0==KW_IF) ) {
				alt21=1;
			}
			switch (alt21) {
				case 1 :
					// Hive.g:444:45: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createTableStatement1952);
					ifNotExists85=ifNotExists();
					state._fsp--;

					stream_ifNotExists.add(ifNotExists85.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_createTableStatement1957);
			name=tableName();
			state._fsp--;

			stream_tableName.add(name.getTree());
			// Hive.g:445:7: (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? )
			int alt32=2;
			int LA32_0 = input.LA(1);
			if ( (LA32_0==KW_LIKE) ) {
				alt32=1;
			}
			else if ( (LA32_0==EOF||LA32_0==KW_AS||LA32_0==KW_CLUSTERED||LA32_0==KW_COMMENT||LA32_0==KW_LOCATION||LA32_0==KW_PARTITIONED||LA32_0==KW_ROW||LA32_0==KW_STORED||LA32_0==KW_TBLPROPERTIES||LA32_0==LPAREN) ) {
				alt32=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 32, 0, input);
				throw nvae;
			}

			switch (alt32) {
				case 1 :
					// Hive.g:445:10: like= KW_LIKE likeName= tableName ( tableLocation )?
					{
					like=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_createTableStatement1970);  
					stream_KW_LIKE.add(like);

					pushFollow(FOLLOW_tableName_in_createTableStatement1974);
					likeName=tableName();
					state._fsp--;

					stream_tableName.add(likeName.getTree());
					// Hive.g:446:10: ( tableLocation )?
					int alt22=2;
					int LA22_0 = input.LA(1);
					if ( (LA22_0==KW_LOCATION) ) {
						alt22=1;
					}
					switch (alt22) {
						case 1 :
							// Hive.g:446:10: tableLocation
							{
							pushFollow(FOLLOW_tableLocation_in_createTableStatement1985);
							tableLocation86=tableLocation();
							state._fsp--;

							stream_tableLocation.add(tableLocation86.getTree());
							}
							break;

					}

					}
					break;
				case 2 :
					// Hive.g:447:10: ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )?
					{
					// Hive.g:447:10: ( LPAREN columnNameTypeList RPAREN )?
					int alt23=2;
					int LA23_0 = input.LA(1);
					if ( (LA23_0==LPAREN) ) {
						alt23=1;
					}
					switch (alt23) {
						case 1 :
							// Hive.g:447:11: LPAREN columnNameTypeList RPAREN
							{
							LPAREN87=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createTableStatement1998);  
							stream_LPAREN.add(LPAREN87);

							pushFollow(FOLLOW_columnNameTypeList_in_createTableStatement2000);
							columnNameTypeList88=columnNameTypeList();
							state._fsp--;

							stream_columnNameTypeList.add(columnNameTypeList88.getTree());
							RPAREN89=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createTableStatement2002);  
							stream_RPAREN.add(RPAREN89);

							}
							break;

					}

					// Hive.g:448:10: ( tableComment )?
					int alt24=2;
					int LA24_0 = input.LA(1);
					if ( (LA24_0==KW_COMMENT) ) {
						alt24=1;
					}
					switch (alt24) {
						case 1 :
							// Hive.g:448:10: tableComment
							{
							pushFollow(FOLLOW_tableComment_in_createTableStatement2015);
							tableComment90=tableComment();
							state._fsp--;

							stream_tableComment.add(tableComment90.getTree());
							}
							break;

					}

					// Hive.g:449:10: ( tablePartition )?
					int alt25=2;
					int LA25_0 = input.LA(1);
					if ( (LA25_0==KW_PARTITIONED) ) {
						alt25=1;
					}
					switch (alt25) {
						case 1 :
							// Hive.g:449:10: tablePartition
							{
							pushFollow(FOLLOW_tablePartition_in_createTableStatement2027);
							tablePartition91=tablePartition();
							state._fsp--;

							stream_tablePartition.add(tablePartition91.getTree());
							}
							break;

					}

					// Hive.g:450:10: ( tableBuckets )?
					int alt26=2;
					int LA26_0 = input.LA(1);
					if ( (LA26_0==KW_CLUSTERED) ) {
						alt26=1;
					}
					switch (alt26) {
						case 1 :
							// Hive.g:450:10: tableBuckets
							{
							pushFollow(FOLLOW_tableBuckets_in_createTableStatement2039);
							tableBuckets92=tableBuckets();
							state._fsp--;

							stream_tableBuckets.add(tableBuckets92.getTree());
							}
							break;

					}

					// Hive.g:451:10: ( tableRowFormat )?
					int alt27=2;
					int LA27_0 = input.LA(1);
					if ( (LA27_0==KW_ROW) ) {
						alt27=1;
					}
					switch (alt27) {
						case 1 :
							// Hive.g:451:10: tableRowFormat
							{
							pushFollow(FOLLOW_tableRowFormat_in_createTableStatement2051);
							tableRowFormat93=tableRowFormat();
							state._fsp--;

							stream_tableRowFormat.add(tableRowFormat93.getTree());
							}
							break;

					}

					// Hive.g:452:10: ( tableFileFormat )?
					int alt28=2;
					int LA28_0 = input.LA(1);
					if ( (LA28_0==KW_STORED) ) {
						alt28=1;
					}
					switch (alt28) {
						case 1 :
							// Hive.g:452:10: tableFileFormat
							{
							pushFollow(FOLLOW_tableFileFormat_in_createTableStatement2063);
							tableFileFormat94=tableFileFormat();
							state._fsp--;

							stream_tableFileFormat.add(tableFileFormat94.getTree());
							}
							break;

					}

					// Hive.g:453:10: ( tableLocation )?
					int alt29=2;
					int LA29_0 = input.LA(1);
					if ( (LA29_0==KW_LOCATION) ) {
						alt29=1;
					}
					switch (alt29) {
						case 1 :
							// Hive.g:453:10: tableLocation
							{
							pushFollow(FOLLOW_tableLocation_in_createTableStatement2075);
							tableLocation95=tableLocation();
							state._fsp--;

							stream_tableLocation.add(tableLocation95.getTree());
							}
							break;

					}

					// Hive.g:454:10: ( tablePropertiesPrefixed )?
					int alt30=2;
					int LA30_0 = input.LA(1);
					if ( (LA30_0==KW_TBLPROPERTIES) ) {
						alt30=1;
					}
					switch (alt30) {
						case 1 :
							// Hive.g:454:10: tablePropertiesPrefixed
							{
							pushFollow(FOLLOW_tablePropertiesPrefixed_in_createTableStatement2087);
							tablePropertiesPrefixed96=tablePropertiesPrefixed();
							state._fsp--;

							stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed96.getTree());
							}
							break;

					}

					// Hive.g:455:10: ( KW_AS selectStatement )?
					int alt31=2;
					int LA31_0 = input.LA(1);
					if ( (LA31_0==KW_AS) ) {
						alt31=1;
					}
					switch (alt31) {
						case 1 :
							// Hive.g:455:11: KW_AS selectStatement
							{
							KW_AS97=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createTableStatement2100);  
							stream_KW_AS.add(KW_AS97);

							pushFollow(FOLLOW_selectStatement_in_createTableStatement2102);
							selectStatement98=selectStatement();
							state._fsp--;

							stream_selectStatement.add(selectStatement98.getTree());
							}
							break;

					}

					}
					break;

			}

			// AST REWRITE
			// elements: columnNameTypeList, ext, tableFileFormat, tableLocation, tableComment, tableRowFormat, tablePropertiesPrefixed, likeName, ifNotExists, tablePartition, name, selectStatement, tableBuckets
			// token labels: ext
			// rule labels: retval, name, likeName
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_likeName=new RewriteRuleSubtreeStream(adaptor,"rule likeName",likeName!=null?likeName.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 457:5: -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? )
			{
				// Hive.g:457:8: ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATETABLE, "TOK_CREATETABLE"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// Hive.g:457:33: ( $ext)?
				if ( stream_ext.hasNext() ) {
					adaptor.addChild(root_1, stream_ext.nextNode());
				}
				stream_ext.reset();

				// Hive.g:457:38: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// Hive.g:458:10: ^( TOK_LIKETABLE ( $likeName)? )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LIKETABLE, "TOK_LIKETABLE"), root_2);
				// Hive.g:458:27: ( $likeName)?
				if ( stream_likeName.hasNext() ) {
					adaptor.addChild(root_2, stream_likeName.nextTree());
				}
				stream_likeName.reset();

				adaptor.addChild(root_1, root_2);
				}

				// Hive.g:459:10: ( columnNameTypeList )?
				if ( stream_columnNameTypeList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				}
				stream_columnNameTypeList.reset();

				// Hive.g:460:10: ( tableComment )?
				if ( stream_tableComment.hasNext() ) {
					adaptor.addChild(root_1, stream_tableComment.nextTree());
				}
				stream_tableComment.reset();

				// Hive.g:461:10: ( tablePartition )?
				if ( stream_tablePartition.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePartition.nextTree());
				}
				stream_tablePartition.reset();

				// Hive.g:462:10: ( tableBuckets )?
				if ( stream_tableBuckets.hasNext() ) {
					adaptor.addChild(root_1, stream_tableBuckets.nextTree());
				}
				stream_tableBuckets.reset();

				// Hive.g:463:10: ( tableRowFormat )?
				if ( stream_tableRowFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormat.nextTree());
				}
				stream_tableRowFormat.reset();

				// Hive.g:464:10: ( tableFileFormat )?
				if ( stream_tableFileFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableFileFormat.nextTree());
				}
				stream_tableFileFormat.reset();

				// Hive.g:465:10: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				// Hive.g:466:10: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				// Hive.g:467:10: ( selectStatement )?
				if ( stream_selectStatement.hasNext() ) {
					adaptor.addChild(root_1, stream_selectStatement.nextTree());
				}
				stream_selectStatement.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createTableStatement"


	public static class createIndexStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createIndexStatement"
	// Hive.g:471:1: createIndexStatement : KW_CREATE KW_INDEX indexName= Identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) ;
	public final HiveParser.createIndexStatement_return createIndexStatement() throws RecognitionException {
		HiveParser.createIndexStatement_return retval = new HiveParser.createIndexStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token indexName=null;
		Token typeName=null;
		Token KW_CREATE99=null;
		Token KW_INDEX100=null;
		Token KW_ON101=null;
		Token KW_TABLE102=null;
		Token LPAREN103=null;
		Token RPAREN104=null;
		Token KW_AS105=null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope indexedCols =null;
		ParserRuleReturnScope autoRebuild106 =null;
		ParserRuleReturnScope indexPropertiesPrefixed107 =null;
		ParserRuleReturnScope indexTblName108 =null;
		ParserRuleReturnScope tableRowFormat109 =null;
		ParserRuleReturnScope tableFileFormat110 =null;
		ParserRuleReturnScope tableLocation111 =null;
		ParserRuleReturnScope tablePropertiesPrefixed112 =null;
		ParserRuleReturnScope indexComment113 =null;

		CommonTree indexName_tree=null;
		CommonTree typeName_tree=null;
		CommonTree KW_CREATE99_tree=null;
		CommonTree KW_INDEX100_tree=null;
		CommonTree KW_ON101_tree=null;
		CommonTree KW_TABLE102_tree=null;
		CommonTree LPAREN103_tree=null;
		CommonTree RPAREN104_tree=null;
		CommonTree KW_AS105_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_indexPropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesPrefixed");
		RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
		RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_autoRebuild=new RewriteRuleSubtreeStream(adaptor,"rule autoRebuild");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
		RewriteRuleSubtreeStream stream_indexTblName=new RewriteRuleSubtreeStream(adaptor,"rule indexTblName");
		RewriteRuleSubtreeStream stream_indexComment=new RewriteRuleSubtreeStream(adaptor,"rule indexComment");

		 msgs.push("create index statement");
		try {
			// Hive.g:474:5: ( KW_CREATE KW_INDEX indexName= Identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) )
			// Hive.g:474:7: KW_CREATE KW_INDEX indexName= Identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )?
			{
			KW_CREATE99=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createIndexStatement2293);  
			stream_KW_CREATE.add(KW_CREATE99);

			KW_INDEX100=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_createIndexStatement2295);  
			stream_KW_INDEX.add(KW_INDEX100);

			indexName=(Token)match(input,Identifier,FOLLOW_Identifier_in_createIndexStatement2299);  
			stream_Identifier.add(indexName);

			KW_ON101=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_createIndexStatement2307);  
			stream_KW_ON.add(KW_ON101);

			KW_TABLE102=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createIndexStatement2309);  
			stream_KW_TABLE.add(KW_TABLE102);

			pushFollow(FOLLOW_tableName_in_createIndexStatement2313);
			tab=tableName();
			state._fsp--;

			stream_tableName.add(tab.getTree());
			LPAREN103=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexStatement2315);  
			stream_LPAREN.add(LPAREN103);

			pushFollow(FOLLOW_columnNameList_in_createIndexStatement2319);
			indexedCols=columnNameList();
			state._fsp--;

			stream_columnNameList.add(indexedCols.getTree());
			RPAREN104=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexStatement2321);  
			stream_RPAREN.add(RPAREN104);

			KW_AS105=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createIndexStatement2329);  
			stream_KW_AS.add(KW_AS105);

			typeName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_createIndexStatement2333);  
			stream_StringLiteral.add(typeName);

			// Hive.g:477:7: ( autoRebuild )?
			int alt33=2;
			int LA33_0 = input.LA(1);
			if ( (LA33_0==KW_WITH) ) {
				alt33=1;
			}
			switch (alt33) {
				case 1 :
					// Hive.g:477:7: autoRebuild
					{
					pushFollow(FOLLOW_autoRebuild_in_createIndexStatement2341);
					autoRebuild106=autoRebuild();
					state._fsp--;

					stream_autoRebuild.add(autoRebuild106.getTree());
					}
					break;

			}

			// Hive.g:478:7: ( indexPropertiesPrefixed )?
			int alt34=2;
			int LA34_0 = input.LA(1);
			if ( (LA34_0==KW_IDXPROPERTIES) ) {
				alt34=1;
			}
			switch (alt34) {
				case 1 :
					// Hive.g:478:7: indexPropertiesPrefixed
					{
					pushFollow(FOLLOW_indexPropertiesPrefixed_in_createIndexStatement2350);
					indexPropertiesPrefixed107=indexPropertiesPrefixed();
					state._fsp--;

					stream_indexPropertiesPrefixed.add(indexPropertiesPrefixed107.getTree());
					}
					break;

			}

			// Hive.g:479:7: ( indexTblName )?
			int alt35=2;
			int LA35_0 = input.LA(1);
			if ( (LA35_0==KW_IN) ) {
				alt35=1;
			}
			switch (alt35) {
				case 1 :
					// Hive.g:479:7: indexTblName
					{
					pushFollow(FOLLOW_indexTblName_in_createIndexStatement2359);
					indexTblName108=indexTblName();
					state._fsp--;

					stream_indexTblName.add(indexTblName108.getTree());
					}
					break;

			}

			// Hive.g:480:7: ( tableRowFormat )?
			int alt36=2;
			int LA36_0 = input.LA(1);
			if ( (LA36_0==KW_ROW) ) {
				alt36=1;
			}
			switch (alt36) {
				case 1 :
					// Hive.g:480:7: tableRowFormat
					{
					pushFollow(FOLLOW_tableRowFormat_in_createIndexStatement2368);
					tableRowFormat109=tableRowFormat();
					state._fsp--;

					stream_tableRowFormat.add(tableRowFormat109.getTree());
					}
					break;

			}

			// Hive.g:481:7: ( tableFileFormat )?
			int alt37=2;
			int LA37_0 = input.LA(1);
			if ( (LA37_0==KW_STORED) ) {
				alt37=1;
			}
			switch (alt37) {
				case 1 :
					// Hive.g:481:7: tableFileFormat
					{
					pushFollow(FOLLOW_tableFileFormat_in_createIndexStatement2377);
					tableFileFormat110=tableFileFormat();
					state._fsp--;

					stream_tableFileFormat.add(tableFileFormat110.getTree());
					}
					break;

			}

			// Hive.g:482:7: ( tableLocation )?
			int alt38=2;
			int LA38_0 = input.LA(1);
			if ( (LA38_0==KW_LOCATION) ) {
				alt38=1;
			}
			switch (alt38) {
				case 1 :
					// Hive.g:482:7: tableLocation
					{
					pushFollow(FOLLOW_tableLocation_in_createIndexStatement2386);
					tableLocation111=tableLocation();
					state._fsp--;

					stream_tableLocation.add(tableLocation111.getTree());
					}
					break;

			}

			// Hive.g:483:7: ( tablePropertiesPrefixed )?
			int alt39=2;
			int LA39_0 = input.LA(1);
			if ( (LA39_0==KW_TBLPROPERTIES) ) {
				alt39=1;
			}
			switch (alt39) {
				case 1 :
					// Hive.g:483:7: tablePropertiesPrefixed
					{
					pushFollow(FOLLOW_tablePropertiesPrefixed_in_createIndexStatement2395);
					tablePropertiesPrefixed112=tablePropertiesPrefixed();
					state._fsp--;

					stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed112.getTree());
					}
					break;

			}

			// Hive.g:484:7: ( indexComment )?
			int alt40=2;
			int LA40_0 = input.LA(1);
			if ( (LA40_0==KW_COMMENT) ) {
				alt40=1;
			}
			switch (alt40) {
				case 1 :
					// Hive.g:484:7: indexComment
					{
					pushFollow(FOLLOW_indexComment_in_createIndexStatement2404);
					indexComment113=indexComment();
					state._fsp--;

					stream_indexComment.add(indexComment113.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableLocation, indexPropertiesPrefixed, autoRebuild, indexComment, tableRowFormat, tab, indexName, typeName, indexTblName, indexedCols, tablePropertiesPrefixed, tableFileFormat
			// token labels: typeName, indexName
			// rule labels: indexedCols, retval, tab
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_typeName=new RewriteRuleTokenStream(adaptor,"token typeName",typeName);
			RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
			RewriteRuleSubtreeStream stream_indexedCols=new RewriteRuleSubtreeStream(adaptor,"rule indexedCols",indexedCols!=null?indexedCols.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 485:5: -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
			{
				// Hive.g:485:7: ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEINDEX, "TOK_CREATEINDEX"), root_1);
				adaptor.addChild(root_1, stream_indexName.nextNode());
				adaptor.addChild(root_1, stream_typeName.nextNode());
				adaptor.addChild(root_1, stream_tab.nextTree());
				adaptor.addChild(root_1, stream_indexedCols.nextTree());
				// Hive.g:486:9: ( autoRebuild )?
				if ( stream_autoRebuild.hasNext() ) {
					adaptor.addChild(root_1, stream_autoRebuild.nextTree());
				}
				stream_autoRebuild.reset();

				// Hive.g:487:9: ( indexPropertiesPrefixed )?
				if ( stream_indexPropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_indexPropertiesPrefixed.nextTree());
				}
				stream_indexPropertiesPrefixed.reset();

				// Hive.g:488:9: ( indexTblName )?
				if ( stream_indexTblName.hasNext() ) {
					adaptor.addChild(root_1, stream_indexTblName.nextTree());
				}
				stream_indexTblName.reset();

				// Hive.g:489:9: ( tableRowFormat )?
				if ( stream_tableRowFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormat.nextTree());
				}
				stream_tableRowFormat.reset();

				// Hive.g:490:9: ( tableFileFormat )?
				if ( stream_tableFileFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableFileFormat.nextTree());
				}
				stream_tableFileFormat.reset();

				// Hive.g:491:9: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				// Hive.g:492:9: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				// Hive.g:493:9: ( indexComment )?
				if ( stream_indexComment.hasNext() ) {
					adaptor.addChild(root_1, stream_indexComment.nextTree());
				}
				stream_indexComment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createIndexStatement"


	public static class indexComment_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexComment"
	// Hive.g:496:1: indexComment : KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) ;
	public final HiveParser.indexComment_return indexComment() throws RecognitionException {
		HiveParser.indexComment_return retval = new HiveParser.indexComment_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_COMMENT114=null;

		CommonTree comment_tree=null;
		CommonTree KW_COMMENT114_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

		 msgs.push("comment on an index");
		try {
			// Hive.g:499:9: ( KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) )
			// Hive.g:500:17: KW_COMMENT comment= StringLiteral
			{
			KW_COMMENT114=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_indexComment2561);  
			stream_KW_COMMENT.add(KW_COMMENT114);

			comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_indexComment2565);  
			stream_StringLiteral.add(comment);

			// AST REWRITE
			// elements: comment
			// token labels: comment
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 500:51: -> ^( TOK_INDEXCOMMENT $comment)
			{
				// Hive.g:500:54: ^( TOK_INDEXCOMMENT $comment)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INDEXCOMMENT, "TOK_INDEXCOMMENT"), root_1);
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexComment"


	public static class autoRebuild_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "autoRebuild"
	// Hive.g:503:1: autoRebuild : KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) ;
	public final HiveParser.autoRebuild_return autoRebuild() throws RecognitionException {
		HiveParser.autoRebuild_return retval = new HiveParser.autoRebuild_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_WITH115=null;
		Token KW_DEFERRED116=null;
		Token KW_REBUILD117=null;

		CommonTree KW_WITH115_tree=null;
		CommonTree KW_DEFERRED116_tree=null;
		CommonTree KW_REBUILD117_tree=null;
		RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_DEFERRED=new RewriteRuleTokenStream(adaptor,"token KW_DEFERRED");

		 msgs.push("auto rebuild index");
		try {
			// Hive.g:506:5: ( KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) )
			// Hive.g:506:7: KW_WITH KW_DEFERRED KW_REBUILD
			{
			KW_WITH115=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_autoRebuild2606);  
			stream_KW_WITH.add(KW_WITH115);

			KW_DEFERRED116=(Token)match(input,KW_DEFERRED,FOLLOW_KW_DEFERRED_in_autoRebuild2608);  
			stream_KW_DEFERRED.add(KW_DEFERRED116);

			KW_REBUILD117=(Token)match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_autoRebuild2610);  
			stream_KW_REBUILD.add(KW_REBUILD117);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 507:5: -> ^( TOK_DEFERRED_REBUILDINDEX )
			{
				// Hive.g:507:7: ^( TOK_DEFERRED_REBUILDINDEX )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DEFERRED_REBUILDINDEX, "TOK_DEFERRED_REBUILDINDEX"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "autoRebuild"


	public static class indexTblName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexTblName"
	// Hive.g:510:1: indexTblName : KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) ;
	public final HiveParser.indexTblName_return indexTblName() throws RecognitionException {
		HiveParser.indexTblName_return retval = new HiveParser.indexTblName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_IN118=null;
		Token KW_TABLE119=null;
		ParserRuleReturnScope indexTbl =null;

		CommonTree KW_IN118_tree=null;
		CommonTree KW_TABLE119_tree=null;
		RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 msgs.push("index table name");
		try {
			// Hive.g:513:5: ( KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) )
			// Hive.g:513:7: KW_IN KW_TABLE indexTbl= tableName
			{
			KW_IN118=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_indexTblName2646);  
			stream_KW_IN.add(KW_IN118);

			KW_TABLE119=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_indexTblName2648);  
			stream_KW_TABLE.add(KW_TABLE119);

			pushFollow(FOLLOW_tableName_in_indexTblName2652);
			indexTbl=tableName();
			state._fsp--;

			stream_tableName.add(indexTbl.getTree());
			// AST REWRITE
			// elements: indexTbl
			// token labels: 
			// rule labels: retval, indexTbl
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_indexTbl=new RewriteRuleSubtreeStream(adaptor,"rule indexTbl",indexTbl!=null?indexTbl.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 514:5: -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
			{
				// Hive.g:514:7: ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEINDEX_INDEXTBLNAME, "TOK_CREATEINDEX_INDEXTBLNAME"), root_1);
				adaptor.addChild(root_1, stream_indexTbl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexTblName"


	public static class indexPropertiesPrefixed_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexPropertiesPrefixed"
	// Hive.g:517:1: indexPropertiesPrefixed : KW_IDXPROPERTIES ! indexProperties ;
	public final HiveParser.indexPropertiesPrefixed_return indexPropertiesPrefixed() throws RecognitionException {
		HiveParser.indexPropertiesPrefixed_return retval = new HiveParser.indexPropertiesPrefixed_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_IDXPROPERTIES120=null;
		ParserRuleReturnScope indexProperties121 =null;

		CommonTree KW_IDXPROPERTIES120_tree=null;

		 msgs.push("table properties with prefix"); 
		try {
			// Hive.g:520:5: ( KW_IDXPROPERTIES ! indexProperties )
			// Hive.g:521:9: KW_IDXPROPERTIES ! indexProperties
			{
			root_0 = (CommonTree)adaptor.nil();


			KW_IDXPROPERTIES120=(Token)match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed2699); 
			pushFollow(FOLLOW_indexProperties_in_indexPropertiesPrefixed2702);
			indexProperties121=indexProperties();
			state._fsp--;

			adaptor.addChild(root_0, indexProperties121.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexPropertiesPrefixed"


	public static class indexProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexProperties"
	// Hive.g:524:1: indexProperties : LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) ;
	public final HiveParser.indexProperties_return indexProperties() throws RecognitionException {
		HiveParser.indexProperties_return retval = new HiveParser.indexProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN122=null;
		Token RPAREN124=null;
		ParserRuleReturnScope indexPropertiesList123 =null;

		CommonTree LPAREN122_tree=null;
		CommonTree RPAREN124_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_indexPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesList");

		 msgs.push("index properties"); 
		try {
			// Hive.g:527:5: ( LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) )
			// Hive.g:528:7: LPAREN indexPropertiesList RPAREN
			{
			LPAREN122=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_indexProperties2735);  
			stream_LPAREN.add(LPAREN122);

			pushFollow(FOLLOW_indexPropertiesList_in_indexProperties2737);
			indexPropertiesList123=indexPropertiesList();
			state._fsp--;

			stream_indexPropertiesList.add(indexPropertiesList123.getTree());
			RPAREN124=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_indexProperties2739);  
			stream_RPAREN.add(RPAREN124);

			// AST REWRITE
			// elements: indexPropertiesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 528:41: -> ^( TOK_INDEXPROPERTIES indexPropertiesList )
			{
				// Hive.g:528:44: ^( TOK_INDEXPROPERTIES indexPropertiesList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INDEXPROPERTIES, "TOK_INDEXPROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_indexPropertiesList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexProperties"


	public static class indexPropertiesList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexPropertiesList"
	// Hive.g:531:1: indexPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) ;
	public final HiveParser.indexPropertiesList_return indexPropertiesList() throws RecognitionException {
		HiveParser.indexPropertiesList_return retval = new HiveParser.indexPropertiesList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA126=null;
		ParserRuleReturnScope keyValueProperty125 =null;
		ParserRuleReturnScope keyValueProperty127 =null;

		CommonTree COMMA126_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");

		 msgs.push("index properties list"); 
		try {
			// Hive.g:534:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) )
			// Hive.g:535:7: keyValueProperty ( COMMA keyValueProperty )*
			{
			pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList2780);
			keyValueProperty125=keyValueProperty();
			state._fsp--;

			stream_keyValueProperty.add(keyValueProperty125.getTree());
			// Hive.g:535:24: ( COMMA keyValueProperty )*
			loop41:
			while (true) {
				int alt41=2;
				int LA41_0 = input.LA(1);
				if ( (LA41_0==COMMA) ) {
					alt41=1;
				}

				switch (alt41) {
				case 1 :
					// Hive.g:535:25: COMMA keyValueProperty
					{
					COMMA126=(Token)match(input,COMMA,FOLLOW_COMMA_in_indexPropertiesList2783);  
					stream_COMMA.add(COMMA126);

					pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList2785);
					keyValueProperty127=keyValueProperty();
					state._fsp--;

					stream_keyValueProperty.add(keyValueProperty127.getTree());
					}
					break;

				default :
					break loop41;
				}
			}

			// AST REWRITE
			// elements: keyValueProperty
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 535:50: -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
			{
				// Hive.g:535:53: ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INDEXPROPLIST, "TOK_INDEXPROPLIST"), root_1);
				if ( !(stream_keyValueProperty.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_keyValueProperty.hasNext() ) {
					adaptor.addChild(root_1, stream_keyValueProperty.nextTree());
				}
				stream_keyValueProperty.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexPropertiesList"


	public static class dropIndexStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropIndexStatement"
	// Hive.g:538:1: dropIndexStatement : KW_DROP KW_INDEX ( ifExists )? indexName= Identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) ;
	public final HiveParser.dropIndexStatement_return dropIndexStatement() throws RecognitionException {
		HiveParser.dropIndexStatement_return retval = new HiveParser.dropIndexStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token indexName=null;
		Token KW_DROP128=null;
		Token KW_INDEX129=null;
		Token KW_ON131=null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope ifExists130 =null;

		CommonTree indexName_tree=null;
		CommonTree KW_DROP128_tree=null;
		CommonTree KW_INDEX129_tree=null;
		CommonTree KW_ON131_tree=null;
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 msgs.push("drop index statement");
		try {
			// Hive.g:541:5: ( KW_DROP KW_INDEX ( ifExists )? indexName= Identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) )
			// Hive.g:541:7: KW_DROP KW_INDEX ( ifExists )? indexName= Identifier KW_ON tab= tableName
			{
			KW_DROP128=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropIndexStatement2823);  
			stream_KW_DROP.add(KW_DROP128);

			KW_INDEX129=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_dropIndexStatement2825);  
			stream_KW_INDEX.add(KW_INDEX129);

			// Hive.g:541:24: ( ifExists )?
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==KW_IF) ) {
				alt42=1;
			}
			switch (alt42) {
				case 1 :
					// Hive.g:541:24: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropIndexStatement2827);
					ifExists130=ifExists();
					state._fsp--;

					stream_ifExists.add(ifExists130.getTree());
					}
					break;

			}

			indexName=(Token)match(input,Identifier,FOLLOW_Identifier_in_dropIndexStatement2832);  
			stream_Identifier.add(indexName);

			KW_ON131=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_dropIndexStatement2834);  
			stream_KW_ON.add(KW_ON131);

			pushFollow(FOLLOW_tableName_in_dropIndexStatement2838);
			tab=tableName();
			state._fsp--;

			stream_tableName.add(tab.getTree());
			// AST REWRITE
			// elements: tab, indexName, ifExists
			// token labels: indexName
			// rule labels: retval, tab
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 542:5: -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
			{
				// Hive.g:542:7: ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPINDEX, "TOK_DROPINDEX"), root_1);
				adaptor.addChild(root_1, stream_indexName.nextNode());
				adaptor.addChild(root_1, stream_tab.nextTree());
				// Hive.g:542:39: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropIndexStatement"


	public static class dropTableStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropTableStatement"
	// Hive.g:545:1: dropTableStatement : KW_DROP KW_TABLE ( ifExists )? tableName -> ^( TOK_DROPTABLE tableName ( ifExists )? ) ;
	public final HiveParser.dropTableStatement_return dropTableStatement() throws RecognitionException {
		HiveParser.dropTableStatement_return retval = new HiveParser.dropTableStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP132=null;
		Token KW_TABLE133=null;
		ParserRuleReturnScope ifExists134 =null;
		ParserRuleReturnScope tableName135 =null;

		CommonTree KW_DROP132_tree=null;
		CommonTree KW_TABLE133_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 msgs.push("drop statement"); 
		try {
			// Hive.g:548:5: ( KW_DROP KW_TABLE ( ifExists )? tableName -> ^( TOK_DROPTABLE tableName ( ifExists )? ) )
			// Hive.g:548:7: KW_DROP KW_TABLE ( ifExists )? tableName
			{
			KW_DROP132=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropTableStatement2883);  
			stream_KW_DROP.add(KW_DROP132);

			KW_TABLE133=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_dropTableStatement2885);  
			stream_KW_TABLE.add(KW_TABLE133);

			// Hive.g:548:24: ( ifExists )?
			int alt43=2;
			int LA43_0 = input.LA(1);
			if ( (LA43_0==KW_IF) ) {
				alt43=1;
			}
			switch (alt43) {
				case 1 :
					// Hive.g:548:24: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropTableStatement2887);
					ifExists134=ifExists();
					state._fsp--;

					stream_ifExists.add(ifExists134.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_dropTableStatement2890);
			tableName135=tableName();
			state._fsp--;

			stream_tableName.add(tableName135.getTree());
			// AST REWRITE
			// elements: ifExists, tableName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 548:44: -> ^( TOK_DROPTABLE tableName ( ifExists )? )
			{
				// Hive.g:548:47: ^( TOK_DROPTABLE tableName ( ifExists )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPTABLE, "TOK_DROPTABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// Hive.g:548:73: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropTableStatement"


	public static class alterStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatement"
	// Hive.g:551:1: alterStatement : KW_ALTER ! ( KW_TABLE ! alterTableStatementSuffix | KW_VIEW ! alterViewStatementSuffix | KW_INDEX ! alterIndexStatementSuffix | KW_DATABASE ! alterDatabaseStatementSuffix ) ;
	public final HiveParser.alterStatement_return alterStatement() throws RecognitionException {
		HiveParser.alterStatement_return retval = new HiveParser.alterStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ALTER136=null;
		Token KW_TABLE137=null;
		Token KW_VIEW139=null;
		Token KW_INDEX141=null;
		Token KW_DATABASE143=null;
		ParserRuleReturnScope alterTableStatementSuffix138 =null;
		ParserRuleReturnScope alterViewStatementSuffix140 =null;
		ParserRuleReturnScope alterIndexStatementSuffix142 =null;
		ParserRuleReturnScope alterDatabaseStatementSuffix144 =null;

		CommonTree KW_ALTER136_tree=null;
		CommonTree KW_TABLE137_tree=null;
		CommonTree KW_VIEW139_tree=null;
		CommonTree KW_INDEX141_tree=null;
		CommonTree KW_DATABASE143_tree=null;

		 msgs.push("alter statement"); 
		try {
			// Hive.g:554:5: ( KW_ALTER ! ( KW_TABLE ! alterTableStatementSuffix | KW_VIEW ! alterViewStatementSuffix | KW_INDEX ! alterIndexStatementSuffix | KW_DATABASE ! alterDatabaseStatementSuffix ) )
			// Hive.g:554:7: KW_ALTER ! ( KW_TABLE ! alterTableStatementSuffix | KW_VIEW ! alterViewStatementSuffix | KW_INDEX ! alterIndexStatementSuffix | KW_DATABASE ! alterDatabaseStatementSuffix )
			{
			root_0 = (CommonTree)adaptor.nil();


			KW_ALTER136=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement2928); 
			// Hive.g:555:9: ( KW_TABLE ! alterTableStatementSuffix | KW_VIEW ! alterViewStatementSuffix | KW_INDEX ! alterIndexStatementSuffix | KW_DATABASE ! alterDatabaseStatementSuffix )
			int alt44=4;
			switch ( input.LA(1) ) {
			case KW_TABLE:
				{
				alt44=1;
				}
				break;
			case KW_VIEW:
				{
				alt44=2;
				}
				break;
			case KW_INDEX:
				{
				alt44=3;
				}
				break;
			case KW_DATABASE:
				{
				alt44=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 44, 0, input);
				throw nvae;
			}
			switch (alt44) {
				case 1 :
					// Hive.g:556:13: KW_TABLE ! alterTableStatementSuffix
					{
					KW_TABLE137=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_alterStatement2953); 
					pushFollow(FOLLOW_alterTableStatementSuffix_in_alterStatement2956);
					alterTableStatementSuffix138=alterTableStatementSuffix();
					state._fsp--;

					adaptor.addChild(root_0, alterTableStatementSuffix138.getTree());

					}
					break;
				case 2 :
					// Hive.g:558:13: KW_VIEW ! alterViewStatementSuffix
					{
					KW_VIEW139=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_alterStatement2980); 
					pushFollow(FOLLOW_alterViewStatementSuffix_in_alterStatement2983);
					alterViewStatementSuffix140=alterViewStatementSuffix();
					state._fsp--;

					adaptor.addChild(root_0, alterViewStatementSuffix140.getTree());

					}
					break;
				case 3 :
					// Hive.g:560:13: KW_INDEX ! alterIndexStatementSuffix
					{
					KW_INDEX141=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_alterStatement3007); 
					pushFollow(FOLLOW_alterIndexStatementSuffix_in_alterStatement3010);
					alterIndexStatementSuffix142=alterIndexStatementSuffix();
					state._fsp--;

					adaptor.addChild(root_0, alterIndexStatementSuffix142.getTree());

					}
					break;
				case 4 :
					// Hive.g:562:13: KW_DATABASE ! alterDatabaseStatementSuffix
					{
					KW_DATABASE143=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_alterStatement3034); 
					pushFollow(FOLLOW_alterDatabaseStatementSuffix_in_alterStatement3037);
					alterDatabaseStatementSuffix144=alterDatabaseStatementSuffix();
					state._fsp--;

					adaptor.addChild(root_0, alterDatabaseStatementSuffix144.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatement"


	public static class alterTableStatementSuffix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterTableStatementSuffix"
	// Hive.g:566:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby );
	public final HiveParser.alterTableStatementSuffix_return alterTableStatementSuffix() throws RecognitionException {
		HiveParser.alterTableStatementSuffix_return retval = new HiveParser.alterTableStatementSuffix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope alterStatementSuffixRename145 =null;
		ParserRuleReturnScope alterStatementSuffixAddCol146 =null;
		ParserRuleReturnScope alterStatementSuffixRenameCol147 =null;
		ParserRuleReturnScope alterStatementSuffixDropPartitions148 =null;
		ParserRuleReturnScope alterStatementSuffixAddPartitions149 =null;
		ParserRuleReturnScope alterStatementSuffixTouch150 =null;
		ParserRuleReturnScope alterStatementSuffixArchive151 =null;
		ParserRuleReturnScope alterStatementSuffixUnArchive152 =null;
		ParserRuleReturnScope alterStatementSuffixProperties153 =null;
		ParserRuleReturnScope alterTblPartitionStatement154 =null;
		ParserRuleReturnScope alterStatementSuffixClusterbySortby155 =null;


		 msgs.push("alter table statement"); 
		try {
			// Hive.g:569:5: ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby )
			int alt45=11;
			int LA45_0 = input.LA(1);
			if ( (LA45_0==Identifier) ) {
				switch ( input.LA(2) ) {
				case KW_RENAME:
					{
					int LA45_2 = input.LA(3);
					if ( (LA45_2==KW_TO) ) {
						alt45=1;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 45, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case KW_CHANGE:
					{
					alt45=3;
					}
					break;
				case KW_DROP:
					{
					alt45=4;
					}
					break;
				case KW_ADD:
					{
					int LA45_5 = input.LA(3);
					if ( (LA45_5==KW_IF||LA45_5==KW_PARTITION) ) {
						alt45=5;
					}
					else if ( (LA45_5==KW_COLUMNS) ) {
						alt45=2;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 45, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case KW_TOUCH:
					{
					alt45=6;
					}
					break;
				case KW_ARCHIVE:
					{
					alt45=7;
					}
					break;
				case KW_UNARCHIVE:
					{
					alt45=8;
					}
					break;
				case KW_SET:
					{
					int LA45_9 = input.LA(3);
					if ( (LA45_9==KW_TBLPROPERTIES) ) {
						alt45=9;
					}
					else if ( (LA45_9==KW_FILEFORMAT||LA45_9==KW_LOCATION||(LA45_9 >= KW_SERDE && LA45_9 <= KW_SERDEPROPERTIES)) ) {
						alt45=10;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 45, 9, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case KW_CLUSTERED:
				case KW_NOT:
					{
					alt45=11;
					}
					break;
				case KW_REPLACE:
					{
					alt45=2;
					}
					break;
				case KW_CONCATENATE:
				case KW_DISABLE:
				case KW_ENABLE:
				case KW_PARTITION:
					{
					alt45=10;
					}
					break;
				default:
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 45, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 45, 0, input);
				throw nvae;
			}

			switch (alt45) {
				case 1 :
					// Hive.g:569:7: alterStatementSuffixRename
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix3074);
					alterStatementSuffixRename145=alterStatementSuffixRename();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixRename145.getTree());

					}
					break;
				case 2 :
					// Hive.g:570:7: alterStatementSuffixAddCol
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddCol_in_alterTableStatementSuffix3082);
					alterStatementSuffixAddCol146=alterStatementSuffixAddCol();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixAddCol146.getTree());

					}
					break;
				case 3 :
					// Hive.g:571:7: alterStatementSuffixRenameCol
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRenameCol_in_alterTableStatementSuffix3090);
					alterStatementSuffixRenameCol147=alterStatementSuffixRenameCol();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixRenameCol147.getTree());

					}
					break;
				case 4 :
					// Hive.g:572:7: alterStatementSuffixDropPartitions
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix3098);
					alterStatementSuffixDropPartitions148=alterStatementSuffixDropPartitions();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixDropPartitions148.getTree());

					}
					break;
				case 5 :
					// Hive.g:573:7: alterStatementSuffixAddPartitions
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix3106);
					alterStatementSuffixAddPartitions149=alterStatementSuffixAddPartitions();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixAddPartitions149.getTree());

					}
					break;
				case 6 :
					// Hive.g:574:7: alterStatementSuffixTouch
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix3114);
					alterStatementSuffixTouch150=alterStatementSuffixTouch();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixTouch150.getTree());

					}
					break;
				case 7 :
					// Hive.g:575:7: alterStatementSuffixArchive
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix3122);
					alterStatementSuffixArchive151=alterStatementSuffixArchive();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixArchive151.getTree());

					}
					break;
				case 8 :
					// Hive.g:576:7: alterStatementSuffixUnArchive
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix3130);
					alterStatementSuffixUnArchive152=alterStatementSuffixUnArchive();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixUnArchive152.getTree());

					}
					break;
				case 9 :
					// Hive.g:577:7: alterStatementSuffixProperties
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix3138);
					alterStatementSuffixProperties153=alterStatementSuffixProperties();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixProperties153.getTree());

					}
					break;
				case 10 :
					// Hive.g:578:7: alterTblPartitionStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterTblPartitionStatement_in_alterTableStatementSuffix3146);
					alterTblPartitionStatement154=alterTblPartitionStatement();
					state._fsp--;

					adaptor.addChild(root_0, alterTblPartitionStatement154.getTree());

					}
					break;
				case 11 :
					// Hive.g:579:7: alterStatementSuffixClusterbySortby
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixClusterbySortby_in_alterTableStatementSuffix3154);
					alterStatementSuffixClusterbySortby155=alterStatementSuffixClusterbySortby();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixClusterbySortby155.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTableStatementSuffix"


	public static class alterViewStatementSuffix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterViewStatementSuffix"
	// Hive.g:582:1: alterViewStatementSuffix : ( alterViewSuffixProperties | alterStatementSuffixRename -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename ) | alterStatementSuffixAddPartitions -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions ) | alterStatementSuffixDropPartitions -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions ) );
	public final HiveParser.alterViewStatementSuffix_return alterViewStatementSuffix() throws RecognitionException {
		HiveParser.alterViewStatementSuffix_return retval = new HiveParser.alterViewStatementSuffix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope alterViewSuffixProperties156 =null;
		ParserRuleReturnScope alterStatementSuffixRename157 =null;
		ParserRuleReturnScope alterStatementSuffixAddPartitions158 =null;
		ParserRuleReturnScope alterStatementSuffixDropPartitions159 =null;

		RewriteRuleSubtreeStream stream_alterStatementSuffixAddPartitions=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixAddPartitions");
		RewriteRuleSubtreeStream stream_alterStatementSuffixRename=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixRename");
		RewriteRuleSubtreeStream stream_alterStatementSuffixDropPartitions=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixDropPartitions");

		 msgs.push("alter view statement"); 
		try {
			// Hive.g:585:5: ( alterViewSuffixProperties | alterStatementSuffixRename -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename ) | alterStatementSuffixAddPartitions -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions ) | alterStatementSuffixDropPartitions -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions ) )
			int alt46=4;
			int LA46_0 = input.LA(1);
			if ( (LA46_0==Identifier) ) {
				switch ( input.LA(2) ) {
				case KW_SET:
					{
					alt46=1;
					}
					break;
				case KW_RENAME:
					{
					alt46=2;
					}
					break;
				case KW_ADD:
					{
					alt46=3;
					}
					break;
				case KW_DROP:
					{
					alt46=4;
					}
					break;
				default:
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 46, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 46, 0, input);
				throw nvae;
			}

			switch (alt46) {
				case 1 :
					// Hive.g:585:7: alterViewSuffixProperties
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix3181);
					alterViewSuffixProperties156=alterViewSuffixProperties();
					state._fsp--;

					adaptor.addChild(root_0, alterViewSuffixProperties156.getTree());

					}
					break;
				case 2 :
					// Hive.g:586:7: alterStatementSuffixRename
					{
					pushFollow(FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix3189);
					alterStatementSuffixRename157=alterStatementSuffixRename();
					state._fsp--;

					stream_alterStatementSuffixRename.add(alterStatementSuffixRename157.getTree());
					// AST REWRITE
					// elements: alterStatementSuffixRename
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 587:9: -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename )
					{
						// Hive.g:587:12: ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERVIEW_RENAME, "TOK_ALTERVIEW_RENAME"), root_1);
						adaptor.addChild(root_1, stream_alterStatementSuffixRename.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// Hive.g:588:7: alterStatementSuffixAddPartitions
					{
					pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix3213);
					alterStatementSuffixAddPartitions158=alterStatementSuffixAddPartitions();
					state._fsp--;

					stream_alterStatementSuffixAddPartitions.add(alterStatementSuffixAddPartitions158.getTree());
					// AST REWRITE
					// elements: alterStatementSuffixAddPartitions
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 589:9: -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions )
					{
						// Hive.g:589:12: ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERVIEW_ADDPARTS, "TOK_ALTERVIEW_ADDPARTS"), root_1);
						adaptor.addChild(root_1, stream_alterStatementSuffixAddPartitions.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 4 :
					// Hive.g:590:7: alterStatementSuffixDropPartitions
					{
					pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix3237);
					alterStatementSuffixDropPartitions159=alterStatementSuffixDropPartitions();
					state._fsp--;

					stream_alterStatementSuffixDropPartitions.add(alterStatementSuffixDropPartitions159.getTree());
					// AST REWRITE
					// elements: alterStatementSuffixDropPartitions
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 591:9: -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions )
					{
						// Hive.g:591:12: ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERVIEW_DROPPARTS, "TOK_ALTERVIEW_DROPPARTS"), root_1);
						adaptor.addChild(root_1, stream_alterStatementSuffixDropPartitions.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterViewStatementSuffix"


	public static class alterIndexStatementSuffix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterIndexStatementSuffix"
	// Hive.g:594:1: alterIndexStatementSuffix : indexName= Identifier ( KW_ON tableNameId= Identifier ) ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) ) ;
	public final HiveParser.alterIndexStatementSuffix_return alterIndexStatementSuffix() throws RecognitionException {
		HiveParser.alterIndexStatementSuffix_return retval = new HiveParser.alterIndexStatementSuffix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token indexName=null;
		Token tableNameId=null;
		Token KW_ON160=null;
		Token KW_REBUILD162=null;
		Token KW_SET163=null;
		Token KW_IDXPROPERTIES164=null;
		ParserRuleReturnScope partitionSpec161 =null;
		ParserRuleReturnScope indexProperties165 =null;

		CommonTree indexName_tree=null;
		CommonTree tableNameId_tree=null;
		CommonTree KW_ON160_tree=null;
		CommonTree KW_REBUILD162_tree=null;
		CommonTree KW_SET163_tree=null;
		CommonTree KW_IDXPROPERTIES164_tree=null;
		RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleTokenStream stream_KW_IDXPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_IDXPROPERTIES");
		RewriteRuleSubtreeStream stream_indexProperties=new RewriteRuleSubtreeStream(adaptor,"rule indexProperties");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 msgs.push("alter index statement"); 
		try {
			// Hive.g:597:5: (indexName= Identifier ( KW_ON tableNameId= Identifier ) ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) ) )
			// Hive.g:597:7: indexName= Identifier ( KW_ON tableNameId= Identifier ) ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) )
			{
			indexName=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterIndexStatementSuffix3282);  
			stream_Identifier.add(indexName);

			// Hive.g:598:7: ( KW_ON tableNameId= Identifier )
			// Hive.g:598:8: KW_ON tableNameId= Identifier
			{
			KW_ON160=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_alterIndexStatementSuffix3291);  
			stream_KW_ON.add(KW_ON160);

			tableNameId=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterIndexStatementSuffix3295);  
			stream_Identifier.add(tableNameId);

			}

			// Hive.g:599:7: ( partitionSpec )?
			int alt47=2;
			int LA47_0 = input.LA(1);
			if ( (LA47_0==KW_PARTITION) ) {
				alt47=1;
			}
			switch (alt47) {
				case 1 :
					// Hive.g:599:7: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterIndexStatementSuffix3304);
					partitionSpec161=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec161.getTree());
					}
					break;

			}

			// Hive.g:600:5: ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) )
			int alt48=2;
			int LA48_0 = input.LA(1);
			if ( (LA48_0==KW_REBUILD) ) {
				alt48=1;
			}
			else if ( (LA48_0==KW_SET) ) {
				alt48=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 48, 0, input);
				throw nvae;
			}

			switch (alt48) {
				case 1 :
					// Hive.g:601:7: KW_REBUILD
					{
					KW_REBUILD162=(Token)match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix3319);  
					stream_KW_REBUILD.add(KW_REBUILD162);

					// AST REWRITE
					// elements: indexName, partitionSpec, tableNameId
					// token labels: tableNameId, indexName
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_tableNameId=new RewriteRuleTokenStream(adaptor,"token tableNameId",tableNameId);
					RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 602:7: -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? )
					{
						// Hive.g:602:9: ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERINDEX_REBUILD, "TOK_ALTERINDEX_REBUILD"), root_1);
						adaptor.addChild(root_1, stream_tableNameId.nextNode());
						adaptor.addChild(root_1, stream_indexName.nextNode());
						// Hive.g:602:58: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:604:7: KW_SET KW_IDXPROPERTIES indexProperties
					{
					KW_SET163=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterIndexStatementSuffix3353);  
					stream_KW_SET.add(KW_SET163);

					KW_IDXPROPERTIES164=(Token)match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix3355);  
					stream_KW_IDXPROPERTIES.add(KW_IDXPROPERTIES164);

					pushFollow(FOLLOW_indexProperties_in_alterIndexStatementSuffix3363);
					indexProperties165=indexProperties();
					state._fsp--;

					stream_indexProperties.add(indexProperties165.getTree());
					// AST REWRITE
					// elements: indexProperties, tableNameId, indexName
					// token labels: tableNameId, indexName
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_tableNameId=new RewriteRuleTokenStream(adaptor,"token tableNameId",tableNameId);
					RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 606:7: -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties )
					{
						// Hive.g:606:9: ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERINDEX_PROPERTIES, "TOK_ALTERINDEX_PROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableNameId.nextNode());
						adaptor.addChild(root_1, stream_indexName.nextNode());
						adaptor.addChild(root_1, stream_indexProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterIndexStatementSuffix"


	public static class alterDatabaseStatementSuffix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseStatementSuffix"
	// Hive.g:610:1: alterDatabaseStatementSuffix : alterDatabaseSuffixProperties ;
	public final HiveParser.alterDatabaseStatementSuffix_return alterDatabaseStatementSuffix() throws RecognitionException {
		HiveParser.alterDatabaseStatementSuffix_return retval = new HiveParser.alterDatabaseStatementSuffix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope alterDatabaseSuffixProperties166 =null;


		 msgs.push("alter database statement"); 
		try {
			// Hive.g:613:5: ( alterDatabaseSuffixProperties )
			// Hive.g:613:7: alterDatabaseSuffixProperties
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix3415);
			alterDatabaseSuffixProperties166=alterDatabaseSuffixProperties();
			state._fsp--;

			adaptor.addChild(root_0, alterDatabaseSuffixProperties166.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseStatementSuffix"


	public static class alterDatabaseSuffixProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseSuffixProperties"
	// Hive.g:616:1: alterDatabaseSuffixProperties : name= Identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) ;
	public final HiveParser.alterDatabaseSuffixProperties_return alterDatabaseSuffixProperties() throws RecognitionException {
		HiveParser.alterDatabaseSuffixProperties_return retval = new HiveParser.alterDatabaseSuffixProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token name=null;
		Token KW_SET167=null;
		Token KW_DBPROPERTIES168=null;
		ParserRuleReturnScope dbProperties169 =null;

		CommonTree name_tree=null;
		CommonTree KW_SET167_tree=null;
		CommonTree KW_DBPROPERTIES168_tree=null;
		RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");

		 msgs.push("alter database properties statement"); 
		try {
			// Hive.g:619:5: (name= Identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) )
			// Hive.g:619:7: name= Identifier KW_SET KW_DBPROPERTIES dbProperties
			{
			name=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterDatabaseSuffixProperties3444);  
			stream_Identifier.add(name);

			KW_SET167=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixProperties3446);  
			stream_KW_SET.add(KW_SET167);

			KW_DBPROPERTIES168=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties3448);  
			stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES168);

			pushFollow(FOLLOW_dbProperties_in_alterDatabaseSuffixProperties3450);
			dbProperties169=dbProperties();
			state._fsp--;

			stream_dbProperties.add(dbProperties169.getTree());
			// AST REWRITE
			// elements: name, dbProperties
			// token labels: name
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 620:5: -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
			{
				// Hive.g:620:8: ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERDATABASE_PROPERTIES, "TOK_ALTERDATABASE_PROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_name.nextNode());
				adaptor.addChild(root_1, stream_dbProperties.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseSuffixProperties"


	public static class alterStatementSuffixRename_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixRename"
	// Hive.g:623:1: alterStatementSuffixRename : oldName= Identifier KW_RENAME KW_TO newName= Identifier -> ^( TOK_ALTERTABLE_RENAME $oldName $newName) ;
	public final HiveParser.alterStatementSuffixRename_return alterStatementSuffixRename() throws RecognitionException {
		HiveParser.alterStatementSuffixRename_return retval = new HiveParser.alterStatementSuffixRename_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token oldName=null;
		Token newName=null;
		Token KW_RENAME170=null;
		Token KW_TO171=null;

		CommonTree oldName_tree=null;
		CommonTree newName_tree=null;
		CommonTree KW_RENAME170_tree=null;
		CommonTree KW_TO171_tree=null;
		RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");

		 msgs.push("rename statement"); 
		try {
			// Hive.g:626:5: (oldName= Identifier KW_RENAME KW_TO newName= Identifier -> ^( TOK_ALTERTABLE_RENAME $oldName $newName) )
			// Hive.g:626:7: oldName= Identifier KW_RENAME KW_TO newName= Identifier
			{
			oldName=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRename3494);  
			stream_Identifier.add(oldName);

			KW_RENAME170=(Token)match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRename3496);  
			stream_KW_RENAME.add(KW_RENAME170);

			KW_TO171=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRename3498);  
			stream_KW_TO.add(KW_TO171);

			newName=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRename3502);  
			stream_Identifier.add(newName);

			// AST REWRITE
			// elements: oldName, newName
			// token labels: newName, oldName
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_newName=new RewriteRuleTokenStream(adaptor,"token newName",newName);
			RewriteRuleTokenStream stream_oldName=new RewriteRuleTokenStream(adaptor,"token oldName",oldName);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 627:5: -> ^( TOK_ALTERTABLE_RENAME $oldName $newName)
			{
				// Hive.g:627:8: ^( TOK_ALTERTABLE_RENAME $oldName $newName)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_RENAME, "TOK_ALTERTABLE_RENAME"), root_1);
				adaptor.addChild(root_1, stream_oldName.nextNode());
				adaptor.addChild(root_1, stream_newName.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixRename"


	public static class alterStatementSuffixAddCol_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddCol"
	// Hive.g:630:1: alterStatementSuffixAddCol : Identifier (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList ) -> ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList ) ;
	public final HiveParser.alterStatementSuffixAddCol_return alterStatementSuffixAddCol() throws RecognitionException {
		HiveParser.alterStatementSuffixAddCol_return retval = new HiveParser.alterStatementSuffixAddCol_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token add=null;
		Token replace=null;
		Token Identifier172=null;
		Token KW_COLUMNS173=null;
		Token LPAREN174=null;
		Token RPAREN176=null;
		ParserRuleReturnScope columnNameTypeList175 =null;

		CommonTree add_tree=null;
		CommonTree replace_tree=null;
		CommonTree Identifier172_tree=null;
		CommonTree KW_COLUMNS173_tree=null;
		CommonTree LPAREN174_tree=null;
		CommonTree RPAREN176_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");

		 msgs.push("add column statement"); 
		try {
			// Hive.g:633:5: ( Identifier (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList ) -> ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList ) )
			// Hive.g:633:7: Identifier (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN
			{
			Identifier172=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixAddCol3545);  
			stream_Identifier.add(Identifier172);

			// Hive.g:633:18: (add= KW_ADD |replace= KW_REPLACE )
			int alt49=2;
			int LA49_0 = input.LA(1);
			if ( (LA49_0==KW_ADD) ) {
				alt49=1;
			}
			else if ( (LA49_0==KW_REPLACE) ) {
				alt49=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 49, 0, input);
				throw nvae;
			}

			switch (alt49) {
				case 1 :
					// Hive.g:633:19: add= KW_ADD
					{
					add=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddCol3550);  
					stream_KW_ADD.add(add);

					}
					break;
				case 2 :
					// Hive.g:633:32: replace= KW_REPLACE
					{
					replace=(Token)match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol3556);  
					stream_KW_REPLACE.add(replace);

					}
					break;

			}

			KW_COLUMNS173=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol3559);  
			stream_KW_COLUMNS.add(KW_COLUMNS173);

			LPAREN174=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alterStatementSuffixAddCol3561);  
			stream_LPAREN.add(LPAREN174);

			pushFollow(FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol3563);
			columnNameTypeList175=columnNameTypeList();
			state._fsp--;

			stream_columnNameTypeList.add(columnNameTypeList175.getTree());
			RPAREN176=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alterStatementSuffixAddCol3565);  
			stream_RPAREN.add(RPAREN176);

			// AST REWRITE
			// elements: columnNameTypeList, Identifier, columnNameTypeList, Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 634:5: -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList )
			if (add != null) {
				// Hive.g:634:24: ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_ADDCOLS, "TOK_ALTERTABLE_ADDCOLS"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 635:5: -> ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList )
			{
				// Hive.g:635:24: ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_REPLACECOLS, "TOK_ALTERTABLE_REPLACECOLS"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddCol"


	public static class alterStatementSuffixRenameCol_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixRenameCol"
	// Hive.g:638:1: alterStatementSuffixRenameCol : Identifier KW_CHANGE ( KW_COLUMN )? oldName= Identifier newName= Identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? -> ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ) ;
	public final HiveParser.alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol() throws RecognitionException {
		HiveParser.alterStatementSuffixRenameCol_return retval = new HiveParser.alterStatementSuffixRenameCol_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token oldName=null;
		Token newName=null;
		Token comment=null;
		Token Identifier177=null;
		Token KW_CHANGE178=null;
		Token KW_COLUMN179=null;
		Token KW_COMMENT181=null;
		ParserRuleReturnScope colType180 =null;
		ParserRuleReturnScope alterStatementChangeColPosition182 =null;

		CommonTree oldName_tree=null;
		CommonTree newName_tree=null;
		CommonTree comment_tree=null;
		CommonTree Identifier177_tree=null;
		CommonTree KW_CHANGE178_tree=null;
		CommonTree KW_COLUMN179_tree=null;
		CommonTree KW_COMMENT181_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
		RewriteRuleTokenStream stream_KW_CHANGE=new RewriteRuleTokenStream(adaptor,"token KW_CHANGE");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_alterStatementChangeColPosition=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementChangeColPosition");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");

		 msgs.push("rename column name"); 
		try {
			// Hive.g:641:5: ( Identifier KW_CHANGE ( KW_COLUMN )? oldName= Identifier newName= Identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? -> ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ) )
			// Hive.g:641:7: Identifier KW_CHANGE ( KW_COLUMN )? oldName= Identifier newName= Identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )?
			{
			Identifier177=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRenameCol3638);  
			stream_Identifier.add(Identifier177);

			KW_CHANGE178=(Token)match(input,KW_CHANGE,FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol3640);  
			stream_KW_CHANGE.add(KW_CHANGE178);

			// Hive.g:641:28: ( KW_COLUMN )?
			int alt50=2;
			int LA50_0 = input.LA(1);
			if ( (LA50_0==KW_COLUMN) ) {
				alt50=1;
			}
			switch (alt50) {
				case 1 :
					// Hive.g:641:28: KW_COLUMN
					{
					KW_COLUMN179=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol3642);  
					stream_KW_COLUMN.add(KW_COLUMN179);

					}
					break;

			}

			oldName=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRenameCol3647);  
			stream_Identifier.add(oldName);

			newName=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRenameCol3651);  
			stream_Identifier.add(newName);

			pushFollow(FOLLOW_colType_in_alterStatementSuffixRenameCol3653);
			colType180=colType();
			state._fsp--;

			stream_colType.add(colType180.getTree());
			// Hive.g:641:85: ( KW_COMMENT comment= StringLiteral )?
			int alt51=2;
			int LA51_0 = input.LA(1);
			if ( (LA51_0==KW_COMMENT) ) {
				alt51=1;
			}
			switch (alt51) {
				case 1 :
					// Hive.g:641:86: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT181=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol3656);  
					stream_KW_COMMENT.add(KW_COMMENT181);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol3660);  
					stream_StringLiteral.add(comment);

					}
					break;

			}

			// Hive.g:641:121: ( alterStatementChangeColPosition )?
			int alt52=2;
			int LA52_0 = input.LA(1);
			if ( (LA52_0==KW_AFTER||LA52_0==KW_FIRST) ) {
				alt52=1;
			}
			switch (alt52) {
				case 1 :
					// Hive.g:641:121: alterStatementChangeColPosition
					{
					pushFollow(FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol3664);
					alterStatementChangeColPosition182=alterStatementChangeColPosition();
					state._fsp--;

					stream_alterStatementChangeColPosition.add(alterStatementChangeColPosition182.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: alterStatementChangeColPosition, colType, Identifier, newName, comment, oldName
			// token labels: newName, comment, oldName
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_newName=new RewriteRuleTokenStream(adaptor,"token newName",newName);
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleTokenStream stream_oldName=new RewriteRuleTokenStream(adaptor,"token oldName",oldName);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 642:5: -> ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? )
			{
				// Hive.g:642:7: ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_RENAMECOL, "TOK_ALTERTABLE_RENAMECOL"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				adaptor.addChild(root_1, stream_oldName.nextNode());
				adaptor.addChild(root_1, stream_newName.nextNode());
				adaptor.addChild(root_1, stream_colType.nextTree());
				// Hive.g:642:72: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				// Hive.g:642:81: ( alterStatementChangeColPosition )?
				if ( stream_alterStatementChangeColPosition.hasNext() ) {
					adaptor.addChild(root_1, stream_alterStatementChangeColPosition.nextTree());
				}
				stream_alterStatementChangeColPosition.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixRenameCol"


	public static class alterStatementChangeColPosition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementChangeColPosition"
	// Hive.g:645:1: alterStatementChangeColPosition : (first= KW_FIRST | KW_AFTER afterCol= Identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) );
	public final HiveParser.alterStatementChangeColPosition_return alterStatementChangeColPosition() throws RecognitionException {
		HiveParser.alterStatementChangeColPosition_return retval = new HiveParser.alterStatementChangeColPosition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token first=null;
		Token afterCol=null;
		Token KW_AFTER183=null;

		CommonTree first_tree=null;
		CommonTree afterCol_tree=null;
		CommonTree KW_AFTER183_tree=null;
		RewriteRuleTokenStream stream_KW_AFTER=new RewriteRuleTokenStream(adaptor,"token KW_AFTER");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

		try {
			// Hive.g:646:5: (first= KW_FIRST | KW_AFTER afterCol= Identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) )
			int alt53=2;
			int LA53_0 = input.LA(1);
			if ( (LA53_0==KW_FIRST) ) {
				alt53=1;
			}
			else if ( (LA53_0==KW_AFTER) ) {
				alt53=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 53, 0, input);
				throw nvae;
			}

			switch (alt53) {
				case 1 :
					// Hive.g:646:7: first= KW_FIRST
					{
					root_0 = (CommonTree)adaptor.nil();


					first=(Token)match(input,KW_FIRST,FOLLOW_KW_FIRST_in_alterStatementChangeColPosition3710); 
					first_tree = (CommonTree)adaptor.create(first);
					adaptor.addChild(root_0, first_tree);

					}
					break;
				case 2 :
					// Hive.g:646:22: KW_AFTER afterCol= Identifier
					{
					KW_AFTER183=(Token)match(input,KW_AFTER,FOLLOW_KW_AFTER_in_alterStatementChangeColPosition3712);  
					stream_KW_AFTER.add(KW_AFTER183);

					afterCol=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementChangeColPosition3716);  
					stream_Identifier.add(afterCol);

					// AST REWRITE
					// elements: afterCol
					// token labels: afterCol
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_afterCol=new RewriteRuleTokenStream(adaptor,"token afterCol",afterCol);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 647:5: -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
					if (first != null) {
						// Hive.g:647:25: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}

					else // 648:5: -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
					{
						// Hive.g:648:8: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);
						adaptor.addChild(root_1, stream_afterCol.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementChangeColPosition"


	public static class alterStatementSuffixAddPartitions_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddPartitions"
	// Hive.g:651:1: alterStatementSuffixAddPartitions : Identifier KW_ADD ( ifNotExists )? partitionSpec ( partitionLocation )? ( partitionSpec ( partitionLocation )? )* -> ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ ) ;
	public final HiveParser.alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions() throws RecognitionException {
		HiveParser.alterStatementSuffixAddPartitions_return retval = new HiveParser.alterStatementSuffixAddPartitions_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier184=null;
		Token KW_ADD185=null;
		ParserRuleReturnScope ifNotExists186 =null;
		ParserRuleReturnScope partitionSpec187 =null;
		ParserRuleReturnScope partitionLocation188 =null;
		ParserRuleReturnScope partitionSpec189 =null;
		ParserRuleReturnScope partitionLocation190 =null;

		CommonTree Identifier184_tree=null;
		CommonTree KW_ADD185_tree=null;
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_partitionLocation=new RewriteRuleSubtreeStream(adaptor,"rule partitionLocation");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");

		 msgs.push("add partition statement"); 
		try {
			// Hive.g:654:5: ( Identifier KW_ADD ( ifNotExists )? partitionSpec ( partitionLocation )? ( partitionSpec ( partitionLocation )? )* -> ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ ) )
			// Hive.g:654:7: Identifier KW_ADD ( ifNotExists )? partitionSpec ( partitionLocation )? ( partitionSpec ( partitionLocation )? )*
			{
			Identifier184=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixAddPartitions3768);  
			stream_Identifier.add(Identifier184);

			KW_ADD185=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions3770);  
			stream_KW_ADD.add(KW_ADD185);

			// Hive.g:654:25: ( ifNotExists )?
			int alt54=2;
			int LA54_0 = input.LA(1);
			if ( (LA54_0==KW_IF) ) {
				alt54=1;
			}
			switch (alt54) {
				case 1 :
					// Hive.g:654:25: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions3772);
					ifNotExists186=ifNotExists();
					state._fsp--;

					stream_ifNotExists.add(ifNotExists186.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions3775);
			partitionSpec187=partitionSpec();
			state._fsp--;

			stream_partitionSpec.add(partitionSpec187.getTree());
			// Hive.g:654:52: ( partitionLocation )?
			int alt55=2;
			int LA55_0 = input.LA(1);
			if ( (LA55_0==KW_LOCATION) ) {
				alt55=1;
			}
			switch (alt55) {
				case 1 :
					// Hive.g:654:52: partitionLocation
					{
					pushFollow(FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions3777);
					partitionLocation188=partitionLocation();
					state._fsp--;

					stream_partitionLocation.add(partitionLocation188.getTree());
					}
					break;

			}

			// Hive.g:654:71: ( partitionSpec ( partitionLocation )? )*
			loop57:
			while (true) {
				int alt57=2;
				int LA57_0 = input.LA(1);
				if ( (LA57_0==KW_PARTITION) ) {
					alt57=1;
				}

				switch (alt57) {
				case 1 :
					// Hive.g:654:72: partitionSpec ( partitionLocation )?
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions3781);
					partitionSpec189=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec189.getTree());
					// Hive.g:654:86: ( partitionLocation )?
					int alt56=2;
					int LA56_0 = input.LA(1);
					if ( (LA56_0==KW_LOCATION) ) {
						alt56=1;
					}
					switch (alt56) {
						case 1 :
							// Hive.g:654:86: partitionLocation
							{
							pushFollow(FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions3783);
							partitionLocation190=partitionLocation();
							state._fsp--;

							stream_partitionLocation.add(partitionLocation190.getTree());
							}
							break;

					}

					}
					break;

				default :
					break loop57;
				}
			}

			// AST REWRITE
			// elements: Identifier, partitionLocation, partitionSpec, ifNotExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 655:5: -> ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ )
			{
				// Hive.g:655:8: ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_ADDPARTS, "TOK_ALTERTABLE_ADDPARTS"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// Hive.g:655:45: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				if ( !(stream_partitionSpec.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
					// Hive.g:655:73: ( partitionLocation )?
					if ( stream_partitionLocation.hasNext() ) {
						adaptor.addChild(root_1, stream_partitionLocation.nextTree());
					}
					stream_partitionLocation.reset();

				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddPartitions"


	public static class alterStatementSuffixTouch_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixTouch"
	// Hive.g:658:1: alterStatementSuffixTouch : Identifier KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* ) ;
	public final HiveParser.alterStatementSuffixTouch_return alterStatementSuffixTouch() throws RecognitionException {
		HiveParser.alterStatementSuffixTouch_return retval = new HiveParser.alterStatementSuffixTouch_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier191=null;
		Token KW_TOUCH192=null;
		ParserRuleReturnScope partitionSpec193 =null;

		CommonTree Identifier191_tree=null;
		CommonTree KW_TOUCH192_tree=null;
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_TOUCH=new RewriteRuleTokenStream(adaptor,"token KW_TOUCH");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 msgs.push("touch statement"); 
		try {
			// Hive.g:661:5: ( Identifier KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* ) )
			// Hive.g:661:7: Identifier KW_TOUCH ( partitionSpec )*
			{
			Identifier191=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixTouch3836);  
			stream_Identifier.add(Identifier191);

			KW_TOUCH192=(Token)match(input,KW_TOUCH,FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch3838);  
			stream_KW_TOUCH.add(KW_TOUCH192);

			// Hive.g:661:27: ( partitionSpec )*
			loop58:
			while (true) {
				int alt58=2;
				int LA58_0 = input.LA(1);
				if ( (LA58_0==KW_PARTITION) ) {
					alt58=1;
				}

				switch (alt58) {
				case 1 :
					// Hive.g:661:28: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixTouch3841);
					partitionSpec193=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec193.getTree());
					}
					break;

				default :
					break loop58;
				}
			}

			// AST REWRITE
			// elements: partitionSpec, Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 662:5: -> ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* )
			{
				// Hive.g:662:8: ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_TOUCH, "TOK_ALTERTABLE_TOUCH"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// Hive.g:662:42: ( partitionSpec )*
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixTouch"


	public static class alterStatementSuffixArchive_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixArchive"
	// Hive.g:665:1: alterStatementSuffixArchive : Identifier KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* ) ;
	public final HiveParser.alterStatementSuffixArchive_return alterStatementSuffixArchive() throws RecognitionException {
		HiveParser.alterStatementSuffixArchive_return retval = new HiveParser.alterStatementSuffixArchive_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier194=null;
		Token KW_ARCHIVE195=null;
		ParserRuleReturnScope partitionSpec196 =null;

		CommonTree Identifier194_tree=null;
		CommonTree KW_ARCHIVE195_tree=null;
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 msgs.push("archive statement"); 
		try {
			// Hive.g:668:5: ( Identifier KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* ) )
			// Hive.g:668:7: Identifier KW_ARCHIVE ( partitionSpec )*
			{
			Identifier194=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixArchive3887);  
			stream_Identifier.add(Identifier194);

			KW_ARCHIVE195=(Token)match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive3889);  
			stream_KW_ARCHIVE.add(KW_ARCHIVE195);

			// Hive.g:668:29: ( partitionSpec )*
			loop59:
			while (true) {
				int alt59=2;
				int LA59_0 = input.LA(1);
				if ( (LA59_0==KW_PARTITION) ) {
					alt59=1;
				}

				switch (alt59) {
				case 1 :
					// Hive.g:668:30: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixArchive3892);
					partitionSpec196=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec196.getTree());
					}
					break;

				default :
					break loop59;
				}
			}

			// AST REWRITE
			// elements: partitionSpec, Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 669:5: -> ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* )
			{
				// Hive.g:669:8: ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_ARCHIVE, "TOK_ALTERTABLE_ARCHIVE"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// Hive.g:669:44: ( partitionSpec )*
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixArchive"


	public static class alterStatementSuffixUnArchive_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixUnArchive"
	// Hive.g:672:1: alterStatementSuffixUnArchive : Identifier KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* ) ;
	public final HiveParser.alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive() throws RecognitionException {
		HiveParser.alterStatementSuffixUnArchive_return retval = new HiveParser.alterStatementSuffixUnArchive_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier197=null;
		Token KW_UNARCHIVE198=null;
		ParserRuleReturnScope partitionSpec199 =null;

		CommonTree Identifier197_tree=null;
		CommonTree KW_UNARCHIVE198_tree=null;
		RewriteRuleTokenStream stream_KW_UNARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_UNARCHIVE");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 msgs.push("unarchive statement"); 
		try {
			// Hive.g:675:5: ( Identifier KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* ) )
			// Hive.g:675:7: Identifier KW_UNARCHIVE ( partitionSpec )*
			{
			Identifier197=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixUnArchive3938);  
			stream_Identifier.add(Identifier197);

			KW_UNARCHIVE198=(Token)match(input,KW_UNARCHIVE,FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive3940);  
			stream_KW_UNARCHIVE.add(KW_UNARCHIVE198);

			// Hive.g:675:31: ( partitionSpec )*
			loop60:
			while (true) {
				int alt60=2;
				int LA60_0 = input.LA(1);
				if ( (LA60_0==KW_PARTITION) ) {
					alt60=1;
				}

				switch (alt60) {
				case 1 :
					// Hive.g:675:32: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive3943);
					partitionSpec199=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec199.getTree());
					}
					break;

				default :
					break loop60;
				}
			}

			// AST REWRITE
			// elements: partitionSpec, Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 676:5: -> ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* )
			{
				// Hive.g:676:8: ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_UNARCHIVE, "TOK_ALTERTABLE_UNARCHIVE"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// Hive.g:676:46: ( partitionSpec )*
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixUnArchive"


	public static class partitionLocation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "partitionLocation"
	// Hive.g:679:1: partitionLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) ;
	public final HiveParser.partitionLocation_return partitionLocation() throws RecognitionException {
		HiveParser.partitionLocation_return retval = new HiveParser.partitionLocation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token locn=null;
		Token KW_LOCATION200=null;

		CommonTree locn_tree=null;
		CommonTree KW_LOCATION200_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		 msgs.push("partition location"); 
		try {
			// Hive.g:682:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) )
			// Hive.g:683:7: KW_LOCATION locn= StringLiteral
			{
			KW_LOCATION200=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_partitionLocation3995);  
			stream_KW_LOCATION.add(KW_LOCATION200);

			locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_partitionLocation3999);  
			stream_StringLiteral.add(locn);

			// AST REWRITE
			// elements: locn
			// token labels: locn
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 683:38: -> ^( TOK_PARTITIONLOCATION $locn)
			{
				// Hive.g:683:41: ^( TOK_PARTITIONLOCATION $locn)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PARTITIONLOCATION, "TOK_PARTITIONLOCATION"), root_1);
				adaptor.addChild(root_1, stream_locn.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partitionLocation"


	public static class alterStatementSuffixDropPartitions_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixDropPartitions"
	// Hive.g:686:1: alterStatementSuffixDropPartitions : Identifier KW_DROP ( ifExists )? partitionSpec ( COMMA partitionSpec )* -> ^( TOK_ALTERTABLE_DROPPARTS Identifier ( partitionSpec )+ ( ifExists )? ) ;
	public final HiveParser.alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions() throws RecognitionException {
		HiveParser.alterStatementSuffixDropPartitions_return retval = new HiveParser.alterStatementSuffixDropPartitions_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier201=null;
		Token KW_DROP202=null;
		Token COMMA205=null;
		ParserRuleReturnScope ifExists203 =null;
		ParserRuleReturnScope partitionSpec204 =null;
		ParserRuleReturnScope partitionSpec206 =null;

		CommonTree Identifier201_tree=null;
		CommonTree KW_DROP202_tree=null;
		CommonTree COMMA205_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 msgs.push("drop partition statement"); 
		try {
			// Hive.g:689:5: ( Identifier KW_DROP ( ifExists )? partitionSpec ( COMMA partitionSpec )* -> ^( TOK_ALTERTABLE_DROPPARTS Identifier ( partitionSpec )+ ( ifExists )? ) )
			// Hive.g:689:7: Identifier KW_DROP ( ifExists )? partitionSpec ( COMMA partitionSpec )*
			{
			Identifier201=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixDropPartitions4035);  
			stream_Identifier.add(Identifier201);

			KW_DROP202=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions4037);  
			stream_KW_DROP.add(KW_DROP202);

			// Hive.g:689:26: ( ifExists )?
			int alt61=2;
			int LA61_0 = input.LA(1);
			if ( (LA61_0==KW_IF) ) {
				alt61=1;
			}
			switch (alt61) {
				case 1 :
					// Hive.g:689:26: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_alterStatementSuffixDropPartitions4039);
					ifExists203=ifExists();
					state._fsp--;

					stream_ifExists.add(ifExists203.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixDropPartitions4042);
			partitionSpec204=partitionSpec();
			state._fsp--;

			stream_partitionSpec.add(partitionSpec204.getTree());
			// Hive.g:689:50: ( COMMA partitionSpec )*
			loop62:
			while (true) {
				int alt62=2;
				int LA62_0 = input.LA(1);
				if ( (LA62_0==COMMA) ) {
					alt62=1;
				}

				switch (alt62) {
				case 1 :
					// Hive.g:689:51: COMMA partitionSpec
					{
					COMMA205=(Token)match(input,COMMA,FOLLOW_COMMA_in_alterStatementSuffixDropPartitions4045);  
					stream_COMMA.add(COMMA205);

					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixDropPartitions4047);
					partitionSpec206=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec206.getTree());
					}
					break;

				default :
					break loop62;
				}
			}

			// AST REWRITE
			// elements: ifExists, Identifier, partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 690:5: -> ^( TOK_ALTERTABLE_DROPPARTS Identifier ( partitionSpec )+ ( ifExists )? )
			{
				// Hive.g:690:8: ^( TOK_ALTERTABLE_DROPPARTS Identifier ( partitionSpec )+ ( ifExists )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_DROPPARTS, "TOK_ALTERTABLE_DROPPARTS"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				if ( !(stream_partitionSpec.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				// Hive.g:690:61: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixDropPartitions"


	public static class alterStatementSuffixProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixProperties"
	// Hive.g:693:1: alterStatementSuffixProperties : name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties ) ;
	public final HiveParser.alterStatementSuffixProperties_return alterStatementSuffixProperties() throws RecognitionException {
		HiveParser.alterStatementSuffixProperties_return retval = new HiveParser.alterStatementSuffixProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token name=null;
		Token KW_SET207=null;
		Token KW_TBLPROPERTIES208=null;
		ParserRuleReturnScope tableProperties209 =null;

		CommonTree name_tree=null;
		CommonTree KW_SET207_tree=null;
		CommonTree KW_TBLPROPERTIES208_tree=null;
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 msgs.push("alter properties statement"); 
		try {
			// Hive.g:696:5: (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties ) )
			// Hive.g:696:7: name= Identifier KW_SET KW_TBLPROPERTIES tableProperties
			{
			name=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixProperties4096);  
			stream_Identifier.add(name);

			KW_SET207=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixProperties4098);  
			stream_KW_SET.add(KW_SET207);

			KW_TBLPROPERTIES208=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties4100);  
			stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES208);

			pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties4102);
			tableProperties209=tableProperties();
			state._fsp--;

			stream_tableProperties.add(tableProperties209.getTree());
			// AST REWRITE
			// elements: name, tableProperties
			// token labels: name
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 697:5: -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties )
			{
				// Hive.g:697:8: ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_PROPERTIES, "TOK_ALTERTABLE_PROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_name.nextNode());
				adaptor.addChild(root_1, stream_tableProperties.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixProperties"


	public static class alterViewSuffixProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterViewSuffixProperties"
	// Hive.g:700:1: alterViewSuffixProperties : name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties ) ;
	public final HiveParser.alterViewSuffixProperties_return alterViewSuffixProperties() throws RecognitionException {
		HiveParser.alterViewSuffixProperties_return retval = new HiveParser.alterViewSuffixProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token name=null;
		Token KW_SET210=null;
		Token KW_TBLPROPERTIES211=null;
		ParserRuleReturnScope tableProperties212 =null;

		CommonTree name_tree=null;
		CommonTree KW_SET210_tree=null;
		CommonTree KW_TBLPROPERTIES211_tree=null;
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 msgs.push("alter view properties statement"); 
		try {
			// Hive.g:703:5: (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties ) )
			// Hive.g:703:7: name= Identifier KW_SET KW_TBLPROPERTIES tableProperties
			{
			name=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterViewSuffixProperties4146);  
			stream_Identifier.add(name);

			KW_SET210=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterViewSuffixProperties4148);  
			stream_KW_SET.add(KW_SET210);

			KW_TBLPROPERTIES211=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties4150);  
			stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES211);

			pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties4152);
			tableProperties212=tableProperties();
			state._fsp--;

			stream_tableProperties.add(tableProperties212.getTree());
			// AST REWRITE
			// elements: name, tableProperties
			// token labels: name
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 704:5: -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties )
			{
				// Hive.g:704:8: ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERVIEW_PROPERTIES, "TOK_ALTERVIEW_PROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_name.nextNode());
				adaptor.addChild(root_1, stream_tableProperties.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterViewSuffixProperties"


	public static class alterStatementSuffixSerdeProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixSerdeProperties"
	// Hive.g:707:1: alterStatementSuffixSerdeProperties : ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) );
	public final HiveParser.alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties() throws RecognitionException {
		HiveParser.alterStatementSuffixSerdeProperties_return retval = new HiveParser.alterStatementSuffixSerdeProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token serdeName=null;
		Token KW_SET213=null;
		Token KW_SERDE214=null;
		Token KW_WITH215=null;
		Token KW_SERDEPROPERTIES216=null;
		Token KW_SET218=null;
		Token KW_SERDEPROPERTIES219=null;
		ParserRuleReturnScope tableProperties217 =null;
		ParserRuleReturnScope tableProperties220 =null;

		CommonTree serdeName_tree=null;
		CommonTree KW_SET213_tree=null;
		CommonTree KW_SERDE214_tree=null;
		CommonTree KW_WITH215_tree=null;
		CommonTree KW_SERDEPROPERTIES216_tree=null;
		CommonTree KW_SET218_tree=null;
		CommonTree KW_SERDEPROPERTIES219_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 msgs.push("alter serdes statement"); 
		try {
			// Hive.g:710:5: ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) )
			int alt64=2;
			int LA64_0 = input.LA(1);
			if ( (LA64_0==KW_SET) ) {
				int LA64_1 = input.LA(2);
				if ( (LA64_1==KW_SERDE) ) {
					alt64=1;
				}
				else if ( (LA64_1==KW_SERDEPROPERTIES) ) {
					alt64=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 64, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 64, 0, input);
				throw nvae;
			}

			switch (alt64) {
				case 1 :
					// Hive.g:710:7: KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
					{
					KW_SET213=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4194);  
					stream_KW_SET.add(KW_SET213);

					KW_SERDE214=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties4196);  
					stream_KW_SERDE.add(KW_SERDE214);

					serdeName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties4200);  
					stream_StringLiteral.add(serdeName);

					// Hive.g:710:47: ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
					int alt63=2;
					int LA63_0 = input.LA(1);
					if ( (LA63_0==KW_WITH) ) {
						alt63=1;
					}
					switch (alt63) {
						case 1 :
							// Hive.g:710:48: KW_WITH KW_SERDEPROPERTIES tableProperties
							{
							KW_WITH215=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties4203);  
							stream_KW_WITH.add(KW_WITH215);

							KW_SERDEPROPERTIES216=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4205);  
							stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES216);

							pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4207);
							tableProperties217=tableProperties();
							state._fsp--;

							stream_tableProperties.add(tableProperties217.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: tableProperties, serdeName
					// token labels: serdeName
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_serdeName=new RewriteRuleTokenStream(adaptor,"token serdeName",serdeName);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 711:5: -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
					{
						// Hive.g:711:8: ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_SERIALIZER, "TOK_ALTERTABLE_SERIALIZER"), root_1);
						adaptor.addChild(root_1, stream_serdeName.nextNode());
						// Hive.g:711:47: ( tableProperties )?
						if ( stream_tableProperties.hasNext() ) {
							adaptor.addChild(root_1, stream_tableProperties.nextTree());
						}
						stream_tableProperties.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:712:7: KW_SET KW_SERDEPROPERTIES tableProperties
					{
					KW_SET218=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4233);  
					stream_KW_SET.add(KW_SET218);

					KW_SERDEPROPERTIES219=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4235);  
					stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES219);

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4237);
					tableProperties220=tableProperties();
					state._fsp--;

					stream_tableProperties.add(tableProperties220.getTree());
					// AST REWRITE
					// elements: tableProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 713:5: -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
					{
						// Hive.g:713:8: ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_SERDEPROPERTIES, "TOK_ALTERTABLE_SERDEPROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixSerdeProperties"


	public static class tablePartitionPrefix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tablePartitionPrefix"
	// Hive.g:716:1: tablePartitionPrefix : name= Identifier ( partitionSpec )? -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? ) ;
	public final HiveParser.tablePartitionPrefix_return tablePartitionPrefix() throws RecognitionException {
		HiveParser.tablePartitionPrefix_return retval = new HiveParser.tablePartitionPrefix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token name=null;
		ParserRuleReturnScope partitionSpec221 =null;

		CommonTree name_tree=null;
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		msgs.push("table partition prefix");
		try {
			// Hive.g:719:3: (name= Identifier ( partitionSpec )? -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? ) )
			// Hive.g:719:4: name= Identifier ( partitionSpec )?
			{
			name=(Token)match(input,Identifier,FOLLOW_Identifier_in_tablePartitionPrefix4275);  
			stream_Identifier.add(name);

			// Hive.g:719:20: ( partitionSpec )?
			int alt65=2;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==KW_PARTITION) ) {
				alt65=1;
			}
			switch (alt65) {
				case 1 :
					// Hive.g:719:20: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_tablePartitionPrefix4277);
					partitionSpec221=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec221.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: name, partitionSpec
			// token labels: name
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 720:3: -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? )
			{
				// Hive.g:720:5: ^( TOK_TABLE_PARTITION $name ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLE_PARTITION, "TOK_TABLE_PARTITION"), root_1);
				adaptor.addChild(root_1, stream_name.nextNode());
				// Hive.g:720:33: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePartitionPrefix"


	public static class alterTblPartitionStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterTblPartitionStatement"
	// Hive.g:723:1: alterTblPartitionStatement : tablePartitionPrefix alterTblPartitionStatementSuffix -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix ) ;
	public final HiveParser.alterTblPartitionStatement_return alterTblPartitionStatement() throws RecognitionException {
		HiveParser.alterTblPartitionStatement_return retval = new HiveParser.alterTblPartitionStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope tablePartitionPrefix222 =null;
		ParserRuleReturnScope alterTblPartitionStatementSuffix223 =null;

		RewriteRuleSubtreeStream stream_alterTblPartitionStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterTblPartitionStatementSuffix");
		RewriteRuleSubtreeStream stream_tablePartitionPrefix=new RewriteRuleSubtreeStream(adaptor,"rule tablePartitionPrefix");

		msgs.push("alter table partition statement");
		try {
			// Hive.g:726:3: ( tablePartitionPrefix alterTblPartitionStatementSuffix -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix ) )
			// Hive.g:726:6: tablePartitionPrefix alterTblPartitionStatementSuffix
			{
			pushFollow(FOLLOW_tablePartitionPrefix_in_alterTblPartitionStatement4315);
			tablePartitionPrefix222=tablePartitionPrefix();
			state._fsp--;

			stream_tablePartitionPrefix.add(tablePartitionPrefix222.getTree());
			pushFollow(FOLLOW_alterTblPartitionStatementSuffix_in_alterTblPartitionStatement4317);
			alterTblPartitionStatementSuffix223=alterTblPartitionStatementSuffix();
			state._fsp--;

			stream_alterTblPartitionStatementSuffix.add(alterTblPartitionStatementSuffix223.getTree());
			// AST REWRITE
			// elements: alterTblPartitionStatementSuffix, tablePartitionPrefix
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 727:3: -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix )
			{
				// Hive.g:727:6: ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_PARTITION, "TOK_ALTERTABLE_PARTITION"), root_1);
				adaptor.addChild(root_1, stream_tablePartitionPrefix.nextTree());
				adaptor.addChild(root_1, stream_alterTblPartitionStatementSuffix.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTblPartitionStatement"


	public static class alterTblPartitionStatementSuffix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterTblPartitionStatementSuffix"
	// Hive.g:730:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart );
	public final HiveParser.alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix() throws RecognitionException {
		HiveParser.alterTblPartitionStatementSuffix_return retval = new HiveParser.alterTblPartitionStatementSuffix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope alterStatementSuffixFileFormat224 =null;
		ParserRuleReturnScope alterStatementSuffixLocation225 =null;
		ParserRuleReturnScope alterStatementSuffixProtectMode226 =null;
		ParserRuleReturnScope alterStatementSuffixMergeFiles227 =null;
		ParserRuleReturnScope alterStatementSuffixSerdeProperties228 =null;
		ParserRuleReturnScope alterStatementSuffixRenamePart229 =null;


		msgs.push("alter table partition statement suffix");
		try {
			// Hive.g:733:3: ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart )
			int alt66=6;
			switch ( input.LA(1) ) {
			case KW_SET:
				{
				switch ( input.LA(2) ) {
				case KW_FILEFORMAT:
					{
					alt66=1;
					}
					break;
				case KW_LOCATION:
					{
					alt66=2;
					}
					break;
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
					{
					alt66=5;
					}
					break;
				default:
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 66, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case KW_DISABLE:
			case KW_ENABLE:
				{
				alt66=3;
				}
				break;
			case KW_CONCATENATE:
				{
				alt66=4;
				}
				break;
			case KW_RENAME:
				{
				alt66=6;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 66, 0, input);
				throw nvae;
			}
			switch (alt66) {
				case 1 :
					// Hive.g:733:5: alterStatementSuffixFileFormat
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix4352);
					alterStatementSuffixFileFormat224=alterStatementSuffixFileFormat();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixFileFormat224.getTree());

					}
					break;
				case 2 :
					// Hive.g:734:5: alterStatementSuffixLocation
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix4358);
					alterStatementSuffixLocation225=alterStatementSuffixLocation();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixLocation225.getTree());

					}
					break;
				case 3 :
					// Hive.g:735:5: alterStatementSuffixProtectMode
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixProtectMode_in_alterTblPartitionStatementSuffix4364);
					alterStatementSuffixProtectMode226=alterStatementSuffixProtectMode();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixProtectMode226.getTree());

					}
					break;
				case 4 :
					// Hive.g:736:5: alterStatementSuffixMergeFiles
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix4370);
					alterStatementSuffixMergeFiles227=alterStatementSuffixMergeFiles();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixMergeFiles227.getTree());

					}
					break;
				case 5 :
					// Hive.g:737:5: alterStatementSuffixSerdeProperties
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4376);
					alterStatementSuffixSerdeProperties228=alterStatementSuffixSerdeProperties();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixSerdeProperties228.getTree());

					}
					break;
				case 6 :
					// Hive.g:738:5: alterStatementSuffixRenamePart
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4382);
					alterStatementSuffixRenamePart229=alterStatementSuffixRenamePart();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixRenamePart229.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTblPartitionStatementSuffix"


	public static class alterStatementSuffixFileFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixFileFormat"
	// Hive.g:741:1: alterStatementSuffixFileFormat : KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) ;
	public final HiveParser.alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat() throws RecognitionException {
		HiveParser.alterStatementSuffixFileFormat_return retval = new HiveParser.alterStatementSuffixFileFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET230=null;
		Token KW_FILEFORMAT231=null;
		ParserRuleReturnScope fileFormat232 =null;

		CommonTree KW_SET230_tree=null;
		CommonTree KW_FILEFORMAT231_tree=null;
		RewriteRuleTokenStream stream_KW_FILEFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FILEFORMAT");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_fileFormat=new RewriteRuleSubtreeStream(adaptor,"rule fileFormat");

		msgs.push("alter fileformat statement"); 
		try {
			// Hive.g:744:2: ( KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) )
			// Hive.g:744:4: KW_SET KW_FILEFORMAT fileFormat
			{
			KW_SET230=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixFileFormat4404);  
			stream_KW_SET.add(KW_SET230);

			KW_FILEFORMAT231=(Token)match(input,KW_FILEFORMAT,FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat4406);  
			stream_KW_FILEFORMAT.add(KW_FILEFORMAT231);

			pushFollow(FOLLOW_fileFormat_in_alterStatementSuffixFileFormat4408);
			fileFormat232=fileFormat();
			state._fsp--;

			stream_fileFormat.add(fileFormat232.getTree());
			// AST REWRITE
			// elements: fileFormat
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 745:2: -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
			{
				// Hive.g:745:5: ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_FILEFORMAT, "TOK_ALTERTABLE_FILEFORMAT"), root_1);
				adaptor.addChild(root_1, stream_fileFormat.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixFileFormat"


	public static class alterStatementSuffixLocation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixLocation"
	// Hive.g:748:1: alterStatementSuffixLocation : KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) ;
	public final HiveParser.alterStatementSuffixLocation_return alterStatementSuffixLocation() throws RecognitionException {
		HiveParser.alterStatementSuffixLocation_return retval = new HiveParser.alterStatementSuffixLocation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token newLoc=null;
		Token KW_SET233=null;
		Token KW_LOCATION234=null;

		CommonTree newLoc_tree=null;
		CommonTree KW_SET233_tree=null;
		CommonTree KW_LOCATION234_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		msgs.push("alter location");
		try {
			// Hive.g:751:3: ( KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) )
			// Hive.g:751:5: KW_SET KW_LOCATION newLoc= StringLiteral
			{
			KW_SET233=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixLocation4439);  
			stream_KW_SET.add(KW_SET233);

			KW_LOCATION234=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation4441);  
			stream_KW_LOCATION.add(KW_LOCATION234);

			newLoc=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixLocation4445);  
			stream_StringLiteral.add(newLoc);

			// AST REWRITE
			// elements: newLoc
			// token labels: newLoc
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_newLoc=new RewriteRuleTokenStream(adaptor,"token newLoc",newLoc);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 752:3: -> ^( TOK_ALTERTABLE_LOCATION $newLoc)
			{
				// Hive.g:752:6: ^( TOK_ALTERTABLE_LOCATION $newLoc)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_LOCATION, "TOK_ALTERTABLE_LOCATION"), root_1);
				adaptor.addChild(root_1, stream_newLoc.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixLocation"


	public static class alterStatementSuffixProtectMode_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixProtectMode"
	// Hive.g:755:1: alterStatementSuffixProtectMode : alterProtectMode -> ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode ) ;
	public final HiveParser.alterStatementSuffixProtectMode_return alterStatementSuffixProtectMode() throws RecognitionException {
		HiveParser.alterStatementSuffixProtectMode_return retval = new HiveParser.alterStatementSuffixProtectMode_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope alterProtectMode235 =null;

		RewriteRuleSubtreeStream stream_alterProtectMode=new RewriteRuleSubtreeStream(adaptor,"rule alterProtectMode");

		 msgs.push("alter partition protect mode statement"); 
		try {
			// Hive.g:758:5: ( alterProtectMode -> ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode ) )
			// Hive.g:758:7: alterProtectMode
			{
			pushFollow(FOLLOW_alterProtectMode_in_alterStatementSuffixProtectMode4481);
			alterProtectMode235=alterProtectMode();
			state._fsp--;

			stream_alterProtectMode.add(alterProtectMode235.getTree());
			// AST REWRITE
			// elements: alterProtectMode
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 759:5: -> ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode )
			{
				// Hive.g:759:8: ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE, "TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE"), root_1);
				adaptor.addChild(root_1, stream_alterProtectMode.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixProtectMode"


	public static class alterStatementSuffixRenamePart_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixRenamePart"
	// Hive.g:762:1: alterStatementSuffixRenamePart : KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) ;
	public final HiveParser.alterStatementSuffixRenamePart_return alterStatementSuffixRenamePart() throws RecognitionException {
		HiveParser.alterStatementSuffixRenamePart_return retval = new HiveParser.alterStatementSuffixRenamePart_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RENAME236=null;
		Token KW_TO237=null;
		ParserRuleReturnScope partitionSpec238 =null;

		CommonTree KW_RENAME236_tree=null;
		CommonTree KW_TO237_tree=null;
		RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 msgs.push("alter table rename partition statement"); 
		try {
			// Hive.g:765:5: ( KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) )
			// Hive.g:765:7: KW_RENAME KW_TO partitionSpec
			{
			KW_RENAME236=(Token)match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart4520);  
			stream_KW_RENAME.add(KW_RENAME236);

			KW_TO237=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRenamePart4522);  
			stream_KW_TO.add(KW_TO237);

			pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart4524);
			partitionSpec238=partitionSpec();
			state._fsp--;

			stream_partitionSpec.add(partitionSpec238.getTree());
			// AST REWRITE
			// elements: partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 766:5: -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
			{
				// Hive.g:766:7: ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_RENAMEPART, "TOK_ALTERTABLE_RENAMEPART"), root_1);
				adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixRenamePart"


	public static class alterStatementSuffixMergeFiles_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixMergeFiles"
	// Hive.g:769:1: alterStatementSuffixMergeFiles : KW_CONCATENATE -> ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES ) ;
	public final HiveParser.alterStatementSuffixMergeFiles_return alterStatementSuffixMergeFiles() throws RecognitionException {
		HiveParser.alterStatementSuffixMergeFiles_return retval = new HiveParser.alterStatementSuffixMergeFiles_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CONCATENATE239=null;

		CommonTree KW_CONCATENATE239_tree=null;
		RewriteRuleTokenStream stream_KW_CONCATENATE=new RewriteRuleTokenStream(adaptor,"token KW_CONCATENATE");

		 msgs.push(""); 
		try {
			// Hive.g:772:5: ( KW_CONCATENATE -> ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES ) )
			// Hive.g:772:7: KW_CONCATENATE
			{
			KW_CONCATENATE239=(Token)match(input,KW_CONCATENATE,FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles4562);  
			stream_KW_CONCATENATE.add(KW_CONCATENATE239);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 773:5: -> ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES )
			{
				// Hive.g:773:8: ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_ALTERPARTS_MERGEFILES, "TOK_ALTERTABLE_ALTERPARTS_MERGEFILES"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixMergeFiles"


	public static class alterProtectMode_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterProtectMode"
	// Hive.g:776:1: alterProtectMode : ( KW_ENABLE alterProtectModeMode -> ^( TOK_ENABLE alterProtectModeMode ) | KW_DISABLE alterProtectModeMode -> ^( TOK_DISABLE alterProtectModeMode ) );
	public final HiveParser.alterProtectMode_return alterProtectMode() throws RecognitionException {
		HiveParser.alterProtectMode_return retval = new HiveParser.alterProtectMode_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ENABLE240=null;
		Token KW_DISABLE242=null;
		ParserRuleReturnScope alterProtectModeMode241 =null;
		ParserRuleReturnScope alterProtectModeMode243 =null;

		CommonTree KW_ENABLE240_tree=null;
		CommonTree KW_DISABLE242_tree=null;
		RewriteRuleTokenStream stream_KW_DISABLE=new RewriteRuleTokenStream(adaptor,"token KW_DISABLE");
		RewriteRuleTokenStream stream_KW_ENABLE=new RewriteRuleTokenStream(adaptor,"token KW_ENABLE");
		RewriteRuleSubtreeStream stream_alterProtectModeMode=new RewriteRuleSubtreeStream(adaptor,"rule alterProtectModeMode");

		 msgs.push("protect mode specification enable"); 
		try {
			// Hive.g:779:5: ( KW_ENABLE alterProtectModeMode -> ^( TOK_ENABLE alterProtectModeMode ) | KW_DISABLE alterProtectModeMode -> ^( TOK_DISABLE alterProtectModeMode ) )
			int alt67=2;
			int LA67_0 = input.LA(1);
			if ( (LA67_0==KW_ENABLE) ) {
				alt67=1;
			}
			else if ( (LA67_0==KW_DISABLE) ) {
				alt67=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 67, 0, input);
				throw nvae;
			}

			switch (alt67) {
				case 1 :
					// Hive.g:779:7: KW_ENABLE alterProtectModeMode
					{
					KW_ENABLE240=(Token)match(input,KW_ENABLE,FOLLOW_KW_ENABLE_in_alterProtectMode4599);  
					stream_KW_ENABLE.add(KW_ENABLE240);

					pushFollow(FOLLOW_alterProtectModeMode_in_alterProtectMode4601);
					alterProtectModeMode241=alterProtectModeMode();
					state._fsp--;

					stream_alterProtectModeMode.add(alterProtectModeMode241.getTree());
					// AST REWRITE
					// elements: alterProtectModeMode
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 779:39: -> ^( TOK_ENABLE alterProtectModeMode )
					{
						// Hive.g:779:42: ^( TOK_ENABLE alterProtectModeMode )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ENABLE, "TOK_ENABLE"), root_1);
						adaptor.addChild(root_1, stream_alterProtectModeMode.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:780:7: KW_DISABLE alterProtectModeMode
					{
					KW_DISABLE242=(Token)match(input,KW_DISABLE,FOLLOW_KW_DISABLE_in_alterProtectMode4618);  
					stream_KW_DISABLE.add(KW_DISABLE242);

					pushFollow(FOLLOW_alterProtectModeMode_in_alterProtectMode4620);
					alterProtectModeMode243=alterProtectModeMode();
					state._fsp--;

					stream_alterProtectModeMode.add(alterProtectModeMode243.getTree());
					// AST REWRITE
					// elements: alterProtectModeMode
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 780:40: -> ^( TOK_DISABLE alterProtectModeMode )
					{
						// Hive.g:780:43: ^( TOK_DISABLE alterProtectModeMode )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DISABLE, "TOK_DISABLE"), root_1);
						adaptor.addChild(root_1, stream_alterProtectModeMode.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterProtectMode"


	public static class alterProtectModeMode_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterProtectModeMode"
	// Hive.g:783:1: alterProtectModeMode : ( KW_OFFLINE -> ^( TOK_OFFLINE ) | KW_NO_DROP ( KW_CASCADE )? -> ^( TOK_NO_DROP ( KW_CASCADE )? ) | KW_READONLY -> ^( TOK_READONLY ) );
	public final HiveParser.alterProtectModeMode_return alterProtectModeMode() throws RecognitionException {
		HiveParser.alterProtectModeMode_return retval = new HiveParser.alterProtectModeMode_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_OFFLINE244=null;
		Token KW_NO_DROP245=null;
		Token KW_CASCADE246=null;
		Token KW_READONLY247=null;

		CommonTree KW_OFFLINE244_tree=null;
		CommonTree KW_NO_DROP245_tree=null;
		CommonTree KW_CASCADE246_tree=null;
		CommonTree KW_READONLY247_tree=null;
		RewriteRuleTokenStream stream_KW_READONLY=new RewriteRuleTokenStream(adaptor,"token KW_READONLY");
		RewriteRuleTokenStream stream_KW_NO_DROP=new RewriteRuleTokenStream(adaptor,"token KW_NO_DROP");
		RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
		RewriteRuleTokenStream stream_KW_OFFLINE=new RewriteRuleTokenStream(adaptor,"token KW_OFFLINE");

		 msgs.push("protect mode specification enable"); 
		try {
			// Hive.g:786:5: ( KW_OFFLINE -> ^( TOK_OFFLINE ) | KW_NO_DROP ( KW_CASCADE )? -> ^( TOK_NO_DROP ( KW_CASCADE )? ) | KW_READONLY -> ^( TOK_READONLY ) )
			int alt69=3;
			switch ( input.LA(1) ) {
			case KW_OFFLINE:
				{
				alt69=1;
				}
				break;
			case KW_NO_DROP:
				{
				alt69=2;
				}
				break;
			case KW_READONLY:
				{
				alt69=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 69, 0, input);
				throw nvae;
			}
			switch (alt69) {
				case 1 :
					// Hive.g:786:7: KW_OFFLINE
					{
					KW_OFFLINE244=(Token)match(input,KW_OFFLINE,FOLLOW_KW_OFFLINE_in_alterProtectModeMode4656);  
					stream_KW_OFFLINE.add(KW_OFFLINE244);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 786:19: -> ^( TOK_OFFLINE )
					{
						// Hive.g:786:22: ^( TOK_OFFLINE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_OFFLINE, "TOK_OFFLINE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:787:7: KW_NO_DROP ( KW_CASCADE )?
					{
					KW_NO_DROP245=(Token)match(input,KW_NO_DROP,FOLLOW_KW_NO_DROP_in_alterProtectModeMode4671);  
					stream_KW_NO_DROP.add(KW_NO_DROP245);

					// Hive.g:787:18: ( KW_CASCADE )?
					int alt68=2;
					int LA68_0 = input.LA(1);
					if ( (LA68_0==KW_CASCADE) ) {
						alt68=1;
					}
					switch (alt68) {
						case 1 :
							// Hive.g:787:18: KW_CASCADE
							{
							KW_CASCADE246=(Token)match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_alterProtectModeMode4673);  
							stream_KW_CASCADE.add(KW_CASCADE246);

							}
							break;

					}

					// AST REWRITE
					// elements: KW_CASCADE
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 787:30: -> ^( TOK_NO_DROP ( KW_CASCADE )? )
					{
						// Hive.g:787:33: ^( TOK_NO_DROP ( KW_CASCADE )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_NO_DROP, "TOK_NO_DROP"), root_1);
						// Hive.g:787:47: ( KW_CASCADE )?
						if ( stream_KW_CASCADE.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_CASCADE.nextNode());
						}
						stream_KW_CASCADE.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// Hive.g:788:7: KW_READONLY
					{
					KW_READONLY247=(Token)match(input,KW_READONLY,FOLLOW_KW_READONLY_in_alterProtectModeMode4691);  
					stream_KW_READONLY.add(KW_READONLY247);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 788:20: -> ^( TOK_READONLY )
					{
						// Hive.g:788:23: ^( TOK_READONLY )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_READONLY, "TOK_READONLY"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterProtectModeMode"


	public static class alterStatementSuffixClusterbySortby_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixClusterbySortby"
	// Hive.g:792:1: alterStatementSuffixClusterbySortby : (name= Identifier tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets ) |name= Identifier KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name) );
	public final HiveParser.alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby() throws RecognitionException {
		HiveParser.alterStatementSuffixClusterbySortby_return retval = new HiveParser.alterStatementSuffixClusterbySortby_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token name=null;
		Token KW_NOT249=null;
		Token KW_CLUSTERED250=null;
		ParserRuleReturnScope tableBuckets248 =null;

		CommonTree name_tree=null;
		CommonTree KW_NOT249_tree=null;
		CommonTree KW_CLUSTERED250_tree=null;
		RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");

		msgs.push("alter cluster by sort by statement");
		try {
			// Hive.g:795:2: (name= Identifier tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets ) |name= Identifier KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name) )
			int alt70=2;
			int LA70_0 = input.LA(1);
			if ( (LA70_0==Identifier) ) {
				int LA70_1 = input.LA(2);
				if ( (LA70_1==KW_NOT) ) {
					alt70=2;
				}
				else if ( (LA70_1==KW_CLUSTERED) ) {
					alt70=1;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 70, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 70, 0, input);
				throw nvae;
			}

			switch (alt70) {
				case 1 :
					// Hive.g:795:3: name= Identifier tableBuckets
					{
					name=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby4723);  
					stream_Identifier.add(name);

					pushFollow(FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby4725);
					tableBuckets248=tableBuckets();
					state._fsp--;

					stream_tableBuckets.add(tableBuckets248.getTree());
					// AST REWRITE
					// elements: tableBuckets, name
					// token labels: name
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 796:2: -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets )
					{
						// Hive.g:796:4: ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);
						adaptor.addChild(root_1, stream_name.nextNode());
						adaptor.addChild(root_1, stream_tableBuckets.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:798:2: name= Identifier KW_NOT KW_CLUSTERED
					{
					name=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby4744);  
					stream_Identifier.add(name);

					KW_NOT249=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby4746);  
					stream_KW_NOT.add(KW_NOT249);

					KW_CLUSTERED250=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby4748);  
					stream_KW_CLUSTERED.add(KW_CLUSTERED250);

					// AST REWRITE
					// elements: name
					// token labels: name
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 799:2: -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name)
					{
						// Hive.g:799:4: ^( TOK_ALTERTABLE_CLUSTER_SORT $name)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);
						adaptor.addChild(root_1, stream_name.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixClusterbySortby"


	public static class fileFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fileFormat"
	// Hive.g:802:1: fileFormat : ( KW_SEQUENCEFILE -> ^( TOK_TBLSEQUENCEFILE ) | KW_TEXTFILE -> ^( TOK_TBLTEXTFILE ) | KW_RCFILE -> ^( TOK_TBLRCFILE ) | KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) |genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
	public final HiveParser.fileFormat_return fileFormat() throws RecognitionException {
		HiveParser.fileFormat_return retval = new HiveParser.fileFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token inFmt=null;
		Token outFmt=null;
		Token inDriver=null;
		Token outDriver=null;
		Token genericSpec=null;
		Token KW_SEQUENCEFILE251=null;
		Token KW_TEXTFILE252=null;
		Token KW_RCFILE253=null;
		Token KW_INPUTFORMAT254=null;
		Token KW_OUTPUTFORMAT255=null;
		Token KW_INPUTDRIVER256=null;
		Token KW_OUTPUTDRIVER257=null;

		CommonTree inFmt_tree=null;
		CommonTree outFmt_tree=null;
		CommonTree inDriver_tree=null;
		CommonTree outDriver_tree=null;
		CommonTree genericSpec_tree=null;
		CommonTree KW_SEQUENCEFILE251_tree=null;
		CommonTree KW_TEXTFILE252_tree=null;
		CommonTree KW_RCFILE253_tree=null;
		CommonTree KW_INPUTFORMAT254_tree=null;
		CommonTree KW_OUTPUTFORMAT255_tree=null;
		CommonTree KW_INPUTDRIVER256_tree=null;
		CommonTree KW_OUTPUTDRIVER257_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
		RewriteRuleTokenStream stream_KW_RCFILE=new RewriteRuleTokenStream(adaptor,"token KW_RCFILE");
		RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
		RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
		RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
		RewriteRuleTokenStream stream_KW_SEQUENCEFILE=new RewriteRuleTokenStream(adaptor,"token KW_SEQUENCEFILE");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_TEXTFILE=new RewriteRuleTokenStream(adaptor,"token KW_TEXTFILE");

		 msgs.push("file format specification"); 
		try {
			// Hive.g:805:5: ( KW_SEQUENCEFILE -> ^( TOK_TBLSEQUENCEFILE ) | KW_TEXTFILE -> ^( TOK_TBLTEXTFILE ) | KW_RCFILE -> ^( TOK_TBLRCFILE ) | KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) |genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
			int alt72=5;
			switch ( input.LA(1) ) {
			case KW_SEQUENCEFILE:
				{
				alt72=1;
				}
				break;
			case KW_TEXTFILE:
				{
				alt72=2;
				}
				break;
			case KW_RCFILE:
				{
				alt72=3;
				}
				break;
			case KW_INPUTFORMAT:
				{
				alt72=4;
				}
				break;
			case Identifier:
				{
				alt72=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 72, 0, input);
				throw nvae;
			}
			switch (alt72) {
				case 1 :
					// Hive.g:805:7: KW_SEQUENCEFILE
					{
					KW_SEQUENCEFILE251=(Token)match(input,KW_SEQUENCEFILE,FOLLOW_KW_SEQUENCEFILE_in_fileFormat4781);  
					stream_KW_SEQUENCEFILE.add(KW_SEQUENCEFILE251);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 805:24: -> ^( TOK_TBLSEQUENCEFILE )
					{
						// Hive.g:805:27: ^( TOK_TBLSEQUENCEFILE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TBLSEQUENCEFILE, "TOK_TBLSEQUENCEFILE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:806:7: KW_TEXTFILE
					{
					KW_TEXTFILE252=(Token)match(input,KW_TEXTFILE,FOLLOW_KW_TEXTFILE_in_fileFormat4796);  
					stream_KW_TEXTFILE.add(KW_TEXTFILE252);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 806:20: -> ^( TOK_TBLTEXTFILE )
					{
						// Hive.g:806:23: ^( TOK_TBLTEXTFILE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TBLTEXTFILE, "TOK_TBLTEXTFILE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// Hive.g:807:7: KW_RCFILE
					{
					KW_RCFILE253=(Token)match(input,KW_RCFILE,FOLLOW_KW_RCFILE_in_fileFormat4811);  
					stream_KW_RCFILE.add(KW_RCFILE253);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 807:18: -> ^( TOK_TBLRCFILE )
					{
						// Hive.g:807:21: ^( TOK_TBLRCFILE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TBLRCFILE, "TOK_TBLRCFILE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 4 :
					// Hive.g:808:7: KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					{
					KW_INPUTFORMAT254=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_fileFormat4826);  
					stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT254);

					inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat4830);  
					stream_StringLiteral.add(inFmt);

					KW_OUTPUTFORMAT255=(Token)match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_fileFormat4832);  
					stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT255);

					outFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat4836);  
					stream_StringLiteral.add(outFmt);

					// Hive.g:808:79: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					int alt71=2;
					int LA71_0 = input.LA(1);
					if ( (LA71_0==KW_INPUTDRIVER) ) {
						alt71=1;
					}
					switch (alt71) {
						case 1 :
							// Hive.g:808:80: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
							{
							KW_INPUTDRIVER256=(Token)match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_fileFormat4839);  
							stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER256);

							inDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat4843);  
							stream_StringLiteral.add(inDriver);

							KW_OUTPUTDRIVER257=(Token)match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_fileFormat4845);  
							stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER257);

							outDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat4849);  
							stream_StringLiteral.add(outDriver);

							}
							break;

					}

					// AST REWRITE
					// elements: outDriver, inFmt, inDriver, outFmt
					// token labels: outDriver, outFmt, inDriver, inFmt
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
					RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
					RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
					RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 809:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
					{
						// Hive.g:809:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);
						adaptor.addChild(root_1, stream_inFmt.nextNode());
						adaptor.addChild(root_1, stream_outFmt.nextNode());
						// Hive.g:809:48: ( $inDriver)?
						if ( stream_inDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_inDriver.nextNode());
						}
						stream_inDriver.reset();

						// Hive.g:809:59: ( $outDriver)?
						if ( stream_outDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_outDriver.nextNode());
						}
						stream_outDriver.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 5 :
					// Hive.g:810:7: genericSpec= Identifier
					{
					genericSpec=(Token)match(input,Identifier,FOLLOW_Identifier_in_fileFormat4887);  
					stream_Identifier.add(genericSpec);

					// AST REWRITE
					// elements: genericSpec
					// token labels: genericSpec
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_genericSpec=new RewriteRuleTokenStream(adaptor,"token genericSpec",genericSpec);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 810:30: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
					{
						// Hive.g:810:33: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC"), root_1);
						adaptor.addChild(root_1, stream_genericSpec.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fileFormat"


	public static class tabTypeExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tabTypeExpr"
	// Hive.g:813:1: tabTypeExpr : Identifier ( DOT ^ ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* ;
	public final HiveParser.tabTypeExpr_return tabTypeExpr() throws RecognitionException {
		HiveParser.tabTypeExpr_return retval = new HiveParser.tabTypeExpr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier258=null;
		Token DOT259=null;
		Token set260=null;

		CommonTree Identifier258_tree=null;
		CommonTree DOT259_tree=null;
		CommonTree set260_tree=null;

		 msgs.push("specifying table types"); 
		try {
			// Hive.g:817:4: ( Identifier ( DOT ^ ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* )
			// Hive.g:817:6: Identifier ( DOT ^ ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )*
			{
			root_0 = (CommonTree)adaptor.nil();


			Identifier258=(Token)match(input,Identifier,FOLLOW_Identifier_in_tabTypeExpr4923); 
			Identifier258_tree = (CommonTree)adaptor.create(Identifier258);
			adaptor.addChild(root_0, Identifier258_tree);

			// Hive.g:817:17: ( DOT ^ ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )*
			loop73:
			while (true) {
				int alt73=2;
				int LA73_0 = input.LA(1);
				if ( (LA73_0==DOT) ) {
					alt73=1;
				}

				switch (alt73) {
				case 1 :
					// Hive.g:817:18: DOT ^ ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE )
					{
					DOT259=(Token)match(input,DOT,FOLLOW_DOT_in_tabTypeExpr4926); 
					DOT259_tree = (CommonTree)adaptor.create(DOT259);
					root_0 = (CommonTree)adaptor.becomeRoot(DOT259_tree, root_0);

					set260=input.LT(1);
					if ( input.LA(1)==Identifier||input.LA(1)==KW_ELEM_TYPE||input.LA(1)==KW_KEY_TYPE||input.LA(1)==KW_VALUE_TYPE ) {
						input.consume();
						adaptor.addChild(root_0, (CommonTree)adaptor.create(set260));
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

				default :
					break loop73;
				}
			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tabTypeExpr"


	public static class partTypeExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "partTypeExpr"
	// Hive.g:820:1: partTypeExpr : tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) ;
	public final HiveParser.partTypeExpr_return partTypeExpr() throws RecognitionException {
		HiveParser.partTypeExpr_return retval = new HiveParser.partTypeExpr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope tabTypeExpr261 =null;
		ParserRuleReturnScope partitionSpec262 =null;

		RewriteRuleSubtreeStream stream_tabTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule tabTypeExpr");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 msgs.push("specifying table partitions"); 
		try {
			// Hive.g:823:5: ( tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) )
			// Hive.g:823:8: tabTypeExpr ( partitionSpec )?
			{
			pushFollow(FOLLOW_tabTypeExpr_in_partTypeExpr4972);
			tabTypeExpr261=tabTypeExpr();
			state._fsp--;

			stream_tabTypeExpr.add(tabTypeExpr261.getTree());
			// Hive.g:823:20: ( partitionSpec )?
			int alt74=2;
			int LA74_0 = input.LA(1);
			if ( (LA74_0==KW_PARTITION) ) {
				alt74=1;
			}
			switch (alt74) {
				case 1 :
					// Hive.g:823:20: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_partTypeExpr4974);
					partitionSpec262=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec262.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: partitionSpec, tabTypeExpr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 823:35: -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
			{
				// Hive.g:823:38: ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABTYPE, "TOK_TABTYPE"), root_1);
				adaptor.addChild(root_1, stream_tabTypeExpr.nextTree());
				// Hive.g:823:64: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partTypeExpr"


	public static class descStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "descStatement"
	// Hive.g:826:1: descStatement : ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED )? (parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) );
	public final HiveParser.descStatement_return descStatement() throws RecognitionException {
		HiveParser.descStatement_return retval = new HiveParser.descStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token descOptions=null;
		Token dbName=null;
		Token KW_DESCRIBE263=null;
		Token KW_DESC264=null;
		Token KW_DESCRIBE265=null;
		Token KW_DESC266=null;
		Token KW_FUNCTION267=null;
		Token KW_EXTENDED268=null;
		Token KW_DESCRIBE269=null;
		Token KW_DESC270=null;
		Token KW_DATABASE271=null;
		Token KW_EXTENDED272=null;
		ParserRuleReturnScope parttype =null;
		ParserRuleReturnScope name =null;

		CommonTree descOptions_tree=null;
		CommonTree dbName_tree=null;
		CommonTree KW_DESCRIBE263_tree=null;
		CommonTree KW_DESC264_tree=null;
		CommonTree KW_DESCRIBE265_tree=null;
		CommonTree KW_DESC266_tree=null;
		CommonTree KW_FUNCTION267_tree=null;
		CommonTree KW_EXTENDED268_tree=null;
		CommonTree KW_DESCRIBE269_tree=null;
		CommonTree KW_DESC270_tree=null;
		CommonTree KW_DATABASE271_tree=null;
		CommonTree KW_EXTENDED272_tree=null;
		RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
		RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token KW_DESCRIBE");
		RewriteRuleSubtreeStream stream_descFuncNames=new RewriteRuleSubtreeStream(adaptor,"rule descFuncNames");
		RewriteRuleSubtreeStream stream_partTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule partTypeExpr");

		 msgs.push("describe statement"); 
		try {
			// Hive.g:829:5: ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED )? (parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) )
			int alt81=3;
			int LA81_0 = input.LA(1);
			if ( (LA81_0==KW_DESCRIBE) ) {
				switch ( input.LA(2) ) {
				case Identifier:
				case KW_EXTENDED:
				case KW_FORMATTED:
					{
					alt81=1;
					}
					break;
				case KW_FUNCTION:
					{
					alt81=2;
					}
					break;
				case KW_DATABASE:
					{
					alt81=3;
					}
					break;
				default:
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 81, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}
			else if ( (LA81_0==KW_DESC) ) {
				switch ( input.LA(2) ) {
				case Identifier:
				case KW_EXTENDED:
				case KW_FORMATTED:
					{
					alt81=1;
					}
					break;
				case KW_FUNCTION:
					{
					alt81=2;
					}
					break;
				case KW_DATABASE:
					{
					alt81=3;
					}
					break;
				default:
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 81, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 81, 0, input);
				throw nvae;
			}

			switch (alt81) {
				case 1 :
					// Hive.g:829:7: ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED )? (parttype= partTypeExpr )
					{
					// Hive.g:829:7: ( KW_DESCRIBE | KW_DESC )
					int alt75=2;
					int LA75_0 = input.LA(1);
					if ( (LA75_0==KW_DESCRIBE) ) {
						alt75=1;
					}
					else if ( (LA75_0==KW_DESC) ) {
						alt75=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 75, 0, input);
						throw nvae;
					}

					switch (alt75) {
						case 1 :
							// Hive.g:829:8: KW_DESCRIBE
							{
							KW_DESCRIBE263=(Token)match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement5014);  
							stream_KW_DESCRIBE.add(KW_DESCRIBE263);

							}
							break;
						case 2 :
							// Hive.g:829:20: KW_DESC
							{
							KW_DESC264=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement5016);  
							stream_KW_DESC.add(KW_DESC264);

							}
							break;

					}

					// Hive.g:829:29: (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED )?
					int alt76=3;
					int LA76_0 = input.LA(1);
					if ( (LA76_0==KW_FORMATTED) ) {
						alt76=1;
					}
					else if ( (LA76_0==KW_EXTENDED) ) {
						alt76=2;
					}
					switch (alt76) {
						case 1 :
							// Hive.g:829:30: descOptions= KW_FORMATTED
							{
							descOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_descStatement5022);  
							stream_KW_FORMATTED.add(descOptions);

							}
							break;
						case 2 :
							// Hive.g:829:55: descOptions= KW_EXTENDED
							{
							descOptions=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement5026);  
							stream_KW_EXTENDED.add(descOptions);

							}
							break;

					}

					// Hive.g:829:81: (parttype= partTypeExpr )
					// Hive.g:829:82: parttype= partTypeExpr
					{
					pushFollow(FOLLOW_partTypeExpr_in_descStatement5033);
					parttype=partTypeExpr();
					state._fsp--;

					stream_partTypeExpr.add(parttype.getTree());
					}

					// AST REWRITE
					// elements: descOptions, parttype
					// token labels: descOptions
					// rule labels: retval, parttype
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_descOptions=new RewriteRuleTokenStream(adaptor,"token descOptions",descOptions);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 829:105: -> ^( TOK_DESCTABLE $parttype ( $descOptions)? )
					{
						// Hive.g:829:108: ^( TOK_DESCTABLE $parttype ( $descOptions)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE"), root_1);
						adaptor.addChild(root_1, stream_parttype.nextTree());
						// Hive.g:829:135: ( $descOptions)?
						if ( stream_descOptions.hasNext() ) {
							adaptor.addChild(root_1, stream_descOptions.nextNode());
						}
						stream_descOptions.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:830:7: ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames )
					{
					// Hive.g:830:7: ( KW_DESCRIBE | KW_DESC )
					int alt77=2;
					int LA77_0 = input.LA(1);
					if ( (LA77_0==KW_DESCRIBE) ) {
						alt77=1;
					}
					else if ( (LA77_0==KW_DESC) ) {
						alt77=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 77, 0, input);
						throw nvae;
					}

					switch (alt77) {
						case 1 :
							// Hive.g:830:8: KW_DESCRIBE
							{
							KW_DESCRIBE265=(Token)match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement5056);  
							stream_KW_DESCRIBE.add(KW_DESCRIBE265);

							}
							break;
						case 2 :
							// Hive.g:830:20: KW_DESC
							{
							KW_DESC266=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement5058);  
							stream_KW_DESC.add(KW_DESC266);

							}
							break;

					}

					KW_FUNCTION267=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_descStatement5061);  
					stream_KW_FUNCTION.add(KW_FUNCTION267);

					// Hive.g:830:41: ( KW_EXTENDED )?
					int alt78=2;
					int LA78_0 = input.LA(1);
					if ( (LA78_0==KW_EXTENDED) ) {
						alt78=1;
					}
					switch (alt78) {
						case 1 :
							// Hive.g:830:41: KW_EXTENDED
							{
							KW_EXTENDED268=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement5063);  
							stream_KW_EXTENDED.add(KW_EXTENDED268);

							}
							break;

					}

					// Hive.g:830:54: (name= descFuncNames )
					// Hive.g:830:55: name= descFuncNames
					{
					pushFollow(FOLLOW_descFuncNames_in_descStatement5069);
					name=descFuncNames();
					state._fsp--;

					stream_descFuncNames.add(name.getTree());
					}

					// AST REWRITE
					// elements: KW_EXTENDED, name
					// token labels: 
					// rule labels: retval, name
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 830:75: -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
					{
						// Hive.g:830:78: ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESCFUNCTION, "TOK_DESCFUNCTION"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						// Hive.g:830:103: ( KW_EXTENDED )?
						if ( stream_KW_EXTENDED.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_EXTENDED.nextNode());
						}
						stream_KW_EXTENDED.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// Hive.g:831:7: ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier )
					{
					// Hive.g:831:7: ( KW_DESCRIBE | KW_DESC )
					int alt79=2;
					int LA79_0 = input.LA(1);
					if ( (LA79_0==KW_DESCRIBE) ) {
						alt79=1;
					}
					else if ( (LA79_0==KW_DESC) ) {
						alt79=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 79, 0, input);
						throw nvae;
					}

					switch (alt79) {
						case 1 :
							// Hive.g:831:8: KW_DESCRIBE
							{
							KW_DESCRIBE269=(Token)match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement5091);  
							stream_KW_DESCRIBE.add(KW_DESCRIBE269);

							}
							break;
						case 2 :
							// Hive.g:831:20: KW_DESC
							{
							KW_DESC270=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement5093);  
							stream_KW_DESC.add(KW_DESC270);

							}
							break;

					}

					KW_DATABASE271=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_descStatement5096);  
					stream_KW_DATABASE.add(KW_DATABASE271);

					// Hive.g:831:41: ( KW_EXTENDED )?
					int alt80=2;
					int LA80_0 = input.LA(1);
					if ( (LA80_0==KW_EXTENDED) ) {
						alt80=1;
					}
					switch (alt80) {
						case 1 :
							// Hive.g:831:41: KW_EXTENDED
							{
							KW_EXTENDED272=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement5098);  
							stream_KW_EXTENDED.add(KW_EXTENDED272);

							}
							break;

					}

					// Hive.g:831:54: (dbName= Identifier )
					// Hive.g:831:55: dbName= Identifier
					{
					dbName=(Token)match(input,Identifier,FOLLOW_Identifier_in_descStatement5104);  
					stream_Identifier.add(dbName);

					}

					// AST REWRITE
					// elements: dbName, KW_EXTENDED
					// token labels: dbName
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 831:74: -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
					{
						// Hive.g:831:77: ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESCDATABASE, "TOK_DESCDATABASE"), root_1);
						adaptor.addChild(root_1, stream_dbName.nextNode());
						// Hive.g:831:104: ( KW_EXTENDED )?
						if ( stream_KW_EXTENDED.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_EXTENDED.nextNode());
						}
						stream_KW_EXTENDED.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "descStatement"


	public static class analyzeStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "analyzeStatement"
	// Hive.g:834:1: analyzeStatement : KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS -> ^( TOK_ANALYZE $parttype) ;
	public final HiveParser.analyzeStatement_return analyzeStatement() throws RecognitionException {
		HiveParser.analyzeStatement_return retval = new HiveParser.analyzeStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ANALYZE273=null;
		Token KW_TABLE274=null;
		Token KW_COMPUTE275=null;
		Token KW_STATISTICS276=null;
		ParserRuleReturnScope parttype =null;

		CommonTree KW_ANALYZE273_tree=null;
		CommonTree KW_TABLE274_tree=null;
		CommonTree KW_COMPUTE275_tree=null;
		CommonTree KW_STATISTICS276_tree=null;
		RewriteRuleTokenStream stream_KW_ANALYZE=new RewriteRuleTokenStream(adaptor,"token KW_ANALYZE");
		RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_COMPUTE=new RewriteRuleTokenStream(adaptor,"token KW_COMPUTE");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");

		 msgs.push("analyze statement"); 
		try {
			// Hive.g:837:5: ( KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS -> ^( TOK_ANALYZE $parttype) )
			// Hive.g:837:7: KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS
			{
			KW_ANALYZE273=(Token)match(input,KW_ANALYZE,FOLLOW_KW_ANALYZE_in_analyzeStatement5144);  
			stream_KW_ANALYZE.add(KW_ANALYZE273);

			KW_TABLE274=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_analyzeStatement5146);  
			stream_KW_TABLE.add(KW_TABLE274);

			// Hive.g:837:27: (parttype= tableOrPartition )
			// Hive.g:837:28: parttype= tableOrPartition
			{
			pushFollow(FOLLOW_tableOrPartition_in_analyzeStatement5151);
			parttype=tableOrPartition();
			state._fsp--;

			stream_tableOrPartition.add(parttype.getTree());
			}

			KW_COMPUTE275=(Token)match(input,KW_COMPUTE,FOLLOW_KW_COMPUTE_in_analyzeStatement5154);  
			stream_KW_COMPUTE.add(KW_COMPUTE275);

			KW_STATISTICS276=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_analyzeStatement5156);  
			stream_KW_STATISTICS.add(KW_STATISTICS276);

			// AST REWRITE
			// elements: parttype
			// token labels: 
			// rule labels: retval, parttype
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 837:80: -> ^( TOK_ANALYZE $parttype)
			{
				// Hive.g:837:83: ^( TOK_ANALYZE $parttype)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ANALYZE, "TOK_ANALYZE"), root_1);
				adaptor.addChild(root_1, stream_parttype.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "analyzeStatement"


	public static class showStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showStatement"
	// Hive.g:840:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) );
	public final HiveParser.showStatement_return showStatement() throws RecognitionException {
		HiveParser.showStatement_return retval = new HiveParser.showStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token db_name=null;
		Token isExtended=null;
		Token showOptions=null;
		Token KW_SHOW277=null;
		Token KW_DATABASES278=null;
		Token KW_SCHEMAS279=null;
		Token KW_LIKE280=null;
		Token KW_SHOW282=null;
		Token KW_TABLES283=null;
		Token KW_FROM284=null;
		Token KW_IN285=null;
		Token KW_LIKE286=null;
		Token KW_SHOW289=null;
		Token KW_FUNCTIONS290=null;
		Token KW_SHOW292=null;
		Token KW_PARTITIONS293=null;
		Token Identifier294=null;
		Token KW_SHOW296=null;
		Token KW_TABLE297=null;
		Token KW_EXTENDED298=null;
		Token KW_FROM299=null;
		Token KW_IN300=null;
		Token KW_LIKE301=null;
		Token KW_SHOW304=null;
		Token KW_LOCKS305=null;
		Token KW_SHOW306=null;
		Token KW_INDEX307=null;
		Token KW_INDEXES308=null;
		Token KW_ON309=null;
		Token KW_FROM311=null;
		Token KW_IN312=null;
		ParserRuleReturnScope parttype =null;
		ParserRuleReturnScope showStmtIdentifier281 =null;
		ParserRuleReturnScope showStmtIdentifier287 =null;
		ParserRuleReturnScope showStmtIdentifier288 =null;
		ParserRuleReturnScope showStmtIdentifier291 =null;
		ParserRuleReturnScope partitionSpec295 =null;
		ParserRuleReturnScope showStmtIdentifier302 =null;
		ParserRuleReturnScope partitionSpec303 =null;
		ParserRuleReturnScope showStmtIdentifier310 =null;

		CommonTree db_name_tree=null;
		CommonTree isExtended_tree=null;
		CommonTree showOptions_tree=null;
		CommonTree KW_SHOW277_tree=null;
		CommonTree KW_DATABASES278_tree=null;
		CommonTree KW_SCHEMAS279_tree=null;
		CommonTree KW_LIKE280_tree=null;
		CommonTree KW_SHOW282_tree=null;
		CommonTree KW_TABLES283_tree=null;
		CommonTree KW_FROM284_tree=null;
		CommonTree KW_IN285_tree=null;
		CommonTree KW_LIKE286_tree=null;
		CommonTree KW_SHOW289_tree=null;
		CommonTree KW_FUNCTIONS290_tree=null;
		CommonTree KW_SHOW292_tree=null;
		CommonTree KW_PARTITIONS293_tree=null;
		CommonTree Identifier294_tree=null;
		CommonTree KW_SHOW296_tree=null;
		CommonTree KW_TABLE297_tree=null;
		CommonTree KW_EXTENDED298_tree=null;
		CommonTree KW_FROM299_tree=null;
		CommonTree KW_IN300_tree=null;
		CommonTree KW_LIKE301_tree=null;
		CommonTree KW_SHOW304_tree=null;
		CommonTree KW_LOCKS305_tree=null;
		CommonTree KW_SHOW306_tree=null;
		CommonTree KW_INDEX307_tree=null;
		CommonTree KW_INDEXES308_tree=null;
		CommonTree KW_ON309_tree=null;
		CommonTree KW_FROM311_tree=null;
		CommonTree KW_IN312_tree=null;
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_LOCKS=new RewriteRuleTokenStream(adaptor,"token KW_LOCKS");
		RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
		RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
		RewriteRuleTokenStream stream_KW_PARTITIONS=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONS");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_KW_FUNCTIONS=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTIONS");
		RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
		RewriteRuleTokenStream stream_KW_INDEXES=new RewriteRuleTokenStream(adaptor,"token KW_INDEXES");
		RewriteRuleTokenStream stream_KW_SCHEMAS=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMAS");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_KW_TABLES=new RewriteRuleTokenStream(adaptor,"token KW_TABLES");
		RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
		RewriteRuleTokenStream stream_KW_DATABASES=new RewriteRuleTokenStream(adaptor,"token KW_DATABASES");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleSubtreeStream stream_showStmtIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showStmtIdentifier");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_partTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule partTypeExpr");

		 msgs.push("show statement"); 
		try {
			// Hive.g:843:5: ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) )
			int alt98=7;
			int LA98_0 = input.LA(1);
			if ( (LA98_0==KW_SHOW) ) {
				switch ( input.LA(2) ) {
				case KW_TABLES:
					{
					alt98=2;
					}
					break;
				case KW_FUNCTIONS:
					{
					alt98=3;
					}
					break;
				case KW_PARTITIONS:
					{
					alt98=4;
					}
					break;
				case KW_TABLE:
					{
					alt98=5;
					}
					break;
				case KW_LOCKS:
					{
					alt98=6;
					}
					break;
				case KW_DATABASES:
				case KW_SCHEMAS:
					{
					alt98=1;
					}
					break;
				case KW_FORMATTED:
				case KW_INDEX:
				case KW_INDEXES:
					{
					alt98=7;
					}
					break;
				default:
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 98, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 98, 0, input);
				throw nvae;
			}

			switch (alt98) {
				case 1 :
					// Hive.g:843:7: KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )?
					{
					KW_SHOW277=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5192);  
					stream_KW_SHOW.add(KW_SHOW277);

					// Hive.g:843:15: ( KW_DATABASES | KW_SCHEMAS )
					int alt82=2;
					int LA82_0 = input.LA(1);
					if ( (LA82_0==KW_DATABASES) ) {
						alt82=1;
					}
					else if ( (LA82_0==KW_SCHEMAS) ) {
						alt82=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 82, 0, input);
						throw nvae;
					}

					switch (alt82) {
						case 1 :
							// Hive.g:843:16: KW_DATABASES
							{
							KW_DATABASES278=(Token)match(input,KW_DATABASES,FOLLOW_KW_DATABASES_in_showStatement5195);  
							stream_KW_DATABASES.add(KW_DATABASES278);

							}
							break;
						case 2 :
							// Hive.g:843:29: KW_SCHEMAS
							{
							KW_SCHEMAS279=(Token)match(input,KW_SCHEMAS,FOLLOW_KW_SCHEMAS_in_showStatement5197);  
							stream_KW_SCHEMAS.add(KW_SCHEMAS279);

							}
							break;

					}

					// Hive.g:843:41: ( KW_LIKE showStmtIdentifier )?
					int alt83=2;
					int LA83_0 = input.LA(1);
					if ( (LA83_0==KW_LIKE) ) {
						alt83=1;
					}
					switch (alt83) {
						case 1 :
							// Hive.g:843:42: KW_LIKE showStmtIdentifier
							{
							KW_LIKE280=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement5201);  
							stream_KW_LIKE.add(KW_LIKE280);

							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5203);
							showStmtIdentifier281=showStmtIdentifier();
							state._fsp--;

							stream_showStmtIdentifier.add(showStmtIdentifier281.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 843:71: -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
					{
						// Hive.g:843:74: ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWDATABASES, "TOK_SHOWDATABASES"), root_1);
						// Hive.g:843:94: ( showStmtIdentifier )?
						if ( stream_showStmtIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						}
						stream_showStmtIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:844:7: KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					{
					KW_SHOW282=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5222);  
					stream_KW_SHOW.add(KW_SHOW282);

					KW_TABLES283=(Token)match(input,KW_TABLES,FOLLOW_KW_TABLES_in_showStatement5224);  
					stream_KW_TABLES.add(KW_TABLES283);

					// Hive.g:844:25: ( ( KW_FROM | KW_IN ) db_name= Identifier )?
					int alt85=2;
					int LA85_0 = input.LA(1);
					if ( (LA85_0==KW_FROM||LA85_0==KW_IN) ) {
						alt85=1;
					}
					switch (alt85) {
						case 1 :
							// Hive.g:844:26: ( KW_FROM | KW_IN ) db_name= Identifier
							{
							// Hive.g:844:26: ( KW_FROM | KW_IN )
							int alt84=2;
							int LA84_0 = input.LA(1);
							if ( (LA84_0==KW_FROM) ) {
								alt84=1;
							}
							else if ( (LA84_0==KW_IN) ) {
								alt84=2;
							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 84, 0, input);
								throw nvae;
							}

							switch (alt84) {
								case 1 :
									// Hive.g:844:27: KW_FROM
									{
									KW_FROM284=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement5228);  
									stream_KW_FROM.add(KW_FROM284);

									}
									break;
								case 2 :
									// Hive.g:844:35: KW_IN
									{
									KW_IN285=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement5230);  
									stream_KW_IN.add(KW_IN285);

									}
									break;

							}

							db_name=(Token)match(input,Identifier,FOLLOW_Identifier_in_showStatement5235);  
							stream_Identifier.add(db_name);

							}
							break;

					}

					// Hive.g:844:63: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					int alt86=3;
					int LA86_0 = input.LA(1);
					if ( (LA86_0==KW_LIKE) ) {
						alt86=1;
					}
					else if ( (LA86_0==Identifier||LA86_0==StringLiteral) ) {
						alt86=2;
					}
					switch (alt86) {
						case 1 :
							// Hive.g:844:64: KW_LIKE showStmtIdentifier
							{
							KW_LIKE286=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement5240);  
							stream_KW_LIKE.add(KW_LIKE286);

							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5242);
							showStmtIdentifier287=showStmtIdentifier();
							state._fsp--;

							stream_showStmtIdentifier.add(showStmtIdentifier287.getTree());
							}
							break;
						case 2 :
							// Hive.g:844:91: showStmtIdentifier
							{
							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5244);
							showStmtIdentifier288=showStmtIdentifier();
							state._fsp--;

							stream_showStmtIdentifier.add(showStmtIdentifier288.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: db_name, showStmtIdentifier
					// token labels: db_name
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_db_name=new RewriteRuleTokenStream(adaptor,"token db_name",db_name);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 844:113: -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
					{
						// Hive.g:844:116: ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWTABLES, "TOK_SHOWTABLES"), root_1);
						// Hive.g:844:133: ( TOK_FROM $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_FROM, "TOK_FROM"));
							adaptor.addChild(root_1, stream_db_name.nextNode());
						}
						stream_db_name.reset();

						// Hive.g:844:154: ( showStmtIdentifier )?
						if ( stream_showStmtIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						}
						stream_showStmtIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// Hive.g:845:7: KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )?
					{
					KW_SHOW289=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5272);  
					stream_KW_SHOW.add(KW_SHOW289);

					KW_FUNCTIONS290=(Token)match(input,KW_FUNCTIONS,FOLLOW_KW_FUNCTIONS_in_showStatement5274);  
					stream_KW_FUNCTIONS.add(KW_FUNCTIONS290);

					// Hive.g:845:28: ( showStmtIdentifier )?
					int alt87=2;
					int LA87_0 = input.LA(1);
					if ( (LA87_0==Identifier||LA87_0==StringLiteral) ) {
						alt87=1;
					}
					switch (alt87) {
						case 1 :
							// Hive.g:845:28: showStmtIdentifier
							{
							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5276);
							showStmtIdentifier291=showStmtIdentifier();
							state._fsp--;

							stream_showStmtIdentifier.add(showStmtIdentifier291.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 845:49: -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? )
					{
						// Hive.g:845:52: ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWFUNCTIONS, "TOK_SHOWFUNCTIONS"), root_1);
						// Hive.g:845:72: ( showStmtIdentifier )?
						if ( stream_showStmtIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						}
						stream_showStmtIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 4 :
					// Hive.g:846:7: KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )?
					{
					KW_SHOW292=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5295);  
					stream_KW_SHOW.add(KW_SHOW292);

					KW_PARTITIONS293=(Token)match(input,KW_PARTITIONS,FOLLOW_KW_PARTITIONS_in_showStatement5297);  
					stream_KW_PARTITIONS.add(KW_PARTITIONS293);

					Identifier294=(Token)match(input,Identifier,FOLLOW_Identifier_in_showStatement5299);  
					stream_Identifier.add(Identifier294);

					// Hive.g:846:40: ( partitionSpec )?
					int alt88=2;
					int LA88_0 = input.LA(1);
					if ( (LA88_0==KW_PARTITION) ) {
						alt88=1;
					}
					switch (alt88) {
						case 1 :
							// Hive.g:846:40: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_showStatement5301);
							partitionSpec295=partitionSpec();
							state._fsp--;

							stream_partitionSpec.add(partitionSpec295.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: partitionSpec, Identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 846:55: -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? )
					{
						// Hive.g:846:58: ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWPARTITIONS, "TOK_SHOWPARTITIONS"), root_1);
						adaptor.addChild(root_1, stream_Identifier.nextNode());
						// Hive.g:846:90: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 5 :
					// Hive.g:847:7: KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )?
					{
					KW_SHOW296=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5321);  
					stream_KW_SHOW.add(KW_SHOW296);

					KW_TABLE297=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement5323);  
					stream_KW_TABLE.add(KW_TABLE297);

					KW_EXTENDED298=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement5325);  
					stream_KW_EXTENDED.add(KW_EXTENDED298);

					// Hive.g:847:36: ( ( KW_FROM | KW_IN ) db_name= Identifier )?
					int alt90=2;
					int LA90_0 = input.LA(1);
					if ( (LA90_0==KW_FROM||LA90_0==KW_IN) ) {
						alt90=1;
					}
					switch (alt90) {
						case 1 :
							// Hive.g:847:37: ( KW_FROM | KW_IN ) db_name= Identifier
							{
							// Hive.g:847:37: ( KW_FROM | KW_IN )
							int alt89=2;
							int LA89_0 = input.LA(1);
							if ( (LA89_0==KW_FROM) ) {
								alt89=1;
							}
							else if ( (LA89_0==KW_IN) ) {
								alt89=2;
							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 89, 0, input);
								throw nvae;
							}

							switch (alt89) {
								case 1 :
									// Hive.g:847:38: KW_FROM
									{
									KW_FROM299=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement5329);  
									stream_KW_FROM.add(KW_FROM299);

									}
									break;
								case 2 :
									// Hive.g:847:46: KW_IN
									{
									KW_IN300=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement5331);  
									stream_KW_IN.add(KW_IN300);

									}
									break;

							}

							db_name=(Token)match(input,Identifier,FOLLOW_Identifier_in_showStatement5336);  
							stream_Identifier.add(db_name);

							}
							break;

					}

					KW_LIKE301=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement5340);  
					stream_KW_LIKE.add(KW_LIKE301);

					pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5342);
					showStmtIdentifier302=showStmtIdentifier();
					state._fsp--;

					stream_showStmtIdentifier.add(showStmtIdentifier302.getTree());
					// Hive.g:847:101: ( partitionSpec )?
					int alt91=2;
					int LA91_0 = input.LA(1);
					if ( (LA91_0==KW_PARTITION) ) {
						alt91=1;
					}
					switch (alt91) {
						case 1 :
							// Hive.g:847:101: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_showStatement5344);
							partitionSpec303=partitionSpec();
							state._fsp--;

							stream_partitionSpec.add(partitionSpec303.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: db_name, partitionSpec, showStmtIdentifier
					// token labels: db_name
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_db_name=new RewriteRuleTokenStream(adaptor,"token db_name",db_name);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 848:5: -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
					{
						// Hive.g:848:8: ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_TABLESTATUS, "TOK_SHOW_TABLESTATUS"), root_1);
						adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						// Hive.g:848:51: ( $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, stream_db_name.nextNode());
						}
						stream_db_name.reset();

						// Hive.g:848:60: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 6 :
					// Hive.g:849:7: KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )?
					{
					KW_SHOW304=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5372);  
					stream_KW_SHOW.add(KW_SHOW304);

					KW_LOCKS305=(Token)match(input,KW_LOCKS,FOLLOW_KW_LOCKS_in_showStatement5374);  
					stream_KW_LOCKS.add(KW_LOCKS305);

					// Hive.g:849:24: (parttype= partTypeExpr )?
					int alt92=2;
					int LA92_0 = input.LA(1);
					if ( (LA92_0==Identifier) ) {
						alt92=1;
					}
					switch (alt92) {
						case 1 :
							// Hive.g:849:25: parttype= partTypeExpr
							{
							pushFollow(FOLLOW_partTypeExpr_in_showStatement5379);
							parttype=partTypeExpr();
							state._fsp--;

							stream_partTypeExpr.add(parttype.getTree());
							}
							break;

					}

					// Hive.g:849:49: (isExtended= KW_EXTENDED )?
					int alt93=2;
					int LA93_0 = input.LA(1);
					if ( (LA93_0==KW_EXTENDED) ) {
						alt93=1;
					}
					switch (alt93) {
						case 1 :
							// Hive.g:849:50: isExtended= KW_EXTENDED
							{
							isExtended=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement5386);  
							stream_KW_EXTENDED.add(isExtended);

							}
							break;

					}

					// AST REWRITE
					// elements: isExtended, parttype
					// token labels: isExtended
					// rule labels: retval, parttype
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 849:75: -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
					{
						// Hive.g:849:78: ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWLOCKS, "TOK_SHOWLOCKS"), root_1);
						// Hive.g:849:95: ( $parttype)?
						if ( stream_parttype.hasNext() ) {
							adaptor.addChild(root_1, stream_parttype.nextTree());
						}
						stream_parttype.reset();

						// Hive.g:849:106: ( $isExtended)?
						if ( stream_isExtended.hasNext() ) {
							adaptor.addChild(root_1, stream_isExtended.nextNode());
						}
						stream_isExtended.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 7 :
					// Hive.g:850:7: KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )?
					{
					KW_SHOW306=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5410);  
					stream_KW_SHOW.add(KW_SHOW306);

					// Hive.g:850:15: (showOptions= KW_FORMATTED )?
					int alt94=2;
					int LA94_0 = input.LA(1);
					if ( (LA94_0==KW_FORMATTED) ) {
						alt94=1;
					}
					switch (alt94) {
						case 1 :
							// Hive.g:850:16: showOptions= KW_FORMATTED
							{
							showOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_showStatement5415);  
							stream_KW_FORMATTED.add(showOptions);

							}
							break;

					}

					// Hive.g:850:43: ( KW_INDEX | KW_INDEXES )
					int alt95=2;
					int LA95_0 = input.LA(1);
					if ( (LA95_0==KW_INDEX) ) {
						alt95=1;
					}
					else if ( (LA95_0==KW_INDEXES) ) {
						alt95=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 95, 0, input);
						throw nvae;
					}

					switch (alt95) {
						case 1 :
							// Hive.g:850:44: KW_INDEX
							{
							KW_INDEX307=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_showStatement5420);  
							stream_KW_INDEX.add(KW_INDEX307);

							}
							break;
						case 2 :
							// Hive.g:850:53: KW_INDEXES
							{
							KW_INDEXES308=(Token)match(input,KW_INDEXES,FOLLOW_KW_INDEXES_in_showStatement5422);  
							stream_KW_INDEXES.add(KW_INDEXES308);

							}
							break;

					}

					KW_ON309=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_showStatement5425);  
					stream_KW_ON.add(KW_ON309);

					pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5427);
					showStmtIdentifier310=showStmtIdentifier();
					state._fsp--;

					stream_showStmtIdentifier.add(showStmtIdentifier310.getTree());
					// Hive.g:850:90: ( ( KW_FROM | KW_IN ) db_name= Identifier )?
					int alt97=2;
					int LA97_0 = input.LA(1);
					if ( (LA97_0==KW_FROM||LA97_0==KW_IN) ) {
						alt97=1;
					}
					switch (alt97) {
						case 1 :
							// Hive.g:850:91: ( KW_FROM | KW_IN ) db_name= Identifier
							{
							// Hive.g:850:91: ( KW_FROM | KW_IN )
							int alt96=2;
							int LA96_0 = input.LA(1);
							if ( (LA96_0==KW_FROM) ) {
								alt96=1;
							}
							else if ( (LA96_0==KW_IN) ) {
								alt96=2;
							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 96, 0, input);
								throw nvae;
							}

							switch (alt96) {
								case 1 :
									// Hive.g:850:92: KW_FROM
									{
									KW_FROM311=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement5431);  
									stream_KW_FROM.add(KW_FROM311);

									}
									break;
								case 2 :
									// Hive.g:850:100: KW_IN
									{
									KW_IN312=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement5433);  
									stream_KW_IN.add(KW_IN312);

									}
									break;

							}

							db_name=(Token)match(input,Identifier,FOLLOW_Identifier_in_showStatement5438);  
							stream_Identifier.add(db_name);

							}
							break;

					}

					// AST REWRITE
					// elements: showOptions, showStmtIdentifier, db_name
					// token labels: showOptions, db_name
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_showOptions=new RewriteRuleTokenStream(adaptor,"token showOptions",showOptions);
					RewriteRuleTokenStream stream_db_name=new RewriteRuleTokenStream(adaptor,"token db_name",db_name);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 851:5: -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
					{
						// Hive.g:851:8: ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWINDEXES, "TOK_SHOWINDEXES"), root_1);
						adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						// Hive.g:851:46: ( $showOptions)?
						if ( stream_showOptions.hasNext() ) {
							adaptor.addChild(root_1, stream_showOptions.nextNode());
						}
						stream_showOptions.reset();

						// Hive.g:851:60: ( $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, stream_db_name.nextNode());
						}
						stream_db_name.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showStatement"


	public static class lockStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "lockStatement"
	// Hive.g:854:1: lockStatement : KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) ;
	public final HiveParser.lockStatement_return lockStatement() throws RecognitionException {
		HiveParser.lockStatement_return retval = new HiveParser.lockStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_LOCK313=null;
		Token KW_TABLE314=null;
		ParserRuleReturnScope tableName315 =null;
		ParserRuleReturnScope partitionSpec316 =null;
		ParserRuleReturnScope lockMode317 =null;

		CommonTree KW_LOCK313_tree=null;
		CommonTree KW_TABLE314_tree=null;
		RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");

		 msgs.push("lock statement"); 
		try {
			// Hive.g:857:5: ( KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) )
			// Hive.g:857:7: KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode
			{
			KW_LOCK313=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockStatement5487);  
			stream_KW_LOCK.add(KW_LOCK313);

			KW_TABLE314=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_lockStatement5489);  
			stream_KW_TABLE.add(KW_TABLE314);

			pushFollow(FOLLOW_tableName_in_lockStatement5491);
			tableName315=tableName();
			state._fsp--;

			stream_tableName.add(tableName315.getTree());
			// Hive.g:857:34: ( partitionSpec )?
			int alt99=2;
			int LA99_0 = input.LA(1);
			if ( (LA99_0==KW_PARTITION) ) {
				alt99=1;
			}
			switch (alt99) {
				case 1 :
					// Hive.g:857:34: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_lockStatement5493);
					partitionSpec316=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec316.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_lockMode_in_lockStatement5496);
			lockMode317=lockMode();
			state._fsp--;

			stream_lockMode.add(lockMode317.getTree());
			// AST REWRITE
			// elements: lockMode, tableName, partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 857:58: -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
			{
				// Hive.g:857:61: ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LOCKTABLE, "TOK_LOCKTABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				adaptor.addChild(root_1, stream_lockMode.nextTree());
				// Hive.g:857:96: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lockStatement"


	public static class lockMode_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "lockMode"
	// Hive.g:860:1: lockMode : ( KW_SHARED | KW_EXCLUSIVE );
	public final HiveParser.lockMode_return lockMode() throws RecognitionException {
		HiveParser.lockMode_return retval = new HiveParser.lockMode_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set318=null;

		CommonTree set318_tree=null;

		 msgs.push("lock mode"); 
		try {
			// Hive.g:863:5: ( KW_SHARED | KW_EXCLUSIVE )
			// Hive.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set318=input.LT(1);
			if ( input.LA(1)==KW_EXCLUSIVE||input.LA(1)==KW_SHARED ) {
				input.consume();
				adaptor.addChild(root_0, (CommonTree)adaptor.create(set318));
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lockMode"


	public static class unlockStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unlockStatement"
	// Hive.g:866:1: unlockStatement : KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) ;
	public final HiveParser.unlockStatement_return unlockStatement() throws RecognitionException {
		HiveParser.unlockStatement_return retval = new HiveParser.unlockStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_UNLOCK319=null;
		Token KW_TABLE320=null;
		ParserRuleReturnScope tableName321 =null;
		ParserRuleReturnScope partitionSpec322 =null;

		CommonTree KW_UNLOCK319_tree=null;
		CommonTree KW_TABLE320_tree=null;
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 msgs.push("unlock statement"); 
		try {
			// Hive.g:869:5: ( KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) )
			// Hive.g:869:7: KW_UNLOCK KW_TABLE tableName ( partitionSpec )?
			{
			KW_UNLOCK319=(Token)match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockStatement5567);  
			stream_KW_UNLOCK.add(KW_UNLOCK319);

			KW_TABLE320=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_unlockStatement5569);  
			stream_KW_TABLE.add(KW_TABLE320);

			pushFollow(FOLLOW_tableName_in_unlockStatement5571);
			tableName321=tableName();
			state._fsp--;

			stream_tableName.add(tableName321.getTree());
			// Hive.g:869:36: ( partitionSpec )?
			int alt100=2;
			int LA100_0 = input.LA(1);
			if ( (LA100_0==KW_PARTITION) ) {
				alt100=1;
			}
			switch (alt100) {
				case 1 :
					// Hive.g:869:36: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_unlockStatement5573);
					partitionSpec322=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec322.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: partitionSpec, tableName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 869:52: -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
			{
				// Hive.g:869:55: ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNLOCKTABLE, "TOK_UNLOCKTABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// Hive.g:869:83: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unlockStatement"


	public static class createRoleStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createRoleStatement"
	// Hive.g:872:1: createRoleStatement : KW_CREATE kwRole roleName= Identifier -> ^( TOK_CREATEROLE $roleName) ;
	public final HiveParser.createRoleStatement_return createRoleStatement() throws RecognitionException {
		HiveParser.createRoleStatement_return retval = new HiveParser.createRoleStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token roleName=null;
		Token KW_CREATE323=null;
		ParserRuleReturnScope kwRole324 =null;

		CommonTree roleName_tree=null;
		CommonTree KW_CREATE323_tree=null;
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");

		 msgs.push("create role"); 
		try {
			// Hive.g:875:5: ( KW_CREATE kwRole roleName= Identifier -> ^( TOK_CREATEROLE $roleName) )
			// Hive.g:875:7: KW_CREATE kwRole roleName= Identifier
			{
			KW_CREATE323=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createRoleStatement5613);  
			stream_KW_CREATE.add(KW_CREATE323);

			pushFollow(FOLLOW_kwRole_in_createRoleStatement5615);
			kwRole324=kwRole();
			state._fsp--;

			stream_kwRole.add(kwRole324.getTree());
			roleName=(Token)match(input,Identifier,FOLLOW_Identifier_in_createRoleStatement5619);  
			stream_Identifier.add(roleName);

			// AST REWRITE
			// elements: roleName
			// token labels: roleName
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_roleName=new RewriteRuleTokenStream(adaptor,"token roleName",roleName);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 876:5: -> ^( TOK_CREATEROLE $roleName)
			{
				// Hive.g:876:8: ^( TOK_CREATEROLE $roleName)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEROLE, "TOK_CREATEROLE"), root_1);
				adaptor.addChild(root_1, stream_roleName.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createRoleStatement"


	public static class dropRoleStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropRoleStatement"
	// Hive.g:879:1: dropRoleStatement : KW_DROP kwRole roleName= Identifier -> ^( TOK_DROPROLE $roleName) ;
	public final HiveParser.dropRoleStatement_return dropRoleStatement() throws RecognitionException {
		HiveParser.dropRoleStatement_return retval = new HiveParser.dropRoleStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token roleName=null;
		Token KW_DROP325=null;
		ParserRuleReturnScope kwRole326 =null;

		CommonTree roleName_tree=null;
		CommonTree KW_DROP325_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");

		msgs.push("drop role");
		try {
			// Hive.g:882:5: ( KW_DROP kwRole roleName= Identifier -> ^( TOK_DROPROLE $roleName) )
			// Hive.g:882:7: KW_DROP kwRole roleName= Identifier
			{
			KW_DROP325=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropRoleStatement5659);  
			stream_KW_DROP.add(KW_DROP325);

			pushFollow(FOLLOW_kwRole_in_dropRoleStatement5661);
			kwRole326=kwRole();
			state._fsp--;

			stream_kwRole.add(kwRole326.getTree());
			roleName=(Token)match(input,Identifier,FOLLOW_Identifier_in_dropRoleStatement5665);  
			stream_Identifier.add(roleName);

			// AST REWRITE
			// elements: roleName
			// token labels: roleName
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_roleName=new RewriteRuleTokenStream(adaptor,"token roleName",roleName);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 883:5: -> ^( TOK_DROPROLE $roleName)
			{
				// Hive.g:883:8: ^( TOK_DROPROLE $roleName)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPROLE, "TOK_DROPROLE"), root_1);
				adaptor.addChild(root_1, stream_roleName.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropRoleStatement"


	public static class grantPrivileges_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "grantPrivileges"
	// Hive.g:886:1: grantPrivileges : KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( KW_WITH withOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? ) ;
	public final HiveParser.grantPrivileges_return grantPrivileges() throws RecognitionException {
		HiveParser.grantPrivileges_return retval = new HiveParser.grantPrivileges_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_GRANT327=null;
		Token KW_TO329=null;
		Token KW_WITH331=null;
		ParserRuleReturnScope privList =null;
		ParserRuleReturnScope privilegeObject328 =null;
		ParserRuleReturnScope principalSpecification330 =null;
		ParserRuleReturnScope withOption332 =null;

		CommonTree KW_GRANT327_tree=null;
		CommonTree KW_TO329_tree=null;
		CommonTree KW_WITH331_tree=null;
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
		RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
		RewriteRuleSubtreeStream stream_withOption=new RewriteRuleSubtreeStream(adaptor,"rule withOption");

		msgs.push("grant privileges");
		try {
			// Hive.g:889:5: ( KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( KW_WITH withOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? ) )
			// Hive.g:889:7: KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( KW_WITH withOption )?
			{
			KW_GRANT327=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantPrivileges5705);  
			stream_KW_GRANT.add(KW_GRANT327);

			pushFollow(FOLLOW_privilegeList_in_grantPrivileges5709);
			privList=privilegeList();
			state._fsp--;

			stream_privilegeList.add(privList.getTree());
			// Hive.g:890:7: ( privilegeObject )?
			int alt101=2;
			int LA101_0 = input.LA(1);
			if ( (LA101_0==KW_ON) ) {
				alt101=1;
			}
			switch (alt101) {
				case 1 :
					// Hive.g:890:7: privilegeObject
					{
					pushFollow(FOLLOW_privilegeObject_in_grantPrivileges5717);
					privilegeObject328=privilegeObject();
					state._fsp--;

					stream_privilegeObject.add(privilegeObject328.getTree());
					}
					break;

			}

			KW_TO329=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantPrivileges5726);  
			stream_KW_TO.add(KW_TO329);

			pushFollow(FOLLOW_principalSpecification_in_grantPrivileges5728);
			principalSpecification330=principalSpecification();
			state._fsp--;

			stream_principalSpecification.add(principalSpecification330.getTree());
			// Hive.g:892:7: ( KW_WITH withOption )?
			int alt102=2;
			int LA102_0 = input.LA(1);
			if ( (LA102_0==KW_WITH) ) {
				alt102=1;
			}
			switch (alt102) {
				case 1 :
					// Hive.g:892:8: KW_WITH withOption
					{
					KW_WITH331=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_grantPrivileges5737);  
					stream_KW_WITH.add(KW_WITH331);

					pushFollow(FOLLOW_withOption_in_grantPrivileges5739);
					withOption332=withOption();
					state._fsp--;

					stream_withOption.add(withOption332.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: privilegeObject, privList, withOption, principalSpecification
			// token labels: 
			// rule labels: retval, privList
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_privList=new RewriteRuleSubtreeStream(adaptor,"rule privList",privList!=null?privList.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 893:5: -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? )
			{
				// Hive.g:893:8: ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GRANT, "TOK_GRANT"), root_1);
				adaptor.addChild(root_1, stream_privList.nextTree());
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// Hive.g:893:53: ( privilegeObject )?
				if ( stream_privilegeObject.hasNext() ) {
					adaptor.addChild(root_1, stream_privilegeObject.nextTree());
				}
				stream_privilegeObject.reset();

				// Hive.g:893:70: ( withOption )?
				if ( stream_withOption.hasNext() ) {
					adaptor.addChild(root_1, stream_withOption.nextTree());
				}
				stream_withOption.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grantPrivileges"


	public static class revokePrivileges_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "revokePrivileges"
	// Hive.g:896:1: revokePrivileges : KW_REVOKE privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ) ;
	public final HiveParser.revokePrivileges_return revokePrivileges() throws RecognitionException {
		HiveParser.revokePrivileges_return retval = new HiveParser.revokePrivileges_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_REVOKE333=null;
		Token KW_FROM336=null;
		ParserRuleReturnScope privilegeList334 =null;
		ParserRuleReturnScope privilegeObject335 =null;
		ParserRuleReturnScope principalSpecification337 =null;

		CommonTree KW_REVOKE333_tree=null;
		CommonTree KW_FROM336_tree=null;
		RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
		RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		msgs.push("revoke privileges");
		try {
			// Hive.g:899:5: ( KW_REVOKE privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ) )
			// Hive.g:899:7: KW_REVOKE privilegeList ( privilegeObject )? KW_FROM principalSpecification
			{
			KW_REVOKE333=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokePrivileges5789);  
			stream_KW_REVOKE.add(KW_REVOKE333);

			pushFollow(FOLLOW_privilegeList_in_revokePrivileges5791);
			privilegeList334=privilegeList();
			state._fsp--;

			stream_privilegeList.add(privilegeList334.getTree());
			// Hive.g:899:31: ( privilegeObject )?
			int alt103=2;
			int LA103_0 = input.LA(1);
			if ( (LA103_0==KW_ON) ) {
				alt103=1;
			}
			switch (alt103) {
				case 1 :
					// Hive.g:899:31: privilegeObject
					{
					pushFollow(FOLLOW_privilegeObject_in_revokePrivileges5793);
					privilegeObject335=privilegeObject();
					state._fsp--;

					stream_privilegeObject.add(privilegeObject335.getTree());
					}
					break;

			}

			KW_FROM336=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokePrivileges5796);  
			stream_KW_FROM.add(KW_FROM336);

			pushFollow(FOLLOW_principalSpecification_in_revokePrivileges5798);
			principalSpecification337=principalSpecification();
			state._fsp--;

			stream_principalSpecification.add(principalSpecification337.getTree());
			// AST REWRITE
			// elements: principalSpecification, privilegeObject, privilegeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 900:5: -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? )
			{
				// Hive.g:900:8: ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_REVOKE, "TOK_REVOKE"), root_1);
				adaptor.addChild(root_1, stream_privilegeList.nextTree());
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// Hive.g:900:58: ( privilegeObject )?
				if ( stream_privilegeObject.hasNext() ) {
					adaptor.addChild(root_1, stream_privilegeObject.nextTree());
				}
				stream_privilegeObject.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "revokePrivileges"


	public static class grantRole_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "grantRole"
	// Hive.g:903:1: grantRole : KW_GRANT kwRole Identifier ( COMMA Identifier )* KW_TO principalSpecification -> ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ ) ;
	public final HiveParser.grantRole_return grantRole() throws RecognitionException {
		HiveParser.grantRole_return retval = new HiveParser.grantRole_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_GRANT338=null;
		Token Identifier340=null;
		Token COMMA341=null;
		Token Identifier342=null;
		Token KW_TO343=null;
		ParserRuleReturnScope kwRole339 =null;
		ParserRuleReturnScope principalSpecification344 =null;

		CommonTree KW_GRANT338_tree=null;
		CommonTree Identifier340_tree=null;
		CommonTree COMMA341_tree=null;
		CommonTree Identifier342_tree=null;
		CommonTree KW_TO343_tree=null;
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		msgs.push("grant role");
		try {
			// Hive.g:906:5: ( KW_GRANT kwRole Identifier ( COMMA Identifier )* KW_TO principalSpecification -> ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ ) )
			// Hive.g:906:7: KW_GRANT kwRole Identifier ( COMMA Identifier )* KW_TO principalSpecification
			{
			KW_GRANT338=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantRole5842);  
			stream_KW_GRANT.add(KW_GRANT338);

			pushFollow(FOLLOW_kwRole_in_grantRole5844);
			kwRole339=kwRole();
			state._fsp--;

			stream_kwRole.add(kwRole339.getTree());
			Identifier340=(Token)match(input,Identifier,FOLLOW_Identifier_in_grantRole5846);  
			stream_Identifier.add(Identifier340);

			// Hive.g:906:34: ( COMMA Identifier )*
			loop104:
			while (true) {
				int alt104=2;
				int LA104_0 = input.LA(1);
				if ( (LA104_0==COMMA) ) {
					alt104=1;
				}

				switch (alt104) {
				case 1 :
					// Hive.g:906:35: COMMA Identifier
					{
					COMMA341=(Token)match(input,COMMA,FOLLOW_COMMA_in_grantRole5849);  
					stream_COMMA.add(COMMA341);

					Identifier342=(Token)match(input,Identifier,FOLLOW_Identifier_in_grantRole5851);  
					stream_Identifier.add(Identifier342);

					}
					break;

				default :
					break loop104;
				}
			}

			KW_TO343=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantRole5855);  
			stream_KW_TO.add(KW_TO343);

			pushFollow(FOLLOW_principalSpecification_in_grantRole5857);
			principalSpecification344=principalSpecification();
			state._fsp--;

			stream_principalSpecification.add(principalSpecification344.getTree());
			// AST REWRITE
			// elements: Identifier, principalSpecification
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 907:5: -> ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ )
			{
				// Hive.g:907:8: ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GRANT_ROLE, "TOK_GRANT_ROLE"), root_1);
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				if ( !(stream_Identifier.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_Identifier.hasNext() ) {
					adaptor.addChild(root_1, stream_Identifier.nextNode());
				}
				stream_Identifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grantRole"


	public static class revokeRole_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "revokeRole"
	// Hive.g:910:1: revokeRole : KW_REVOKE kwRole Identifier ( COMMA Identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ ) ;
	public final HiveParser.revokeRole_return revokeRole() throws RecognitionException {
		HiveParser.revokeRole_return retval = new HiveParser.revokeRole_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_REVOKE345=null;
		Token Identifier347=null;
		Token COMMA348=null;
		Token Identifier349=null;
		Token KW_FROM350=null;
		ParserRuleReturnScope kwRole346 =null;
		ParserRuleReturnScope principalSpecification351 =null;

		CommonTree KW_REVOKE345_tree=null;
		CommonTree Identifier347_tree=null;
		CommonTree COMMA348_tree=null;
		CommonTree Identifier349_tree=null;
		CommonTree KW_FROM350_tree=null;
		RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		msgs.push("revoke role");
		try {
			// Hive.g:913:5: ( KW_REVOKE kwRole Identifier ( COMMA Identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ ) )
			// Hive.g:913:7: KW_REVOKE kwRole Identifier ( COMMA Identifier )* KW_FROM principalSpecification
			{
			KW_REVOKE345=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokeRole5899);  
			stream_KW_REVOKE.add(KW_REVOKE345);

			pushFollow(FOLLOW_kwRole_in_revokeRole5901);
			kwRole346=kwRole();
			state._fsp--;

			stream_kwRole.add(kwRole346.getTree());
			Identifier347=(Token)match(input,Identifier,FOLLOW_Identifier_in_revokeRole5903);  
			stream_Identifier.add(Identifier347);

			// Hive.g:913:35: ( COMMA Identifier )*
			loop105:
			while (true) {
				int alt105=2;
				int LA105_0 = input.LA(1);
				if ( (LA105_0==COMMA) ) {
					alt105=1;
				}

				switch (alt105) {
				case 1 :
					// Hive.g:913:36: COMMA Identifier
					{
					COMMA348=(Token)match(input,COMMA,FOLLOW_COMMA_in_revokeRole5906);  
					stream_COMMA.add(COMMA348);

					Identifier349=(Token)match(input,Identifier,FOLLOW_Identifier_in_revokeRole5908);  
					stream_Identifier.add(Identifier349);

					}
					break;

				default :
					break loop105;
				}
			}

			KW_FROM350=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokeRole5912);  
			stream_KW_FROM.add(KW_FROM350);

			pushFollow(FOLLOW_principalSpecification_in_revokeRole5914);
			principalSpecification351=principalSpecification();
			state._fsp--;

			stream_principalSpecification.add(principalSpecification351.getTree());
			// AST REWRITE
			// elements: Identifier, principalSpecification
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 914:5: -> ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ )
			{
				// Hive.g:914:8: ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_REVOKE_ROLE, "TOK_REVOKE_ROLE"), root_1);
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				if ( !(stream_Identifier.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_Identifier.hasNext() ) {
					adaptor.addChild(root_1, stream_Identifier.nextNode());
				}
				stream_Identifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "revokeRole"


	public static class showRoleGrants_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showRoleGrants"
	// Hive.g:917:1: showRoleGrants : KW_SHOW kwRole KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) ;
	public final HiveParser.showRoleGrants_return showRoleGrants() throws RecognitionException {
		HiveParser.showRoleGrants_return retval = new HiveParser.showRoleGrants_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SHOW352=null;
		Token KW_GRANT354=null;
		ParserRuleReturnScope kwRole353 =null;
		ParserRuleReturnScope principalName355 =null;

		CommonTree KW_SHOW352_tree=null;
		CommonTree KW_GRANT354_tree=null;
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		msgs.push("show role grants");
		try {
			// Hive.g:920:5: ( KW_SHOW kwRole KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) )
			// Hive.g:920:7: KW_SHOW kwRole KW_GRANT principalName
			{
			KW_SHOW352=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoleGrants5956);  
			stream_KW_SHOW.add(KW_SHOW352);

			pushFollow(FOLLOW_kwRole_in_showRoleGrants5958);
			kwRole353=kwRole();
			state._fsp--;

			stream_kwRole.add(kwRole353.getTree());
			KW_GRANT354=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showRoleGrants5960);  
			stream_KW_GRANT.add(KW_GRANT354);

			pushFollow(FOLLOW_principalName_in_showRoleGrants5962);
			principalName355=principalName();
			state._fsp--;

			stream_principalName.add(principalName355.getTree());
			// AST REWRITE
			// elements: principalName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 921:5: -> ^( TOK_SHOW_ROLE_GRANT principalName )
			{
				// Hive.g:921:8: ^( TOK_SHOW_ROLE_GRANT principalName )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_ROLE_GRANT, "TOK_SHOW_ROLE_GRANT"), root_1);
				adaptor.addChild(root_1, stream_principalName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showRoleGrants"


	public static class showGrants_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showGrants"
	// Hive.g:924:1: showGrants : KW_SHOW KW_GRANT principalName ( privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? ) ;
	public final HiveParser.showGrants_return showGrants() throws RecognitionException {
		HiveParser.showGrants_return retval = new HiveParser.showGrants_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SHOW356=null;
		Token KW_GRANT357=null;
		ParserRuleReturnScope principalName358 =null;
		ParserRuleReturnScope privilegeIncludeColObject359 =null;

		CommonTree KW_SHOW356_tree=null;
		CommonTree KW_GRANT357_tree=null;
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
		RewriteRuleSubtreeStream stream_privilegeIncludeColObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeIncludeColObject");

		msgs.push("show grants");
		try {
			// Hive.g:927:5: ( KW_SHOW KW_GRANT principalName ( privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? ) )
			// Hive.g:927:7: KW_SHOW KW_GRANT principalName ( privilegeIncludeColObject )?
			{
			KW_SHOW356=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showGrants6001);  
			stream_KW_SHOW.add(KW_SHOW356);

			KW_GRANT357=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showGrants6003);  
			stream_KW_GRANT.add(KW_GRANT357);

			pushFollow(FOLLOW_principalName_in_showGrants6005);
			principalName358=principalName();
			state._fsp--;

			stream_principalName.add(principalName358.getTree());
			// Hive.g:927:38: ( privilegeIncludeColObject )?
			int alt106=2;
			int LA106_0 = input.LA(1);
			if ( (LA106_0==KW_ON) ) {
				alt106=1;
			}
			switch (alt106) {
				case 1 :
					// Hive.g:927:38: privilegeIncludeColObject
					{
					pushFollow(FOLLOW_privilegeIncludeColObject_in_showGrants6007);
					privilegeIncludeColObject359=privilegeIncludeColObject();
					state._fsp--;

					stream_privilegeIncludeColObject.add(privilegeIncludeColObject359.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: principalName, privilegeIncludeColObject
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 928:5: -> ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? )
			{
				// Hive.g:928:8: ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_GRANT, "TOK_SHOW_GRANT"), root_1);
				adaptor.addChild(root_1, stream_principalName.nextTree());
				// Hive.g:928:39: ( privilegeIncludeColObject )?
				if ( stream_privilegeIncludeColObject.hasNext() ) {
					adaptor.addChild(root_1, stream_privilegeIncludeColObject.nextTree());
				}
				stream_privilegeIncludeColObject.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showGrants"


	public static class privilegeIncludeColObject_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privilegeIncludeColObject"
	// Hive.g:931:1: privilegeIncludeColObject : KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? ) ;
	public final HiveParser.privilegeIncludeColObject_return privilegeIncludeColObject() throws RecognitionException {
		HiveParser.privilegeIncludeColObject_return retval = new HiveParser.privilegeIncludeColObject_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token table=null;
		Token KW_ON360=null;
		Token KW_DATABASE361=null;
		Token Identifier362=null;
		Token LPAREN363=null;
		Token RPAREN364=null;
		ParserRuleReturnScope cols =null;
		ParserRuleReturnScope partitionSpec365 =null;

		CommonTree table_tree=null;
		CommonTree KW_ON360_tree=null;
		CommonTree KW_DATABASE361_tree=null;
		CommonTree Identifier362_tree=null;
		CommonTree LPAREN363_tree=null;
		CommonTree RPAREN364_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		msgs.push("privilege object including columns");
		try {
			// Hive.g:934:5: ( KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? ) )
			// Hive.g:934:7: KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )?
			{
			KW_ON360=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_privilegeIncludeColObject6050);  
			stream_KW_ON.add(KW_ON360);

			// Hive.g:934:13: (table= KW_TABLE | KW_DATABASE )
			int alt107=2;
			int LA107_0 = input.LA(1);
			if ( (LA107_0==KW_TABLE) ) {
				alt107=1;
			}
			else if ( (LA107_0==KW_DATABASE) ) {
				alt107=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 107, 0, input);
				throw nvae;
			}

			switch (alt107) {
				case 1 :
					// Hive.g:934:14: table= KW_TABLE
					{
					table=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privilegeIncludeColObject6055);  
					stream_KW_TABLE.add(table);

					}
					break;
				case 2 :
					// Hive.g:934:29: KW_DATABASE
					{
					KW_DATABASE361=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privilegeIncludeColObject6057);  
					stream_KW_DATABASE.add(KW_DATABASE361);

					}
					break;

			}

			Identifier362=(Token)match(input,Identifier,FOLLOW_Identifier_in_privilegeIncludeColObject6060);  
			stream_Identifier.add(Identifier362);

			// Hive.g:934:53: ( LPAREN cols= columnNameList RPAREN )?
			int alt108=2;
			int LA108_0 = input.LA(1);
			if ( (LA108_0==LPAREN) ) {
				alt108=1;
			}
			switch (alt108) {
				case 1 :
					// Hive.g:934:54: LPAREN cols= columnNameList RPAREN
					{
					LPAREN363=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privilegeIncludeColObject6063);  
					stream_LPAREN.add(LPAREN363);

					pushFollow(FOLLOW_columnNameList_in_privilegeIncludeColObject6067);
					cols=columnNameList();
					state._fsp--;

					stream_columnNameList.add(cols.getTree());
					RPAREN364=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privilegeIncludeColObject6069);  
					stream_RPAREN.add(RPAREN364);

					}
					break;

			}

			// Hive.g:934:90: ( partitionSpec )?
			int alt109=2;
			int LA109_0 = input.LA(1);
			if ( (LA109_0==KW_PARTITION) ) {
				alt109=1;
			}
			switch (alt109) {
				case 1 :
					// Hive.g:934:90: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_privilegeIncludeColObject6073);
					partitionSpec365=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec365.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: cols, table, partitionSpec, Identifier
			// token labels: table
			// rule labels: retval, cols
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_table=new RewriteRuleTokenStream(adaptor,"token table",table);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 935:5: -> ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? )
			{
				// Hive.g:935:8: ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_OBJECT_COL, "TOK_PRIV_OBJECT_COL"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// Hive.g:935:42: ( $table)?
				if ( stream_table.hasNext() ) {
					adaptor.addChild(root_1, stream_table.nextNode());
				}
				stream_table.reset();

				// Hive.g:935:50: ( $cols)?
				if ( stream_cols.hasNext() ) {
					adaptor.addChild(root_1, stream_cols.nextTree());
				}
				stream_cols.reset();

				// Hive.g:935:56: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeIncludeColObject"


	public static class privilegeObject_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privilegeObject"
	// Hive.g:938:1: privilegeObject : KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( partitionSpec )? -> ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? ) ;
	public final HiveParser.privilegeObject_return privilegeObject() throws RecognitionException {
		HiveParser.privilegeObject_return retval = new HiveParser.privilegeObject_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token table=null;
		Token KW_ON366=null;
		Token KW_DATABASE367=null;
		Token Identifier368=null;
		ParserRuleReturnScope partitionSpec369 =null;

		CommonTree table_tree=null;
		CommonTree KW_ON366_tree=null;
		CommonTree KW_DATABASE367_tree=null;
		CommonTree Identifier368_tree=null;
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		msgs.push("privilege subject");
		try {
			// Hive.g:941:5: ( KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( partitionSpec )? -> ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? ) )
			// Hive.g:941:7: KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( partitionSpec )?
			{
			KW_ON366=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_privilegeObject6124);  
			stream_KW_ON.add(KW_ON366);

			// Hive.g:941:13: (table= KW_TABLE | KW_DATABASE )
			int alt110=2;
			int LA110_0 = input.LA(1);
			if ( (LA110_0==KW_TABLE) ) {
				alt110=1;
			}
			else if ( (LA110_0==KW_DATABASE) ) {
				alt110=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 110, 0, input);
				throw nvae;
			}

			switch (alt110) {
				case 1 :
					// Hive.g:941:14: table= KW_TABLE
					{
					table=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privilegeObject6129);  
					stream_KW_TABLE.add(table);

					}
					break;
				case 2 :
					// Hive.g:941:29: KW_DATABASE
					{
					KW_DATABASE367=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privilegeObject6131);  
					stream_KW_DATABASE.add(KW_DATABASE367);

					}
					break;

			}

			Identifier368=(Token)match(input,Identifier,FOLLOW_Identifier_in_privilegeObject6134);  
			stream_Identifier.add(Identifier368);

			// Hive.g:941:53: ( partitionSpec )?
			int alt111=2;
			int LA111_0 = input.LA(1);
			if ( (LA111_0==KW_PARTITION) ) {
				alt111=1;
			}
			switch (alt111) {
				case 1 :
					// Hive.g:941:53: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_privilegeObject6136);
					partitionSpec369=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec369.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: partitionSpec, Identifier, table
			// token labels: table
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_table=new RewriteRuleTokenStream(adaptor,"token table",table);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 942:5: -> ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? )
			{
				// Hive.g:942:8: ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_OBJECT, "TOK_PRIV_OBJECT"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// Hive.g:942:38: ( $table)?
				if ( stream_table.hasNext() ) {
					adaptor.addChild(root_1, stream_table.nextNode());
				}
				stream_table.reset();

				// Hive.g:942:45: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeObject"


	public static class privilegeList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privilegeList"
	// Hive.g:945:1: privilegeList : privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) ;
	public final HiveParser.privilegeList_return privilegeList() throws RecognitionException {
		HiveParser.privilegeList_return retval = new HiveParser.privilegeList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA371=null;
		ParserRuleReturnScope privlegeDef370 =null;
		ParserRuleReturnScope privlegeDef372 =null;

		CommonTree COMMA371_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_privlegeDef=new RewriteRuleSubtreeStream(adaptor,"rule privlegeDef");

		msgs.push("grant privilege list");
		try {
			// Hive.g:948:5: ( privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) )
			// Hive.g:948:7: privlegeDef ( COMMA privlegeDef )*
			{
			pushFollow(FOLLOW_privlegeDef_in_privilegeList6183);
			privlegeDef370=privlegeDef();
			state._fsp--;

			stream_privlegeDef.add(privlegeDef370.getTree());
			// Hive.g:948:19: ( COMMA privlegeDef )*
			loop112:
			while (true) {
				int alt112=2;
				int LA112_0 = input.LA(1);
				if ( (LA112_0==COMMA) ) {
					alt112=1;
				}

				switch (alt112) {
				case 1 :
					// Hive.g:948:20: COMMA privlegeDef
					{
					COMMA371=(Token)match(input,COMMA,FOLLOW_COMMA_in_privilegeList6186);  
					stream_COMMA.add(COMMA371);

					pushFollow(FOLLOW_privlegeDef_in_privilegeList6188);
					privlegeDef372=privlegeDef();
					state._fsp--;

					stream_privlegeDef.add(privlegeDef372.getTree());
					}
					break;

				default :
					break loop112;
				}
			}

			// AST REWRITE
			// elements: privlegeDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 949:5: -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
			{
				// Hive.g:949:8: ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIVILEGE_LIST, "TOK_PRIVILEGE_LIST"), root_1);
				if ( !(stream_privlegeDef.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_privlegeDef.hasNext() ) {
					adaptor.addChild(root_1, stream_privlegeDef.nextTree());
				}
				stream_privlegeDef.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeList"


	public static class privlegeDef_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privlegeDef"
	// Hive.g:952:1: privlegeDef : privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) ;
	public final HiveParser.privlegeDef_return privlegeDef() throws RecognitionException {
		HiveParser.privlegeDef_return retval = new HiveParser.privlegeDef_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN374=null;
		Token RPAREN375=null;
		ParserRuleReturnScope cols =null;
		ParserRuleReturnScope privilegeType373 =null;

		CommonTree LPAREN374_tree=null;
		CommonTree RPAREN375_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_privilegeType=new RewriteRuleSubtreeStream(adaptor,"rule privilegeType");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		msgs.push("grant privilege");
		try {
			// Hive.g:955:5: ( privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) )
			// Hive.g:955:7: privilegeType ( LPAREN cols= columnNameList RPAREN )?
			{
			pushFollow(FOLLOW_privilegeType_in_privlegeDef6230);
			privilegeType373=privilegeType();
			state._fsp--;

			stream_privilegeType.add(privilegeType373.getTree());
			// Hive.g:955:21: ( LPAREN cols= columnNameList RPAREN )?
			int alt113=2;
			int LA113_0 = input.LA(1);
			if ( (LA113_0==LPAREN) ) {
				alt113=1;
			}
			switch (alt113) {
				case 1 :
					// Hive.g:955:22: LPAREN cols= columnNameList RPAREN
					{
					LPAREN374=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privlegeDef6233);  
					stream_LPAREN.add(LPAREN374);

					pushFollow(FOLLOW_columnNameList_in_privlegeDef6237);
					cols=columnNameList();
					state._fsp--;

					stream_columnNameList.add(cols.getTree());
					RPAREN375=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privlegeDef6239);  
					stream_RPAREN.add(RPAREN375);

					}
					break;

			}

			// AST REWRITE
			// elements: cols, privilegeType
			// token labels: 
			// rule labels: retval, cols
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 956:5: -> ^( TOK_PRIVILEGE privilegeType ( $cols)? )
			{
				// Hive.g:956:8: ^( TOK_PRIVILEGE privilegeType ( $cols)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIVILEGE, "TOK_PRIVILEGE"), root_1);
				adaptor.addChild(root_1, stream_privilegeType.nextTree());
				// Hive.g:956:39: ( $cols)?
				if ( stream_cols.hasNext() ) {
					adaptor.addChild(root_1, stream_cols.nextTree());
				}
				stream_cols.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privlegeDef"


	public static class privilegeType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privilegeType"
	// Hive.g:959:1: privilegeType : ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) );
	public final HiveParser.privilegeType_return privilegeType() throws RecognitionException {
		HiveParser.privilegeType_return retval = new HiveParser.privilegeType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ALL376=null;
		Token KW_ALTER377=null;
		Token KW_UPDATE378=null;
		Token KW_CREATE379=null;
		Token KW_DROP380=null;
		Token KW_INDEX381=null;
		Token KW_LOCK382=null;
		Token KW_SELECT383=null;
		Token KW_SHOW_DATABASE384=null;

		CommonTree KW_ALL376_tree=null;
		CommonTree KW_ALTER377_tree=null;
		CommonTree KW_UPDATE378_tree=null;
		CommonTree KW_CREATE379_tree=null;
		CommonTree KW_DROP380_tree=null;
		CommonTree KW_INDEX381_tree=null;
		CommonTree KW_LOCK382_tree=null;
		CommonTree KW_SELECT383_tree=null;
		CommonTree KW_SHOW_DATABASE384_tree=null;
		RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
		RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleTokenStream stream_KW_SHOW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_SHOW_DATABASE");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");

		msgs.push("privilege type");
		try {
			// Hive.g:962:5: ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) )
			int alt114=9;
			switch ( input.LA(1) ) {
			case KW_ALL:
				{
				alt114=1;
				}
				break;
			case KW_ALTER:
				{
				alt114=2;
				}
				break;
			case KW_UPDATE:
				{
				alt114=3;
				}
				break;
			case KW_CREATE:
				{
				alt114=4;
				}
				break;
			case KW_DROP:
				{
				alt114=5;
				}
				break;
			case KW_INDEX:
				{
				alt114=6;
				}
				break;
			case KW_LOCK:
				{
				alt114=7;
				}
				break;
			case KW_SELECT:
				{
				alt114=8;
				}
				break;
			case KW_SHOW_DATABASE:
				{
				alt114=9;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 114, 0, input);
				throw nvae;
			}
			switch (alt114) {
				case 1 :
					// Hive.g:962:7: KW_ALL
					{
					KW_ALL376=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeType6284);  
					stream_KW_ALL.add(KW_ALL376);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 962:14: -> ^( TOK_PRIV_ALL )
					{
						// Hive.g:962:17: ^( TOK_PRIV_ALL )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_ALL, "TOK_PRIV_ALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:963:7: KW_ALTER
					{
					KW_ALTER377=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_privilegeType6298);  
					stream_KW_ALTER.add(KW_ALTER377);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 963:16: -> ^( TOK_PRIV_ALTER_METADATA )
					{
						// Hive.g:963:19: ^( TOK_PRIV_ALTER_METADATA )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_ALTER_METADATA, "TOK_PRIV_ALTER_METADATA"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// Hive.g:964:7: KW_UPDATE
					{
					KW_UPDATE378=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_privilegeType6312);  
					stream_KW_UPDATE.add(KW_UPDATE378);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 964:17: -> ^( TOK_PRIV_ALTER_DATA )
					{
						// Hive.g:964:20: ^( TOK_PRIV_ALTER_DATA )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_ALTER_DATA, "TOK_PRIV_ALTER_DATA"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 4 :
					// Hive.g:965:7: KW_CREATE
					{
					KW_CREATE379=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_privilegeType6326);  
					stream_KW_CREATE.add(KW_CREATE379);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 965:17: -> ^( TOK_PRIV_CREATE )
					{
						// Hive.g:965:20: ^( TOK_PRIV_CREATE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_CREATE, "TOK_PRIV_CREATE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 5 :
					// Hive.g:966:7: KW_DROP
					{
					KW_DROP380=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_privilegeType6340);  
					stream_KW_DROP.add(KW_DROP380);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 966:15: -> ^( TOK_PRIV_DROP )
					{
						// Hive.g:966:18: ^( TOK_PRIV_DROP )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_DROP, "TOK_PRIV_DROP"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 6 :
					// Hive.g:967:7: KW_INDEX
					{
					KW_INDEX381=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_privilegeType6354);  
					stream_KW_INDEX.add(KW_INDEX381);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 967:16: -> ^( TOK_PRIV_INDEX )
					{
						// Hive.g:967:19: ^( TOK_PRIV_INDEX )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_INDEX, "TOK_PRIV_INDEX"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 7 :
					// Hive.g:968:7: KW_LOCK
					{
					KW_LOCK382=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_privilegeType6368);  
					stream_KW_LOCK.add(KW_LOCK382);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 968:15: -> ^( TOK_PRIV_LOCK )
					{
						// Hive.g:968:18: ^( TOK_PRIV_LOCK )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_LOCK, "TOK_PRIV_LOCK"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 8 :
					// Hive.g:969:7: KW_SELECT
					{
					KW_SELECT383=(Token)match(input,KW_SELECT,FOLLOW_KW_SELECT_in_privilegeType6382);  
					stream_KW_SELECT.add(KW_SELECT383);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 969:17: -> ^( TOK_PRIV_SELECT )
					{
						// Hive.g:969:20: ^( TOK_PRIV_SELECT )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_SELECT, "TOK_PRIV_SELECT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 9 :
					// Hive.g:970:7: KW_SHOW_DATABASE
					{
					KW_SHOW_DATABASE384=(Token)match(input,KW_SHOW_DATABASE,FOLLOW_KW_SHOW_DATABASE_in_privilegeType6396);  
					stream_KW_SHOW_DATABASE.add(KW_SHOW_DATABASE384);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 970:24: -> ^( TOK_PRIV_SHOW_DATABASE )
					{
						// Hive.g:970:27: ^( TOK_PRIV_SHOW_DATABASE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_SHOW_DATABASE, "TOK_PRIV_SHOW_DATABASE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeType"


	public static class principalSpecification_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "principalSpecification"
	// Hive.g:973:1: principalSpecification : principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) ;
	public final HiveParser.principalSpecification_return principalSpecification() throws RecognitionException {
		HiveParser.principalSpecification_return retval = new HiveParser.principalSpecification_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA386=null;
		ParserRuleReturnScope principalName385 =null;
		ParserRuleReturnScope principalName387 =null;

		CommonTree COMMA386_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		 msgs.push("user/group/role name list"); 
		try {
			// Hive.g:976:5: ( principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) )
			// Hive.g:976:7: principalName ( COMMA principalName )*
			{
			pushFollow(FOLLOW_principalName_in_principalSpecification6429);
			principalName385=principalName();
			state._fsp--;

			stream_principalName.add(principalName385.getTree());
			// Hive.g:976:21: ( COMMA principalName )*
			loop115:
			while (true) {
				int alt115=2;
				int LA115_0 = input.LA(1);
				if ( (LA115_0==COMMA) ) {
					alt115=1;
				}

				switch (alt115) {
				case 1 :
					// Hive.g:976:22: COMMA principalName
					{
					COMMA386=(Token)match(input,COMMA,FOLLOW_COMMA_in_principalSpecification6432);  
					stream_COMMA.add(COMMA386);

					pushFollow(FOLLOW_principalName_in_principalSpecification6434);
					principalName387=principalName();
					state._fsp--;

					stream_principalName.add(principalName387.getTree());
					}
					break;

				default :
					break loop115;
				}
			}

			// AST REWRITE
			// elements: principalName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 976:44: -> ^( TOK_PRINCIPAL_NAME ( principalName )+ )
			{
				// Hive.g:976:47: ^( TOK_PRINCIPAL_NAME ( principalName )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRINCIPAL_NAME, "TOK_PRINCIPAL_NAME"), root_1);
				if ( !(stream_principalName.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_principalName.hasNext() ) {
					adaptor.addChild(root_1, stream_principalName.nextTree());
				}
				stream_principalName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "principalSpecification"


	public static class principalName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "principalName"
	// Hive.g:979:1: principalName : ( kwUser Identifier -> ^( TOK_USER Identifier ) | KW_GROUP Identifier -> ^( TOK_GROUP Identifier ) | kwRole Identifier -> ^( TOK_ROLE Identifier ) );
	public final HiveParser.principalName_return principalName() throws RecognitionException {
		HiveParser.principalName_return retval = new HiveParser.principalName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier389=null;
		Token KW_GROUP390=null;
		Token Identifier391=null;
		Token Identifier393=null;
		ParserRuleReturnScope kwUser388 =null;
		ParserRuleReturnScope kwRole392 =null;

		CommonTree Identifier389_tree=null;
		CommonTree KW_GROUP390_tree=null;
		CommonTree Identifier391_tree=null;
		CommonTree Identifier393_tree=null;
		RewriteRuleTokenStream stream_KW_GROUP=new RewriteRuleTokenStream(adaptor,"token KW_GROUP");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
		RewriteRuleSubtreeStream stream_kwUser=new RewriteRuleSubtreeStream(adaptor,"rule kwUser");

		msgs.push("user|group|role name");
		try {
			// Hive.g:982:5: ( kwUser Identifier -> ^( TOK_USER Identifier ) | KW_GROUP Identifier -> ^( TOK_GROUP Identifier ) | kwRole Identifier -> ^( TOK_ROLE Identifier ) )
			int alt116=3;
			int LA116_0 = input.LA(1);
			if ( (LA116_0==Identifier) ) {
				int LA116_1 = input.LA(2);
				if ( (LA116_1==Identifier) ) {
					int LA116_3 = input.LA(3);
					if ( ((input.LT(1).getText().equalsIgnoreCase("user"))) ) {
						alt116=1;
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("role"))) ) {
						alt116=3;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 116, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 116, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA116_0==KW_GROUP) ) {
				alt116=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 116, 0, input);
				throw nvae;
			}

			switch (alt116) {
				case 1 :
					// Hive.g:982:7: kwUser Identifier
					{
					pushFollow(FOLLOW_kwUser_in_principalName6472);
					kwUser388=kwUser();
					state._fsp--;

					stream_kwUser.add(kwUser388.getTree());
					Identifier389=(Token)match(input,Identifier,FOLLOW_Identifier_in_principalName6474);  
					stream_Identifier.add(Identifier389);

					// AST REWRITE
					// elements: Identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 982:25: -> ^( TOK_USER Identifier )
					{
						// Hive.g:982:28: ^( TOK_USER Identifier )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_USER, "TOK_USER"), root_1);
						adaptor.addChild(root_1, stream_Identifier.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:983:7: KW_GROUP Identifier
					{
					KW_GROUP390=(Token)match(input,KW_GROUP,FOLLOW_KW_GROUP_in_principalName6490);  
					stream_KW_GROUP.add(KW_GROUP390);

					Identifier391=(Token)match(input,Identifier,FOLLOW_Identifier_in_principalName6492);  
					stream_Identifier.add(Identifier391);

					// AST REWRITE
					// elements: Identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 983:27: -> ^( TOK_GROUP Identifier )
					{
						// Hive.g:983:30: ^( TOK_GROUP Identifier )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GROUP, "TOK_GROUP"), root_1);
						adaptor.addChild(root_1, stream_Identifier.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// Hive.g:984:7: kwRole Identifier
					{
					pushFollow(FOLLOW_kwRole_in_principalName6508);
					kwRole392=kwRole();
					state._fsp--;

					stream_kwRole.add(kwRole392.getTree());
					Identifier393=(Token)match(input,Identifier,FOLLOW_Identifier_in_principalName6510);  
					stream_Identifier.add(Identifier393);

					// AST REWRITE
					// elements: Identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 984:25: -> ^( TOK_ROLE Identifier )
					{
						// Hive.g:984:28: ^( TOK_ROLE Identifier )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ROLE, "TOK_ROLE"), root_1);
						adaptor.addChild(root_1, stream_Identifier.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "principalName"


	public static class withOption_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "withOption"
	// Hive.g:987:1: withOption : KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) ;
	public final HiveParser.withOption_return withOption() throws RecognitionException {
		HiveParser.withOption_return retval = new HiveParser.withOption_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_GRANT394=null;
		Token KW_OPTION395=null;

		CommonTree KW_GRANT394_tree=null;
		CommonTree KW_OPTION395_tree=null;
		RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");

		msgs.push("grant with option");
		try {
			// Hive.g:990:5: ( KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) )
			// Hive.g:990:7: KW_GRANT KW_OPTION
			{
			KW_GRANT394=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_withOption6545);  
			stream_KW_GRANT.add(KW_GRANT394);

			KW_OPTION395=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withOption6547);  
			stream_KW_OPTION.add(KW_OPTION395);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 991:5: -> ^( TOK_GRANT_WITH_OPTION )
			{
				// Hive.g:991:8: ^( TOK_GRANT_WITH_OPTION )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GRANT_WITH_OPTION, "TOK_GRANT_WITH_OPTION"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "withOption"


	public static class metastoreCheck_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "metastoreCheck"
	// Hive.g:994:1: metastoreCheck : KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? ) ;
	public final HiveParser.metastoreCheck_return metastoreCheck() throws RecognitionException {
		HiveParser.metastoreCheck_return retval = new HiveParser.metastoreCheck_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token repair=null;
		Token table=null;
		Token KW_MSCK396=null;
		Token KW_TABLE397=null;
		Token COMMA399=null;
		ParserRuleReturnScope partitionSpec398 =null;
		ParserRuleReturnScope partitionSpec400 =null;

		CommonTree repair_tree=null;
		CommonTree table_tree=null;
		CommonTree KW_MSCK396_tree=null;
		CommonTree KW_TABLE397_tree=null;
		CommonTree COMMA399_tree=null;
		RewriteRuleTokenStream stream_KW_MSCK=new RewriteRuleTokenStream(adaptor,"token KW_MSCK");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_REPAIR=new RewriteRuleTokenStream(adaptor,"token KW_REPAIR");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 msgs.push("metastore check statement"); 
		try {
			// Hive.g:997:5: ( KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? ) )
			// Hive.g:997:7: KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )?
			{
			KW_MSCK396=(Token)match(input,KW_MSCK,FOLLOW_KW_MSCK_in_metastoreCheck6584);  
			stream_KW_MSCK.add(KW_MSCK396);

			// Hive.g:997:15: (repair= KW_REPAIR )?
			int alt117=2;
			int LA117_0 = input.LA(1);
			if ( (LA117_0==KW_REPAIR) ) {
				alt117=1;
			}
			switch (alt117) {
				case 1 :
					// Hive.g:997:16: repair= KW_REPAIR
					{
					repair=(Token)match(input,KW_REPAIR,FOLLOW_KW_REPAIR_in_metastoreCheck6589);  
					stream_KW_REPAIR.add(repair);

					}
					break;

			}

			// Hive.g:997:35: ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )?
			int alt120=2;
			int LA120_0 = input.LA(1);
			if ( (LA120_0==KW_TABLE) ) {
				alt120=1;
			}
			switch (alt120) {
				case 1 :
					// Hive.g:997:36: KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )*
					{
					KW_TABLE397=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_metastoreCheck6594);  
					stream_KW_TABLE.add(KW_TABLE397);

					table=(Token)match(input,Identifier,FOLLOW_Identifier_in_metastoreCheck6598);  
					stream_Identifier.add(table);

					// Hive.g:997:62: ( partitionSpec )?
					int alt118=2;
					int LA118_0 = input.LA(1);
					if ( (LA118_0==KW_PARTITION) ) {
						alt118=1;
					}
					switch (alt118) {
						case 1 :
							// Hive.g:997:62: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_metastoreCheck6600);
							partitionSpec398=partitionSpec();
							state._fsp--;

							stream_partitionSpec.add(partitionSpec398.getTree());
							}
							break;

					}

					// Hive.g:997:77: ( COMMA partitionSpec )*
					loop119:
					while (true) {
						int alt119=2;
						int LA119_0 = input.LA(1);
						if ( (LA119_0==COMMA) ) {
							alt119=1;
						}

						switch (alt119) {
						case 1 :
							// Hive.g:997:78: COMMA partitionSpec
							{
							COMMA399=(Token)match(input,COMMA,FOLLOW_COMMA_in_metastoreCheck6604);  
							stream_COMMA.add(COMMA399);

							pushFollow(FOLLOW_partitionSpec_in_metastoreCheck6606);
							partitionSpec400=partitionSpec();
							state._fsp--;

							stream_partitionSpec.add(partitionSpec400.getTree());
							}
							break;

						default :
							break loop119;
						}
					}

					}
					break;

			}

			// AST REWRITE
			// elements: partitionSpec, table, repair
			// token labels: repair, table
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_repair=new RewriteRuleTokenStream(adaptor,"token repair",repair);
			RewriteRuleTokenStream stream_table=new RewriteRuleTokenStream(adaptor,"token table",table);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 998:5: -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? )
			{
				// Hive.g:998:8: ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_MSCK, "TOK_MSCK"), root_1);
				// Hive.g:998:20: ( $repair)?
				if ( stream_repair.hasNext() ) {
					adaptor.addChild(root_1, stream_repair.nextNode());
				}
				stream_repair.reset();

				// Hive.g:998:28: ( $table ( partitionSpec )* )?
				if ( stream_partitionSpec.hasNext()||stream_table.hasNext() ) {
					adaptor.addChild(root_1, stream_table.nextNode());
					// Hive.g:998:36: ( partitionSpec )*
					while ( stream_partitionSpec.hasNext() ) {
						adaptor.addChild(root_1, stream_partitionSpec.nextTree());
					}
					stream_partitionSpec.reset();

				}
				stream_partitionSpec.reset();
				stream_table.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "metastoreCheck"


	public static class createFunctionStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createFunctionStatement"
	// Hive.g:1001:1: createFunctionStatement : KW_CREATE KW_TEMPORARY KW_FUNCTION Identifier KW_AS StringLiteral -> ^( TOK_CREATEFUNCTION Identifier StringLiteral ) ;
	public final HiveParser.createFunctionStatement_return createFunctionStatement() throws RecognitionException {
		HiveParser.createFunctionStatement_return retval = new HiveParser.createFunctionStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CREATE401=null;
		Token KW_TEMPORARY402=null;
		Token KW_FUNCTION403=null;
		Token Identifier404=null;
		Token KW_AS405=null;
		Token StringLiteral406=null;

		CommonTree KW_CREATE401_tree=null;
		CommonTree KW_TEMPORARY402_tree=null;
		CommonTree KW_FUNCTION403_tree=null;
		CommonTree Identifier404_tree=null;
		CommonTree KW_AS405_tree=null;
		CommonTree StringLiteral406_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

		 msgs.push("create function statement"); 
		try {
			// Hive.g:1004:5: ( KW_CREATE KW_TEMPORARY KW_FUNCTION Identifier KW_AS StringLiteral -> ^( TOK_CREATEFUNCTION Identifier StringLiteral ) )
			// Hive.g:1004:7: KW_CREATE KW_TEMPORARY KW_FUNCTION Identifier KW_AS StringLiteral
			{
			KW_CREATE401=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createFunctionStatement6660);  
			stream_KW_CREATE.add(KW_CREATE401);

			KW_TEMPORARY402=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createFunctionStatement6662);  
			stream_KW_TEMPORARY.add(KW_TEMPORARY402);

			KW_FUNCTION403=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_createFunctionStatement6664);  
			stream_KW_FUNCTION.add(KW_FUNCTION403);

			Identifier404=(Token)match(input,Identifier,FOLLOW_Identifier_in_createFunctionStatement6666);  
			stream_Identifier.add(Identifier404);

			KW_AS405=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createFunctionStatement6668);  
			stream_KW_AS.add(KW_AS405);

			StringLiteral406=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_createFunctionStatement6670);  
			stream_StringLiteral.add(StringLiteral406);

			// AST REWRITE
			// elements: StringLiteral, Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1005:5: -> ^( TOK_CREATEFUNCTION Identifier StringLiteral )
			{
				// Hive.g:1005:8: ^( TOK_CREATEFUNCTION Identifier StringLiteral )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				adaptor.addChild(root_1, stream_StringLiteral.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createFunctionStatement"


	public static class dropFunctionStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropFunctionStatement"
	// Hive.g:1008:1: dropFunctionStatement : KW_DROP KW_TEMPORARY KW_FUNCTION ( ifExists )? Identifier -> ^( TOK_DROPFUNCTION Identifier ( ifExists )? ) ;
	public final HiveParser.dropFunctionStatement_return dropFunctionStatement() throws RecognitionException {
		HiveParser.dropFunctionStatement_return retval = new HiveParser.dropFunctionStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP407=null;
		Token KW_TEMPORARY408=null;
		Token KW_FUNCTION409=null;
		Token Identifier411=null;
		ParserRuleReturnScope ifExists410 =null;

		CommonTree KW_DROP407_tree=null;
		CommonTree KW_TEMPORARY408_tree=null;
		CommonTree KW_FUNCTION409_tree=null;
		CommonTree Identifier411_tree=null;
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 msgs.push("drop temporary function statement"); 
		try {
			// Hive.g:1011:5: ( KW_DROP KW_TEMPORARY KW_FUNCTION ( ifExists )? Identifier -> ^( TOK_DROPFUNCTION Identifier ( ifExists )? ) )
			// Hive.g:1011:7: KW_DROP KW_TEMPORARY KW_FUNCTION ( ifExists )? Identifier
			{
			KW_DROP407=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropFunctionStatement6711);  
			stream_KW_DROP.add(KW_DROP407);

			KW_TEMPORARY408=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropFunctionStatement6713);  
			stream_KW_TEMPORARY.add(KW_TEMPORARY408);

			KW_FUNCTION409=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_dropFunctionStatement6715);  
			stream_KW_FUNCTION.add(KW_FUNCTION409);

			// Hive.g:1011:40: ( ifExists )?
			int alt121=2;
			int LA121_0 = input.LA(1);
			if ( (LA121_0==KW_IF) ) {
				alt121=1;
			}
			switch (alt121) {
				case 1 :
					// Hive.g:1011:40: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropFunctionStatement6717);
					ifExists410=ifExists();
					state._fsp--;

					stream_ifExists.add(ifExists410.getTree());
					}
					break;

			}

			Identifier411=(Token)match(input,Identifier,FOLLOW_Identifier_in_dropFunctionStatement6720);  
			stream_Identifier.add(Identifier411);

			// AST REWRITE
			// elements: Identifier, ifExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1012:5: -> ^( TOK_DROPFUNCTION Identifier ( ifExists )? )
			{
				// Hive.g:1012:8: ^( TOK_DROPFUNCTION Identifier ( ifExists )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// Hive.g:1012:38: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropFunctionStatement"


	public static class createViewStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createViewStatement"
	// Hive.g:1015:1: createViewStatement : KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatement -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement ) ;
	public final HiveParser.createViewStatement_return createViewStatement() throws RecognitionException {
		HiveParser.createViewStatement_return retval = new HiveParser.createViewStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CREATE412=null;
		Token KW_VIEW414=null;
		Token LPAREN416=null;
		Token RPAREN418=null;
		Token KW_AS422=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope orReplace413 =null;
		ParserRuleReturnScope ifNotExists415 =null;
		ParserRuleReturnScope columnNameCommentList417 =null;
		ParserRuleReturnScope tableComment419 =null;
		ParserRuleReturnScope viewPartition420 =null;
		ParserRuleReturnScope tablePropertiesPrefixed421 =null;
		ParserRuleReturnScope selectStatement423 =null;

		CommonTree KW_CREATE412_tree=null;
		CommonTree KW_VIEW414_tree=null;
		CommonTree LPAREN416_tree=null;
		CommonTree RPAREN418_tree=null;
		CommonTree KW_AS422_tree=null;
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
		RewriteRuleSubtreeStream stream_columnNameCommentList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameCommentList");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_orReplace=new RewriteRuleSubtreeStream(adaptor,"rule orReplace");
		RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_viewPartition=new RewriteRuleSubtreeStream(adaptor,"rule viewPartition");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");


		    msgs.push("create view statement");

		try {
			// Hive.g:1020:5: ( KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatement -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement ) )
			// Hive.g:1020:7: KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatement
			{
			KW_CREATE412=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createViewStatement6762);  
			stream_KW_CREATE.add(KW_CREATE412);

			// Hive.g:1020:17: ( orReplace )?
			int alt122=2;
			int LA122_0 = input.LA(1);
			if ( (LA122_0==KW_OR) ) {
				alt122=1;
			}
			switch (alt122) {
				case 1 :
					// Hive.g:1020:18: orReplace
					{
					pushFollow(FOLLOW_orReplace_in_createViewStatement6765);
					orReplace413=orReplace();
					state._fsp--;

					stream_orReplace.add(orReplace413.getTree());
					}
					break;

			}

			KW_VIEW414=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_createViewStatement6769);  
			stream_KW_VIEW.add(KW_VIEW414);

			// Hive.g:1020:38: ( ifNotExists )?
			int alt123=2;
			int LA123_0 = input.LA(1);
			if ( (LA123_0==KW_IF) ) {
				alt123=1;
			}
			switch (alt123) {
				case 1 :
					// Hive.g:1020:39: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createViewStatement6772);
					ifNotExists415=ifNotExists();
					state._fsp--;

					stream_ifNotExists.add(ifNotExists415.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_createViewStatement6778);
			name=tableName();
			state._fsp--;

			stream_tableName.add(name.getTree());
			// Hive.g:1021:9: ( LPAREN columnNameCommentList RPAREN )?
			int alt124=2;
			int LA124_0 = input.LA(1);
			if ( (LA124_0==LPAREN) ) {
				alt124=1;
			}
			switch (alt124) {
				case 1 :
					// Hive.g:1021:10: LPAREN columnNameCommentList RPAREN
					{
					LPAREN416=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createViewStatement6789);  
					stream_LPAREN.add(LPAREN416);

					pushFollow(FOLLOW_columnNameCommentList_in_createViewStatement6791);
					columnNameCommentList417=columnNameCommentList();
					state._fsp--;

					stream_columnNameCommentList.add(columnNameCommentList417.getTree());
					RPAREN418=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createViewStatement6793);  
					stream_RPAREN.add(RPAREN418);

					}
					break;

			}

			// Hive.g:1021:48: ( tableComment )?
			int alt125=2;
			int LA125_0 = input.LA(1);
			if ( (LA125_0==KW_COMMENT) ) {
				alt125=1;
			}
			switch (alt125) {
				case 1 :
					// Hive.g:1021:48: tableComment
					{
					pushFollow(FOLLOW_tableComment_in_createViewStatement6797);
					tableComment419=tableComment();
					state._fsp--;

					stream_tableComment.add(tableComment419.getTree());
					}
					break;

			}

			// Hive.g:1021:62: ( viewPartition )?
			int alt126=2;
			int LA126_0 = input.LA(1);
			if ( (LA126_0==KW_PARTITIONED) ) {
				alt126=1;
			}
			switch (alt126) {
				case 1 :
					// Hive.g:1021:62: viewPartition
					{
					pushFollow(FOLLOW_viewPartition_in_createViewStatement6800);
					viewPartition420=viewPartition();
					state._fsp--;

					stream_viewPartition.add(viewPartition420.getTree());
					}
					break;

			}

			// Hive.g:1022:9: ( tablePropertiesPrefixed )?
			int alt127=2;
			int LA127_0 = input.LA(1);
			if ( (LA127_0==KW_TBLPROPERTIES) ) {
				alt127=1;
			}
			switch (alt127) {
				case 1 :
					// Hive.g:1022:9: tablePropertiesPrefixed
					{
					pushFollow(FOLLOW_tablePropertiesPrefixed_in_createViewStatement6811);
					tablePropertiesPrefixed421=tablePropertiesPrefixed();
					state._fsp--;

					stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed421.getTree());
					}
					break;

			}

			KW_AS422=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createViewStatement6822);  
			stream_KW_AS.add(KW_AS422);

			pushFollow(FOLLOW_selectStatement_in_createViewStatement6832);
			selectStatement423=selectStatement();
			state._fsp--;

			stream_selectStatement.add(selectStatement423.getTree());
			// AST REWRITE
			// elements: name, ifNotExists, orReplace, tableComment, tablePropertiesPrefixed, selectStatement, viewPartition, columnNameCommentList
			// token labels: 
			// rule labels: retval, name
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1025:5: -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement )
			{
				// Hive.g:1025:8: ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEVIEW, "TOK_CREATEVIEW"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// Hive.g:1025:31: ( orReplace )?
				if ( stream_orReplace.hasNext() ) {
					adaptor.addChild(root_1, stream_orReplace.nextTree());
				}
				stream_orReplace.reset();

				// Hive.g:1026:10: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// Hive.g:1027:10: ( columnNameCommentList )?
				if ( stream_columnNameCommentList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameCommentList.nextTree());
				}
				stream_columnNameCommentList.reset();

				// Hive.g:1028:10: ( tableComment )?
				if ( stream_tableComment.hasNext() ) {
					adaptor.addChild(root_1, stream_tableComment.nextTree());
				}
				stream_tableComment.reset();

				// Hive.g:1029:10: ( viewPartition )?
				if ( stream_viewPartition.hasNext() ) {
					adaptor.addChild(root_1, stream_viewPartition.nextTree());
				}
				stream_viewPartition.reset();

				// Hive.g:1030:10: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				adaptor.addChild(root_1, stream_selectStatement.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createViewStatement"


	public static class viewPartition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "viewPartition"
	// Hive.g:1035:1: viewPartition : KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) ;
	public final HiveParser.viewPartition_return viewPartition() throws RecognitionException {
		HiveParser.viewPartition_return retval = new HiveParser.viewPartition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_PARTITIONED424=null;
		Token KW_ON425=null;
		Token LPAREN426=null;
		Token RPAREN428=null;
		ParserRuleReturnScope columnNameList427 =null;

		CommonTree KW_PARTITIONED424_tree=null;
		CommonTree KW_ON425_tree=null;
		CommonTree LPAREN426_tree=null;
		CommonTree RPAREN428_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 msgs.push("view partition specification"); 
		try {
			// Hive.g:1038:5: ( KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) )
			// Hive.g:1038:7: KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN
			{
			KW_PARTITIONED424=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_viewPartition6955);  
			stream_KW_PARTITIONED.add(KW_PARTITIONED424);

			KW_ON425=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_viewPartition6957);  
			stream_KW_ON.add(KW_ON425);

			LPAREN426=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewPartition6959);  
			stream_LPAREN.add(LPAREN426);

			pushFollow(FOLLOW_columnNameList_in_viewPartition6961);
			columnNameList427=columnNameList();
			state._fsp--;

			stream_columnNameList.add(columnNameList427.getTree());
			RPAREN428=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewPartition6963);  
			stream_RPAREN.add(RPAREN428);

			// AST REWRITE
			// elements: columnNameList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1039:5: -> ^( TOK_VIEWPARTCOLS columnNameList )
			{
				// Hive.g:1039:8: ^( TOK_VIEWPARTCOLS columnNameList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_VIEWPARTCOLS, "TOK_VIEWPARTCOLS"), root_1);
				adaptor.addChild(root_1, stream_columnNameList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "viewPartition"


	public static class dropViewStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropViewStatement"
	// Hive.g:1042:1: dropViewStatement : KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) ;
	public final HiveParser.dropViewStatement_return dropViewStatement() throws RecognitionException {
		HiveParser.dropViewStatement_return retval = new HiveParser.dropViewStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP429=null;
		Token KW_VIEW430=null;
		ParserRuleReturnScope ifExists431 =null;
		ParserRuleReturnScope viewName432 =null;

		CommonTree KW_DROP429_tree=null;
		CommonTree KW_VIEW430_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleSubtreeStream stream_viewName=new RewriteRuleSubtreeStream(adaptor,"rule viewName");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 msgs.push("drop view statement"); 
		try {
			// Hive.g:1045:5: ( KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) )
			// Hive.g:1045:7: KW_DROP KW_VIEW ( ifExists )? viewName
			{
			KW_DROP429=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropViewStatement7002);  
			stream_KW_DROP.add(KW_DROP429);

			KW_VIEW430=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_dropViewStatement7004);  
			stream_KW_VIEW.add(KW_VIEW430);

			// Hive.g:1045:23: ( ifExists )?
			int alt128=2;
			int LA128_0 = input.LA(1);
			if ( (LA128_0==KW_IF) ) {
				alt128=1;
			}
			switch (alt128) {
				case 1 :
					// Hive.g:1045:23: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropViewStatement7006);
					ifExists431=ifExists();
					state._fsp--;

					stream_ifExists.add(ifExists431.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_viewName_in_dropViewStatement7009);
			viewName432=viewName();
			state._fsp--;

			stream_viewName.add(viewName432.getTree());
			// AST REWRITE
			// elements: viewName, ifExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1045:42: -> ^( TOK_DROPVIEW viewName ( ifExists )? )
			{
				// Hive.g:1045:45: ^( TOK_DROPVIEW viewName ( ifExists )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPVIEW, "TOK_DROPVIEW"), root_1);
				adaptor.addChild(root_1, stream_viewName.nextTree());
				// Hive.g:1045:69: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropViewStatement"


	public static class showStmtIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showStmtIdentifier"
	// Hive.g:1048:1: showStmtIdentifier : ( Identifier | StringLiteral );
	public final HiveParser.showStmtIdentifier_return showStmtIdentifier() throws RecognitionException {
		HiveParser.showStmtIdentifier_return retval = new HiveParser.showStmtIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set433=null;

		CommonTree set433_tree=null;

		 msgs.push("Identifier for show statement"); 
		try {
			// Hive.g:1051:5: ( Identifier | StringLiteral )
			// Hive.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set433=input.LT(1);
			if ( input.LA(1)==Identifier||input.LA(1)==StringLiteral ) {
				input.consume();
				adaptor.addChild(root_0, (CommonTree)adaptor.create(set433));
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showStmtIdentifier"


	public static class tableComment_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableComment"
	// Hive.g:1055:1: tableComment : KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) ;
	public final HiveParser.tableComment_return tableComment() throws RecognitionException {
		HiveParser.tableComment_return retval = new HiveParser.tableComment_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_COMMENT434=null;

		CommonTree comment_tree=null;
		CommonTree KW_COMMENT434_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

		 msgs.push("table's comment"); 
		try {
			// Hive.g:1058:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) )
			// Hive.g:1059:7: KW_COMMENT comment= StringLiteral
			{
			KW_COMMENT434=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_tableComment7088);  
			stream_KW_COMMENT.add(KW_COMMENT434);

			comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableComment7092);  
			stream_StringLiteral.add(comment);

			// AST REWRITE
			// elements: comment
			// token labels: comment
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1059:41: -> ^( TOK_TABLECOMMENT $comment)
			{
				// Hive.g:1059:44: ^( TOK_TABLECOMMENT $comment)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLECOMMENT, "TOK_TABLECOMMENT"), root_1);
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableComment"


	public static class tablePartition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tablePartition"
	// Hive.g:1062:1: tablePartition : KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) ;
	public final HiveParser.tablePartition_return tablePartition() throws RecognitionException {
		HiveParser.tablePartition_return retval = new HiveParser.tablePartition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_PARTITIONED435=null;
		Token KW_BY436=null;
		Token LPAREN437=null;
		Token RPAREN439=null;
		ParserRuleReturnScope columnNameTypeList438 =null;

		CommonTree KW_PARTITIONED435_tree=null;
		CommonTree KW_BY436_tree=null;
		CommonTree LPAREN437_tree=null;
		CommonTree RPAREN439_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");

		 msgs.push("table partition specification"); 
		try {
			// Hive.g:1065:5: ( KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) )
			// Hive.g:1065:7: KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN
			{
			KW_PARTITIONED435=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_tablePartition7129);  
			stream_KW_PARTITIONED.add(KW_PARTITIONED435);

			KW_BY436=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tablePartition7131);  
			stream_KW_BY.add(KW_BY436);

			LPAREN437=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tablePartition7133);  
			stream_LPAREN.add(LPAREN437);

			pushFollow(FOLLOW_columnNameTypeList_in_tablePartition7135);
			columnNameTypeList438=columnNameTypeList();
			state._fsp--;

			stream_columnNameTypeList.add(columnNameTypeList438.getTree());
			RPAREN439=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tablePartition7137);  
			stream_RPAREN.add(RPAREN439);

			// AST REWRITE
			// elements: columnNameTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1066:5: -> ^( TOK_TABLEPARTCOLS columnNameTypeList )
			{
				// Hive.g:1066:8: ^( TOK_TABLEPARTCOLS columnNameTypeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPARTCOLS, "TOK_TABLEPARTCOLS"), root_1);
				adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePartition"


	public static class tableBuckets_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableBuckets"
	// Hive.g:1069:1: tableBuckets : KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num) ;
	public final HiveParser.tableBuckets_return tableBuckets() throws RecognitionException {
		HiveParser.tableBuckets_return retval = new HiveParser.tableBuckets_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token num=null;
		Token KW_CLUSTERED440=null;
		Token KW_BY441=null;
		Token LPAREN442=null;
		Token RPAREN443=null;
		Token KW_SORTED444=null;
		Token KW_BY445=null;
		Token LPAREN446=null;
		Token RPAREN447=null;
		Token KW_INTO448=null;
		Token KW_BUCKETS449=null;
		ParserRuleReturnScope bucketCols =null;
		ParserRuleReturnScope sortCols =null;

		CommonTree num_tree=null;
		CommonTree KW_CLUSTERED440_tree=null;
		CommonTree KW_BY441_tree=null;
		CommonTree LPAREN442_tree=null;
		CommonTree RPAREN443_tree=null;
		CommonTree KW_SORTED444_tree=null;
		CommonTree KW_BY445_tree=null;
		CommonTree LPAREN446_tree=null;
		CommonTree RPAREN447_tree=null;
		CommonTree KW_INTO448_tree=null;
		CommonTree KW_BUCKETS449_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");
		RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_columnNameOrderList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrderList");

		 msgs.push("table buckets specification"); 
		try {
			// Hive.g:1072:5: ( KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num) )
			// Hive.g:1073:7: KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS
			{
			KW_CLUSTERED440=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_tableBuckets7182);  
			stream_KW_CLUSTERED.add(KW_CLUSTERED440);

			KW_BY441=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets7184);  
			stream_KW_BY.add(KW_BY441);

			LPAREN442=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets7186);  
			stream_LPAREN.add(LPAREN442);

			pushFollow(FOLLOW_columnNameList_in_tableBuckets7190);
			bucketCols=columnNameList();
			state._fsp--;

			stream_columnNameList.add(bucketCols.getTree());
			RPAREN443=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets7192);  
			stream_RPAREN.add(RPAREN443);

			// Hive.g:1073:66: ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )?
			int alt129=2;
			int LA129_0 = input.LA(1);
			if ( (LA129_0==KW_SORTED) ) {
				alt129=1;
			}
			switch (alt129) {
				case 1 :
					// Hive.g:1073:67: KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN
					{
					KW_SORTED444=(Token)match(input,KW_SORTED,FOLLOW_KW_SORTED_in_tableBuckets7195);  
					stream_KW_SORTED.add(KW_SORTED444);

					KW_BY445=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets7197);  
					stream_KW_BY.add(KW_BY445);

					LPAREN446=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets7199);  
					stream_LPAREN.add(LPAREN446);

					pushFollow(FOLLOW_columnNameOrderList_in_tableBuckets7203);
					sortCols=columnNameOrderList();
					state._fsp--;

					stream_columnNameOrderList.add(sortCols.getTree());
					RPAREN447=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets7205);  
					stream_RPAREN.add(RPAREN447);

					}
					break;

			}

			KW_INTO448=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_tableBuckets7209);  
			stream_KW_INTO.add(KW_INTO448);

			num=(Token)match(input,Number,FOLLOW_Number_in_tableBuckets7213);  
			stream_Number.add(num);

			KW_BUCKETS449=(Token)match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_tableBuckets7215);  
			stream_KW_BUCKETS.add(KW_BUCKETS449);

			// AST REWRITE
			// elements: bucketCols, num, sortCols
			// token labels: num
			// rule labels: sortCols, retval, bucketCols
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
			RewriteRuleSubtreeStream stream_sortCols=new RewriteRuleSubtreeStream(adaptor,"rule sortCols",sortCols!=null?sortCols.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_bucketCols=new RewriteRuleSubtreeStream(adaptor,"rule bucketCols",bucketCols!=null?bucketCols.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1074:5: -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num)
			{
				// Hive.g:1074:8: ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEBUCKETS, "TOK_TABLEBUCKETS"), root_1);
				adaptor.addChild(root_1, stream_bucketCols.nextTree());
				// Hive.g:1074:40: ( $sortCols)?
				if ( stream_sortCols.hasNext() ) {
					adaptor.addChild(root_1, stream_sortCols.nextTree());
				}
				stream_sortCols.reset();

				adaptor.addChild(root_1, stream_num.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableBuckets"


	public static class rowFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "rowFormat"
	// Hive.g:1077:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );
	public final HiveParser.rowFormat_return rowFormat() throws RecognitionException {
		HiveParser.rowFormat_return retval = new HiveParser.rowFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope rowFormatSerde450 =null;
		ParserRuleReturnScope rowFormatDelimited451 =null;

		RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
		RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");

		 msgs.push("serde specification"); 
		try {
			// Hive.g:1080:5: ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) )
			int alt130=3;
			int LA130_0 = input.LA(1);
			if ( (LA130_0==KW_ROW) ) {
				int LA130_1 = input.LA(2);
				if ( (LA130_1==KW_FORMAT) ) {
					int LA130_21 = input.LA(3);
					if ( (LA130_21==KW_SERDE) ) {
						alt130=1;
					}
					else if ( (LA130_21==KW_DELIMITED) ) {
						alt130=2;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 130, 21, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 130, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA130_0==EOF||LA130_0==KW_CLUSTER||LA130_0==KW_DISTRIBUTE||LA130_0==KW_FROM||(LA130_0 >= KW_GROUP && LA130_0 <= KW_HAVING)||LA130_0==KW_INSERT||LA130_0==KW_LIMIT||LA130_0==KW_MAP||LA130_0==KW_ORDER||(LA130_0 >= KW_RECORDREADER && LA130_0 <= KW_REDUCE)||LA130_0==KW_SELECT||LA130_0==KW_SORT||LA130_0==KW_UNION||LA130_0==KW_USING||LA130_0==KW_WHERE||LA130_0==RPAREN) ) {
				alt130=3;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 130, 0, input);
				throw nvae;
			}

			switch (alt130) {
				case 1 :
					// Hive.g:1080:7: rowFormatSerde
					{
					pushFollow(FOLLOW_rowFormatSerde_in_rowFormat7262);
					rowFormatSerde450=rowFormatSerde();
					state._fsp--;

					stream_rowFormatSerde.add(rowFormatSerde450.getTree());
					// AST REWRITE
					// elements: rowFormatSerde
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1080:22: -> ^( TOK_SERDE rowFormatSerde )
					{
						// Hive.g:1080:25: ^( TOK_SERDE rowFormatSerde )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);
						adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1081:7: rowFormatDelimited
					{
					pushFollow(FOLLOW_rowFormatDelimited_in_rowFormat7278);
					rowFormatDelimited451=rowFormatDelimited();
					state._fsp--;

					stream_rowFormatDelimited.add(rowFormatDelimited451.getTree());
					// AST REWRITE
					// elements: rowFormatDelimited
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1081:26: -> ^( TOK_SERDE rowFormatDelimited )
					{
						// Hive.g:1081:29: ^( TOK_SERDE rowFormatDelimited )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);
						adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// Hive.g:1082:9: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1082:9: -> ^( TOK_SERDE )
					{
						// Hive.g:1082:12: ^( TOK_SERDE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rowFormat"


	public static class recordReader_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "recordReader"
	// Hive.g:1085:1: recordReader : ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) );
	public final HiveParser.recordReader_return recordReader() throws RecognitionException {
		HiveParser.recordReader_return retval = new HiveParser.recordReader_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RECORDREADER452=null;
		Token StringLiteral453=null;

		CommonTree KW_RECORDREADER452_tree=null;
		CommonTree StringLiteral453_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_RECORDREADER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDREADER");

		 msgs.push("record reader specification"); 
		try {
			// Hive.g:1088:5: ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) )
			int alt131=2;
			int LA131_0 = input.LA(1);
			if ( (LA131_0==KW_RECORDREADER) ) {
				alt131=1;
			}
			else if ( (LA131_0==EOF||LA131_0==KW_CLUSTER||LA131_0==KW_DISTRIBUTE||LA131_0==KW_FROM||(LA131_0 >= KW_GROUP && LA131_0 <= KW_HAVING)||LA131_0==KW_INSERT||LA131_0==KW_LIMIT||LA131_0==KW_MAP||LA131_0==KW_ORDER||LA131_0==KW_REDUCE||LA131_0==KW_SELECT||LA131_0==KW_SORT||LA131_0==KW_UNION||LA131_0==KW_WHERE||LA131_0==RPAREN) ) {
				alt131=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 131, 0, input);
				throw nvae;
			}

			switch (alt131) {
				case 1 :
					// Hive.g:1088:7: KW_RECORDREADER StringLiteral
					{
					KW_RECORDREADER452=(Token)match(input,KW_RECORDREADER,FOLLOW_KW_RECORDREADER_in_recordReader7327);  
					stream_KW_RECORDREADER.add(KW_RECORDREADER452);

					StringLiteral453=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordReader7329);  
					stream_StringLiteral.add(StringLiteral453);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1088:37: -> ^( TOK_RECORDREADER StringLiteral )
					{
						// Hive.g:1088:40: ^( TOK_RECORDREADER StringLiteral )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1089:9: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1089:9: -> ^( TOK_RECORDREADER )
					{
						// Hive.g:1089:12: ^( TOK_RECORDREADER )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "recordReader"


	public static class recordWriter_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "recordWriter"
	// Hive.g:1092:1: recordWriter : ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) );
	public final HiveParser.recordWriter_return recordWriter() throws RecognitionException {
		HiveParser.recordWriter_return retval = new HiveParser.recordWriter_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RECORDWRITER454=null;
		Token StringLiteral455=null;

		CommonTree KW_RECORDWRITER454_tree=null;
		CommonTree StringLiteral455_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_RECORDWRITER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDWRITER");

		 msgs.push("record writer specification"); 
		try {
			// Hive.g:1095:5: ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) )
			int alt132=2;
			int LA132_0 = input.LA(1);
			if ( (LA132_0==KW_RECORDWRITER) ) {
				alt132=1;
			}
			else if ( (LA132_0==KW_USING) ) {
				alt132=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 132, 0, input);
				throw nvae;
			}

			switch (alt132) {
				case 1 :
					// Hive.g:1095:7: KW_RECORDWRITER StringLiteral
					{
					KW_RECORDWRITER454=(Token)match(input,KW_RECORDWRITER,FOLLOW_KW_RECORDWRITER_in_recordWriter7378);  
					stream_KW_RECORDWRITER.add(KW_RECORDWRITER454);

					StringLiteral455=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordWriter7380);  
					stream_StringLiteral.add(StringLiteral455);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1095:37: -> ^( TOK_RECORDWRITER StringLiteral )
					{
						// Hive.g:1095:40: ^( TOK_RECORDWRITER StringLiteral )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1096:9: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1096:9: -> ^( TOK_RECORDWRITER )
					{
						// Hive.g:1096:12: ^( TOK_RECORDWRITER )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "recordWriter"


	public static class rowFormatSerde_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "rowFormatSerde"
	// Hive.g:1099:1: rowFormatSerde : KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) ;
	public final HiveParser.rowFormatSerde_return rowFormatSerde() throws RecognitionException {
		HiveParser.rowFormatSerde_return retval = new HiveParser.rowFormatSerde_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token name=null;
		Token KW_ROW456=null;
		Token KW_FORMAT457=null;
		Token KW_SERDE458=null;
		Token KW_WITH459=null;
		Token KW_SERDEPROPERTIES460=null;
		ParserRuleReturnScope serdeprops =null;

		CommonTree name_tree=null;
		CommonTree KW_ROW456_tree=null;
		CommonTree KW_FORMAT457_tree=null;
		CommonTree KW_SERDE458_tree=null;
		CommonTree KW_WITH459_tree=null;
		CommonTree KW_SERDEPROPERTIES460_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
		RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
		RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 msgs.push("serde format specification"); 
		try {
			// Hive.g:1102:5: ( KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) )
			// Hive.g:1102:7: KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
			{
			KW_ROW456=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatSerde7429);  
			stream_KW_ROW.add(KW_ROW456);

			KW_FORMAT457=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatSerde7431);  
			stream_KW_FORMAT.add(KW_FORMAT457);

			KW_SERDE458=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_rowFormatSerde7433);  
			stream_KW_SERDE.add(KW_SERDE458);

			name=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_rowFormatSerde7437);  
			stream_StringLiteral.add(name);

			// Hive.g:1102:52: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
			int alt133=2;
			int LA133_0 = input.LA(1);
			if ( (LA133_0==KW_WITH) ) {
				alt133=1;
			}
			switch (alt133) {
				case 1 :
					// Hive.g:1102:53: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
					{
					KW_WITH459=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_rowFormatSerde7440);  
					stream_KW_WITH.add(KW_WITH459);

					KW_SERDEPROPERTIES460=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde7442);  
					stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES460);

					pushFollow(FOLLOW_tableProperties_in_rowFormatSerde7446);
					serdeprops=tableProperties();
					state._fsp--;

					stream_tableProperties.add(serdeprops.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: name, serdeprops
			// token labels: name
			// rule labels: serdeprops, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1103:5: -> ^( TOK_SERDENAME $name ( $serdeprops)? )
			{
				// Hive.g:1103:8: ^( TOK_SERDENAME $name ( $serdeprops)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERDENAME, "TOK_SERDENAME"), root_1);
				adaptor.addChild(root_1, stream_name.nextNode());
				// Hive.g:1103:31: ( $serdeprops)?
				if ( stream_serdeprops.hasNext() ) {
					adaptor.addChild(root_1, stream_serdeprops.nextTree());
				}
				stream_serdeprops.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rowFormatSerde"


	public static class rowFormatDelimited_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "rowFormatDelimited"
	// Hive.g:1106:1: rowFormatDelimited : KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ) ;
	public final HiveParser.rowFormatDelimited_return rowFormatDelimited() throws RecognitionException {
		HiveParser.rowFormatDelimited_return retval = new HiveParser.rowFormatDelimited_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ROW461=null;
		Token KW_FORMAT462=null;
		Token KW_DELIMITED463=null;
		ParserRuleReturnScope tableRowFormatFieldIdentifier464 =null;
		ParserRuleReturnScope tableRowFormatCollItemsIdentifier465 =null;
		ParserRuleReturnScope tableRowFormatMapKeysIdentifier466 =null;
		ParserRuleReturnScope tableRowFormatLinesIdentifier467 =null;

		CommonTree KW_ROW461_tree=null;
		CommonTree KW_FORMAT462_tree=null;
		CommonTree KW_DELIMITED463_tree=null;
		RewriteRuleTokenStream stream_KW_DELIMITED=new RewriteRuleTokenStream(adaptor,"token KW_DELIMITED");
		RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
		RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
		RewriteRuleSubtreeStream stream_tableRowFormatMapKeysIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatMapKeysIdentifier");
		RewriteRuleSubtreeStream stream_tableRowFormatFieldIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatFieldIdentifier");
		RewriteRuleSubtreeStream stream_tableRowFormatCollItemsIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatCollItemsIdentifier");
		RewriteRuleSubtreeStream stream_tableRowFormatLinesIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatLinesIdentifier");

		 msgs.push("serde properties specification"); 
		try {
			// Hive.g:1109:5: ( KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ) )
			// Hive.g:1110:7: KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )?
			{
			KW_ROW461=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatDelimited7498);  
			stream_KW_ROW.add(KW_ROW461);

			KW_FORMAT462=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatDelimited7500);  
			stream_KW_FORMAT.add(KW_FORMAT462);

			KW_DELIMITED463=(Token)match(input,KW_DELIMITED,FOLLOW_KW_DELIMITED_in_rowFormatDelimited7502);  
			stream_KW_DELIMITED.add(KW_DELIMITED463);

			// Hive.g:1110:37: ( tableRowFormatFieldIdentifier )?
			int alt134=2;
			int LA134_0 = input.LA(1);
			if ( (LA134_0==KW_FIELDS) ) {
				alt134=1;
			}
			switch (alt134) {
				case 1 :
					// Hive.g:1110:37: tableRowFormatFieldIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited7504);
					tableRowFormatFieldIdentifier464=tableRowFormatFieldIdentifier();
					state._fsp--;

					stream_tableRowFormatFieldIdentifier.add(tableRowFormatFieldIdentifier464.getTree());
					}
					break;

			}

			// Hive.g:1110:68: ( tableRowFormatCollItemsIdentifier )?
			int alt135=2;
			int LA135_0 = input.LA(1);
			if ( (LA135_0==KW_COLLECTION) ) {
				alt135=1;
			}
			switch (alt135) {
				case 1 :
					// Hive.g:1110:68: tableRowFormatCollItemsIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited7507);
					tableRowFormatCollItemsIdentifier465=tableRowFormatCollItemsIdentifier();
					state._fsp--;

					stream_tableRowFormatCollItemsIdentifier.add(tableRowFormatCollItemsIdentifier465.getTree());
					}
					break;

			}

			// Hive.g:1110:103: ( tableRowFormatMapKeysIdentifier )?
			int alt136=2;
			int LA136_0 = input.LA(1);
			if ( (LA136_0==KW_MAP) ) {
				int LA136_1 = input.LA(2);
				if ( (LA136_1==KW_KEYS) ) {
					alt136=1;
				}
			}
			switch (alt136) {
				case 1 :
					// Hive.g:1110:103: tableRowFormatMapKeysIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited7510);
					tableRowFormatMapKeysIdentifier466=tableRowFormatMapKeysIdentifier();
					state._fsp--;

					stream_tableRowFormatMapKeysIdentifier.add(tableRowFormatMapKeysIdentifier466.getTree());
					}
					break;

			}

			// Hive.g:1110:136: ( tableRowFormatLinesIdentifier )?
			int alt137=2;
			int LA137_0 = input.LA(1);
			if ( (LA137_0==KW_LINES) ) {
				alt137=1;
			}
			switch (alt137) {
				case 1 :
					// Hive.g:1110:136: tableRowFormatLinesIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited7513);
					tableRowFormatLinesIdentifier467=tableRowFormatLinesIdentifier();
					state._fsp--;

					stream_tableRowFormatLinesIdentifier.add(tableRowFormatLinesIdentifier467.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableRowFormatLinesIdentifier, tableRowFormatMapKeysIdentifier, tableRowFormatCollItemsIdentifier, tableRowFormatFieldIdentifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1111:5: -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? )
			{
				// Hive.g:1111:8: ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERDEPROPS, "TOK_SERDEPROPS"), root_1);
				// Hive.g:1111:25: ( tableRowFormatFieldIdentifier )?
				if ( stream_tableRowFormatFieldIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatFieldIdentifier.nextTree());
				}
				stream_tableRowFormatFieldIdentifier.reset();

				// Hive.g:1111:56: ( tableRowFormatCollItemsIdentifier )?
				if ( stream_tableRowFormatCollItemsIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatCollItemsIdentifier.nextTree());
				}
				stream_tableRowFormatCollItemsIdentifier.reset();

				// Hive.g:1111:91: ( tableRowFormatMapKeysIdentifier )?
				if ( stream_tableRowFormatMapKeysIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatMapKeysIdentifier.nextTree());
				}
				stream_tableRowFormatMapKeysIdentifier.reset();

				// Hive.g:1111:124: ( tableRowFormatLinesIdentifier )?
				if ( stream_tableRowFormatLinesIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatLinesIdentifier.nextTree());
				}
				stream_tableRowFormatLinesIdentifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rowFormatDelimited"


	public static class tableRowFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormat"
	// Hive.g:1114:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );
	public final HiveParser.tableRowFormat_return tableRowFormat() throws RecognitionException {
		HiveParser.tableRowFormat_return retval = new HiveParser.tableRowFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope rowFormatDelimited468 =null;
		ParserRuleReturnScope rowFormatSerde469 =null;

		RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
		RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");

		 msgs.push("table row format specification"); 
		try {
			// Hive.g:1117:5: ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) )
			int alt138=2;
			int LA138_0 = input.LA(1);
			if ( (LA138_0==KW_ROW) ) {
				int LA138_1 = input.LA(2);
				if ( (LA138_1==KW_FORMAT) ) {
					int LA138_2 = input.LA(3);
					if ( (LA138_2==KW_DELIMITED) ) {
						alt138=1;
					}
					else if ( (LA138_2==KW_SERDE) ) {
						alt138=2;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 138, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 138, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 138, 0, input);
				throw nvae;
			}

			switch (alt138) {
				case 1 :
					// Hive.g:1118:7: rowFormatDelimited
					{
					pushFollow(FOLLOW_rowFormatDelimited_in_tableRowFormat7569);
					rowFormatDelimited468=rowFormatDelimited();
					state._fsp--;

					stream_rowFormatDelimited.add(rowFormatDelimited468.getTree());
					// AST REWRITE
					// elements: rowFormatDelimited
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1119:5: -> ^( TOK_TABLEROWFORMAT rowFormatDelimited )
					{
						// Hive.g:1119:8: ^( TOK_TABLEROWFORMAT rowFormatDelimited )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMAT, "TOK_TABLEROWFORMAT"), root_1);
						adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1120:7: rowFormatSerde
					{
					pushFollow(FOLLOW_rowFormatSerde_in_tableRowFormat7589);
					rowFormatSerde469=rowFormatSerde();
					state._fsp--;

					stream_rowFormatSerde.add(rowFormatSerde469.getTree());
					// AST REWRITE
					// elements: rowFormatSerde
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1121:5: -> ^( TOK_TABLESERIALIZER rowFormatSerde )
					{
						// Hive.g:1121:8: ^( TOK_TABLESERIALIZER rowFormatSerde )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLESERIALIZER, "TOK_TABLESERIALIZER"), root_1);
						adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormat"


	public static class tablePropertiesPrefixed_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tablePropertiesPrefixed"
	// Hive.g:1124:1: tablePropertiesPrefixed : KW_TBLPROPERTIES ! tableProperties ;
	public final HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed() throws RecognitionException {
		HiveParser.tablePropertiesPrefixed_return retval = new HiveParser.tablePropertiesPrefixed_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_TBLPROPERTIES470=null;
		ParserRuleReturnScope tableProperties471 =null;

		CommonTree KW_TBLPROPERTIES470_tree=null;

		 msgs.push("table properties with prefix"); 
		try {
			// Hive.g:1127:5: ( KW_TBLPROPERTIES ! tableProperties )
			// Hive.g:1128:9: KW_TBLPROPERTIES ! tableProperties
			{
			root_0 = (CommonTree)adaptor.nil();


			KW_TBLPROPERTIES470=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed7636); 
			pushFollow(FOLLOW_tableProperties_in_tablePropertiesPrefixed7639);
			tableProperties471=tableProperties();
			state._fsp--;

			adaptor.addChild(root_0, tableProperties471.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePropertiesPrefixed"


	public static class tableProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableProperties"
	// Hive.g:1131:1: tableProperties : LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) ;
	public final HiveParser.tableProperties_return tableProperties() throws RecognitionException {
		HiveParser.tableProperties_return retval = new HiveParser.tableProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN472=null;
		Token RPAREN474=null;
		ParserRuleReturnScope tablePropertiesList473 =null;

		CommonTree LPAREN472_tree=null;
		CommonTree RPAREN474_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_tablePropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesList");

		 msgs.push("table properties"); 
		try {
			// Hive.g:1134:5: ( LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) )
			// Hive.g:1135:7: LPAREN tablePropertiesList RPAREN
			{
			LPAREN472=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableProperties7672);  
			stream_LPAREN.add(LPAREN472);

			pushFollow(FOLLOW_tablePropertiesList_in_tableProperties7674);
			tablePropertiesList473=tablePropertiesList();
			state._fsp--;

			stream_tablePropertiesList.add(tablePropertiesList473.getTree());
			RPAREN474=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableProperties7676);  
			stream_RPAREN.add(RPAREN474);

			// AST REWRITE
			// elements: tablePropertiesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1135:41: -> ^( TOK_TABLEPROPERTIES tablePropertiesList )
			{
				// Hive.g:1135:44: ^( TOK_TABLEPROPERTIES tablePropertiesList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPROPERTIES, "TOK_TABLEPROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_tablePropertiesList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableProperties"


	public static class tablePropertiesList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tablePropertiesList"
	// Hive.g:1138:1: tablePropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) ;
	public final HiveParser.tablePropertiesList_return tablePropertiesList() throws RecognitionException {
		HiveParser.tablePropertiesList_return retval = new HiveParser.tablePropertiesList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA476=null;
		ParserRuleReturnScope keyValueProperty475 =null;
		ParserRuleReturnScope keyValueProperty477 =null;

		CommonTree COMMA476_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");

		 msgs.push("table properties list"); 
		try {
			// Hive.g:1141:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) )
			// Hive.g:1142:7: keyValueProperty ( COMMA keyValueProperty )*
			{
			pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList7717);
			keyValueProperty475=keyValueProperty();
			state._fsp--;

			stream_keyValueProperty.add(keyValueProperty475.getTree());
			// Hive.g:1142:24: ( COMMA keyValueProperty )*
			loop139:
			while (true) {
				int alt139=2;
				int LA139_0 = input.LA(1);
				if ( (LA139_0==COMMA) ) {
					alt139=1;
				}

				switch (alt139) {
				case 1 :
					// Hive.g:1142:25: COMMA keyValueProperty
					{
					COMMA476=(Token)match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList7720);  
					stream_COMMA.add(COMMA476);

					pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList7722);
					keyValueProperty477=keyValueProperty();
					state._fsp--;

					stream_keyValueProperty.add(keyValueProperty477.getTree());
					}
					break;

				default :
					break loop139;
				}
			}

			// AST REWRITE
			// elements: keyValueProperty
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1142:50: -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
			{
				// Hive.g:1142:53: ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST"), root_1);
				if ( !(stream_keyValueProperty.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_keyValueProperty.hasNext() ) {
					adaptor.addChild(root_1, stream_keyValueProperty.nextTree());
				}
				stream_keyValueProperty.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePropertiesList"


	public static class keyValueProperty_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "keyValueProperty"
	// Hive.g:1145:1: keyValueProperty : key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) ;
	public final HiveParser.keyValueProperty_return keyValueProperty() throws RecognitionException {
		HiveParser.keyValueProperty_return retval = new HiveParser.keyValueProperty_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token key=null;
		Token value=null;
		Token EQUAL478=null;

		CommonTree key_tree=null;
		CommonTree value_tree=null;
		CommonTree EQUAL478_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");

		 msgs.push("specifying key/value property"); 
		try {
			// Hive.g:1148:5: (key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) )
			// Hive.g:1149:7: key= StringLiteral EQUAL value= StringLiteral
			{
			key=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty7768);  
			stream_StringLiteral.add(key);

			EQUAL478=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_keyValueProperty7770);  
			stream_EQUAL.add(EQUAL478);

			value=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty7774);  
			stream_StringLiteral.add(value);

			// AST REWRITE
			// elements: value, key
			// token labels: value, key
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
			RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1149:51: -> ^( TOK_TABLEPROPERTY $key $value)
			{
				// Hive.g:1149:54: ^( TOK_TABLEPROPERTY $key $value)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY"), root_1);
				adaptor.addChild(root_1, stream_key.nextNode());
				adaptor.addChild(root_1, stream_value.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "keyValueProperty"


	public static class tableRowFormatFieldIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatFieldIdentifier"
	// Hive.g:1152:1: tableRowFormatFieldIdentifier : KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) ;
	public final HiveParser.tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatFieldIdentifier_return retval = new HiveParser.tableRowFormatFieldIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token fldIdnt=null;
		Token fldEscape=null;
		Token KW_FIELDS479=null;
		Token KW_TERMINATED480=null;
		Token KW_BY481=null;
		Token KW_ESCAPED482=null;
		Token KW_BY483=null;

		CommonTree fldIdnt_tree=null;
		CommonTree fldEscape_tree=null;
		CommonTree KW_FIELDS479_tree=null;
		CommonTree KW_TERMINATED480_tree=null;
		CommonTree KW_BY481_tree=null;
		CommonTree KW_ESCAPED482_tree=null;
		CommonTree KW_BY483_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_ESCAPED=new RewriteRuleTokenStream(adaptor,"token KW_ESCAPED");
		RewriteRuleTokenStream stream_KW_FIELDS=new RewriteRuleTokenStream(adaptor,"token KW_FIELDS");
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

		 msgs.push("table row format's field separator"); 
		try {
			// Hive.g:1155:5: ( KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) )
			// Hive.g:1156:7: KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
			{
			KW_FIELDS479=(Token)match(input,KW_FIELDS,FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier7819);  
			stream_KW_FIELDS.add(KW_FIELDS479);

			KW_TERMINATED480=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier7821);  
			stream_KW_TERMINATED.add(KW_TERMINATED480);

			KW_BY481=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier7823);  
			stream_KW_BY.add(KW_BY481);

			fldIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier7827);  
			stream_StringLiteral.add(fldIdnt);

			// Hive.g:1156:59: ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
			int alt140=2;
			int LA140_0 = input.LA(1);
			if ( (LA140_0==KW_ESCAPED) ) {
				alt140=1;
			}
			switch (alt140) {
				case 1 :
					// Hive.g:1156:60: KW_ESCAPED KW_BY fldEscape= StringLiteral
					{
					KW_ESCAPED482=(Token)match(input,KW_ESCAPED,FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier7830);  
					stream_KW_ESCAPED.add(KW_ESCAPED482);

					KW_BY483=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier7832);  
					stream_KW_BY.add(KW_BY483);

					fldEscape=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier7836);  
					stream_StringLiteral.add(fldEscape);

					}
					break;

			}

			// AST REWRITE
			// elements: fldEscape, fldIdnt
			// token labels: fldEscape, fldIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_fldEscape=new RewriteRuleTokenStream(adaptor,"token fldEscape",fldEscape);
			RewriteRuleTokenStream stream_fldIdnt=new RewriteRuleTokenStream(adaptor,"token fldIdnt",fldIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1157:5: -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
			{
				// Hive.g:1157:8: ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMATFIELD, "TOK_TABLEROWFORMATFIELD"), root_1);
				adaptor.addChild(root_1, stream_fldIdnt.nextNode());
				// Hive.g:1157:44: ( $fldEscape)?
				if ( stream_fldEscape.hasNext() ) {
					adaptor.addChild(root_1, stream_fldEscape.nextNode());
				}
				stream_fldEscape.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatFieldIdentifier"


	public static class tableRowFormatCollItemsIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatCollItemsIdentifier"
	// Hive.g:1160:1: tableRowFormatCollItemsIdentifier : KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) ;
	public final HiveParser.tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatCollItemsIdentifier_return retval = new HiveParser.tableRowFormatCollItemsIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token collIdnt=null;
		Token KW_COLLECTION484=null;
		Token KW_ITEMS485=null;
		Token KW_TERMINATED486=null;
		Token KW_BY487=null;

		CommonTree collIdnt_tree=null;
		CommonTree KW_COLLECTION484_tree=null;
		CommonTree KW_ITEMS485_tree=null;
		CommonTree KW_TERMINATED486_tree=null;
		CommonTree KW_BY487_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_ITEMS=new RewriteRuleTokenStream(adaptor,"token KW_ITEMS");
		RewriteRuleTokenStream stream_KW_COLLECTION=new RewriteRuleTokenStream(adaptor,"token KW_COLLECTION");
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

		 msgs.push("table row format's column separator"); 
		try {
			// Hive.g:1163:5: ( KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) )
			// Hive.g:1164:7: KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral
			{
			KW_COLLECTION484=(Token)match(input,KW_COLLECTION,FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier7888);  
			stream_KW_COLLECTION.add(KW_COLLECTION484);

			KW_ITEMS485=(Token)match(input,KW_ITEMS,FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier7890);  
			stream_KW_ITEMS.add(KW_ITEMS485);

			KW_TERMINATED486=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier7892);  
			stream_KW_TERMINATED.add(KW_TERMINATED486);

			KW_BY487=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier7894);  
			stream_KW_BY.add(KW_BY487);

			collIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier7898);  
			stream_StringLiteral.add(collIdnt);

			// AST REWRITE
			// elements: collIdnt
			// token labels: collIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_collIdnt=new RewriteRuleTokenStream(adaptor,"token collIdnt",collIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1165:5: -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
			{
				// Hive.g:1165:8: ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMATCOLLITEMS, "TOK_TABLEROWFORMATCOLLITEMS"), root_1);
				adaptor.addChild(root_1, stream_collIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatCollItemsIdentifier"


	public static class tableRowFormatMapKeysIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatMapKeysIdentifier"
	// Hive.g:1168:1: tableRowFormatMapKeysIdentifier : KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) ;
	public final HiveParser.tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatMapKeysIdentifier_return retval = new HiveParser.tableRowFormatMapKeysIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token mapKeysIdnt=null;
		Token KW_MAP488=null;
		Token KW_KEYS489=null;
		Token KW_TERMINATED490=null;
		Token KW_BY491=null;

		CommonTree mapKeysIdnt_tree=null;
		CommonTree KW_MAP488_tree=null;
		CommonTree KW_KEYS489_tree=null;
		CommonTree KW_TERMINATED490_tree=null;
		CommonTree KW_BY491_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_KEYS=new RewriteRuleTokenStream(adaptor,"token KW_KEYS");
		RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

		 msgs.push("table row format's map key separator"); 
		try {
			// Hive.g:1171:5: ( KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) )
			// Hive.g:1172:7: KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral
			{
			KW_MAP488=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier7944);  
			stream_KW_MAP.add(KW_MAP488);

			KW_KEYS489=(Token)match(input,KW_KEYS,FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier7946);  
			stream_KW_KEYS.add(KW_KEYS489);

			KW_TERMINATED490=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier7948);  
			stream_KW_TERMINATED.add(KW_TERMINATED490);

			KW_BY491=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier7950);  
			stream_KW_BY.add(KW_BY491);

			mapKeysIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier7954);  
			stream_StringLiteral.add(mapKeysIdnt);

			// AST REWRITE
			// elements: mapKeysIdnt
			// token labels: mapKeysIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_mapKeysIdnt=new RewriteRuleTokenStream(adaptor,"token mapKeysIdnt",mapKeysIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1173:5: -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
			{
				// Hive.g:1173:8: ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMATMAPKEYS, "TOK_TABLEROWFORMATMAPKEYS"), root_1);
				adaptor.addChild(root_1, stream_mapKeysIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatMapKeysIdentifier"


	public static class tableRowFormatLinesIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatLinesIdentifier"
	// Hive.g:1176:1: tableRowFormatLinesIdentifier : KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) ;
	public final HiveParser.tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatLinesIdentifier_return retval = new HiveParser.tableRowFormatLinesIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token linesIdnt=null;
		Token KW_LINES492=null;
		Token KW_TERMINATED493=null;
		Token KW_BY494=null;

		CommonTree linesIdnt_tree=null;
		CommonTree KW_LINES492_tree=null;
		CommonTree KW_TERMINATED493_tree=null;
		CommonTree KW_BY494_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LINES=new RewriteRuleTokenStream(adaptor,"token KW_LINES");
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

		 msgs.push("table row format's line separator"); 
		try {
			// Hive.g:1179:5: ( KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) )
			// Hive.g:1180:7: KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral
			{
			KW_LINES492=(Token)match(input,KW_LINES,FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier8000);  
			stream_KW_LINES.add(KW_LINES492);

			KW_TERMINATED493=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier8002);  
			stream_KW_TERMINATED.add(KW_TERMINATED493);

			KW_BY494=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier8004);  
			stream_KW_BY.add(KW_BY494);

			linesIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier8008);  
			stream_StringLiteral.add(linesIdnt);

			// AST REWRITE
			// elements: linesIdnt
			// token labels: linesIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_linesIdnt=new RewriteRuleTokenStream(adaptor,"token linesIdnt",linesIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1181:5: -> ^( TOK_TABLEROWFORMATLINES $linesIdnt)
			{
				// Hive.g:1181:8: ^( TOK_TABLEROWFORMATLINES $linesIdnt)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMATLINES, "TOK_TABLEROWFORMATLINES"), root_1);
				adaptor.addChild(root_1, stream_linesIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatLinesIdentifier"


	public static class tableFileFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableFileFormat"
	// Hive.g:1184:1: tableFileFormat : ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
	public final HiveParser.tableFileFormat_return tableFileFormat() throws RecognitionException {
		HiveParser.tableFileFormat_return retval = new HiveParser.tableFileFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token inFmt=null;
		Token outFmt=null;
		Token inDriver=null;
		Token outDriver=null;
		Token storageHandler=null;
		Token genericSpec=null;
		Token KW_STORED495=null;
		Token KW_AS496=null;
		Token KW_SEQUENCEFILE497=null;
		Token KW_STORED498=null;
		Token KW_AS499=null;
		Token KW_TEXTFILE500=null;
		Token KW_STORED501=null;
		Token KW_AS502=null;
		Token KW_RCFILE503=null;
		Token KW_STORED504=null;
		Token KW_AS505=null;
		Token KW_INPUTFORMAT506=null;
		Token KW_OUTPUTFORMAT507=null;
		Token KW_INPUTDRIVER508=null;
		Token KW_OUTPUTDRIVER509=null;
		Token KW_STORED510=null;
		Token KW_BY511=null;
		Token KW_WITH512=null;
		Token KW_SERDEPROPERTIES513=null;
		Token KW_STORED514=null;
		Token KW_AS515=null;
		ParserRuleReturnScope serdeprops =null;

		CommonTree inFmt_tree=null;
		CommonTree outFmt_tree=null;
		CommonTree inDriver_tree=null;
		CommonTree outDriver_tree=null;
		CommonTree storageHandler_tree=null;
		CommonTree genericSpec_tree=null;
		CommonTree KW_STORED495_tree=null;
		CommonTree KW_AS496_tree=null;
		CommonTree KW_SEQUENCEFILE497_tree=null;
		CommonTree KW_STORED498_tree=null;
		CommonTree KW_AS499_tree=null;
		CommonTree KW_TEXTFILE500_tree=null;
		CommonTree KW_STORED501_tree=null;
		CommonTree KW_AS502_tree=null;
		CommonTree KW_RCFILE503_tree=null;
		CommonTree KW_STORED504_tree=null;
		CommonTree KW_AS505_tree=null;
		CommonTree KW_INPUTFORMAT506_tree=null;
		CommonTree KW_OUTPUTFORMAT507_tree=null;
		CommonTree KW_INPUTDRIVER508_tree=null;
		CommonTree KW_OUTPUTDRIVER509_tree=null;
		CommonTree KW_STORED510_tree=null;
		CommonTree KW_BY511_tree=null;
		CommonTree KW_WITH512_tree=null;
		CommonTree KW_SERDEPROPERTIES513_tree=null;
		CommonTree KW_STORED514_tree=null;
		CommonTree KW_AS515_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
		RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
		RewriteRuleTokenStream stream_KW_TEXTFILE=new RewriteRuleTokenStream(adaptor,"token KW_TEXTFILE");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_RCFILE=new RewriteRuleTokenStream(adaptor,"token KW_RCFILE");
		RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
		RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");
		RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
		RewriteRuleTokenStream stream_KW_SEQUENCEFILE=new RewriteRuleTokenStream(adaptor,"token KW_SEQUENCEFILE");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 msgs.push("table file format specification"); 
		try {
			// Hive.g:1187:5: ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
			int alt143=6;
			int LA143_0 = input.LA(1);
			if ( (LA143_0==KW_STORED) ) {
				int LA143_1 = input.LA(2);
				if ( (LA143_1==KW_AS) ) {
					switch ( input.LA(3) ) {
					case KW_SEQUENCEFILE:
						{
						alt143=1;
						}
						break;
					case KW_TEXTFILE:
						{
						alt143=2;
						}
						break;
					case KW_RCFILE:
						{
						alt143=3;
						}
						break;
					case KW_INPUTFORMAT:
						{
						alt143=4;
						}
						break;
					case Identifier:
						{
						alt143=6;
						}
						break;
					default:
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 143, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
				}
				else if ( (LA143_1==KW_BY) ) {
					alt143=5;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 143, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 143, 0, input);
				throw nvae;
			}

			switch (alt143) {
				case 1 :
					// Hive.g:1188:7: KW_STORED KW_AS KW_SEQUENCEFILE
					{
					KW_STORED495=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8054);  
					stream_KW_STORED.add(KW_STORED495);

					KW_AS496=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat8056);  
					stream_KW_AS.add(KW_AS496);

					KW_SEQUENCEFILE497=(Token)match(input,KW_SEQUENCEFILE,FOLLOW_KW_SEQUENCEFILE_in_tableFileFormat8058);  
					stream_KW_SEQUENCEFILE.add(KW_SEQUENCEFILE497);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1188:40: -> TOK_TBLSEQUENCEFILE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TBLSEQUENCEFILE, "TOK_TBLSEQUENCEFILE"));
					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1189:9: KW_STORED KW_AS KW_TEXTFILE
					{
					KW_STORED498=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8073);  
					stream_KW_STORED.add(KW_STORED498);

					KW_AS499=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat8075);  
					stream_KW_AS.add(KW_AS499);

					KW_TEXTFILE500=(Token)match(input,KW_TEXTFILE,FOLLOW_KW_TEXTFILE_in_tableFileFormat8077);  
					stream_KW_TEXTFILE.add(KW_TEXTFILE500);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1189:38: -> TOK_TBLTEXTFILE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TBLTEXTFILE, "TOK_TBLTEXTFILE"));
					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// Hive.g:1190:9: KW_STORED KW_AS KW_RCFILE
					{
					KW_STORED501=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8092);  
					stream_KW_STORED.add(KW_STORED501);

					KW_AS502=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat8094);  
					stream_KW_AS.add(KW_AS502);

					KW_RCFILE503=(Token)match(input,KW_RCFILE,FOLLOW_KW_RCFILE_in_tableFileFormat8096);  
					stream_KW_RCFILE.add(KW_RCFILE503);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1190:36: -> TOK_TBLRCFILE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TBLRCFILE, "TOK_TBLRCFILE"));
					}


					retval.tree = root_0;

					}
					break;
				case 4 :
					// Hive.g:1191:9: KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					{
					KW_STORED504=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8111);  
					stream_KW_STORED.add(KW_STORED504);

					KW_AS505=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat8113);  
					stream_KW_AS.add(KW_AS505);

					KW_INPUTFORMAT506=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_tableFileFormat8115);  
					stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT506);

					inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat8119);  
					stream_StringLiteral.add(inFmt);

					KW_OUTPUTFORMAT507=(Token)match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat8121);  
					stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT507);

					outFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat8125);  
					stream_StringLiteral.add(outFmt);

					// Hive.g:1191:97: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					int alt141=2;
					int LA141_0 = input.LA(1);
					if ( (LA141_0==KW_INPUTDRIVER) ) {
						alt141=1;
					}
					switch (alt141) {
						case 1 :
							// Hive.g:1191:98: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
							{
							KW_INPUTDRIVER508=(Token)match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_tableFileFormat8128);  
							stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER508);

							inDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat8132);  
							stream_StringLiteral.add(inDriver);

							KW_OUTPUTDRIVER509=(Token)match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat8134);  
							stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER509);

							outDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat8138);  
							stream_StringLiteral.add(outDriver);

							}
							break;

					}

					// AST REWRITE
					// elements: inFmt, inDriver, outFmt, outDriver
					// token labels: outDriver, outFmt, inDriver, inFmt
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
					RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
					RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
					RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1192:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
					{
						// Hive.g:1192:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);
						adaptor.addChild(root_1, stream_inFmt.nextNode());
						adaptor.addChild(root_1, stream_outFmt.nextNode());
						// Hive.g:1192:48: ( $inDriver)?
						if ( stream_inDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_inDriver.nextNode());
						}
						stream_inDriver.reset();

						// Hive.g:1192:59: ( $outDriver)?
						if ( stream_outDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_outDriver.nextNode());
						}
						stream_outDriver.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 5 :
					// Hive.g:1193:9: KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
					{
					KW_STORED510=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8176);  
					stream_KW_STORED.add(KW_STORED510);

					KW_BY511=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableFileFormat8178);  
					stream_KW_BY.add(KW_BY511);

					storageHandler=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat8182);  
					stream_StringLiteral.add(storageHandler);

					// Hive.g:1194:10: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
					int alt142=2;
					int LA142_0 = input.LA(1);
					if ( (LA142_0==KW_WITH) ) {
						alt142=1;
					}
					switch (alt142) {
						case 1 :
							// Hive.g:1194:11: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
							{
							KW_WITH512=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_tableFileFormat8194);  
							stream_KW_WITH.add(KW_WITH512);

							KW_SERDEPROPERTIES513=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat8196);  
							stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES513);

							pushFollow(FOLLOW_tableProperties_in_tableFileFormat8200);
							serdeprops=tableProperties();
							state._fsp--;

							stream_tableProperties.add(serdeprops.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: serdeprops, storageHandler
					// token labels: storageHandler
					// rule labels: serdeprops, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_storageHandler=new RewriteRuleTokenStream(adaptor,"token storageHandler",storageHandler);
					RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1195:7: -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
					{
						// Hive.g:1195:10: ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_STORAGEHANDLER, "TOK_STORAGEHANDLER"), root_1);
						adaptor.addChild(root_1, stream_storageHandler.nextNode());
						// Hive.g:1195:48: ( $serdeprops)?
						if ( stream_serdeprops.hasNext() ) {
							adaptor.addChild(root_1, stream_serdeprops.nextTree());
						}
						stream_serdeprops.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 6 :
					// Hive.g:1196:9: KW_STORED KW_AS genericSpec= Identifier
					{
					KW_STORED514=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8231);  
					stream_KW_STORED.add(KW_STORED514);

					KW_AS515=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat8233);  
					stream_KW_AS.add(KW_AS515);

					genericSpec=(Token)match(input,Identifier,FOLLOW_Identifier_in_tableFileFormat8237);  
					stream_Identifier.add(genericSpec);

					// AST REWRITE
					// elements: genericSpec
					// token labels: genericSpec
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_genericSpec=new RewriteRuleTokenStream(adaptor,"token genericSpec",genericSpec);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1197:7: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
					{
						// Hive.g:1197:10: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC"), root_1);
						adaptor.addChild(root_1, stream_genericSpec.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableFileFormat"


	public static class tableLocation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableLocation"
	// Hive.g:1200:1: tableLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) ;
	public final HiveParser.tableLocation_return tableLocation() throws RecognitionException {
		HiveParser.tableLocation_return retval = new HiveParser.tableLocation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token locn=null;
		Token KW_LOCATION516=null;

		CommonTree locn_tree=null;
		CommonTree KW_LOCATION516_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		 msgs.push("table location specification"); 
		try {
			// Hive.g:1203:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) )
			// Hive.g:1204:7: KW_LOCATION locn= StringLiteral
			{
			KW_LOCATION516=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_tableLocation8285);  
			stream_KW_LOCATION.add(KW_LOCATION516);

			locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableLocation8289);  
			stream_StringLiteral.add(locn);

			// AST REWRITE
			// elements: locn
			// token labels: locn
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1204:38: -> ^( TOK_TABLELOCATION $locn)
			{
				// Hive.g:1204:41: ^( TOK_TABLELOCATION $locn)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLELOCATION, "TOK_TABLELOCATION"), root_1);
				adaptor.addChild(root_1, stream_locn.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableLocation"


	public static class columnNameTypeList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameTypeList"
	// Hive.g:1207:1: columnNameTypeList : columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) ;
	public final HiveParser.columnNameTypeList_return columnNameTypeList() throws RecognitionException {
		HiveParser.columnNameTypeList_return retval = new HiveParser.columnNameTypeList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA518=null;
		ParserRuleReturnScope columnNameType517 =null;
		ParserRuleReturnScope columnNameType519 =null;

		CommonTree COMMA518_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");

		 msgs.push("column name type list"); 
		try {
			// Hive.g:1210:5: ( columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) )
			// Hive.g:1210:7: columnNameType ( COMMA columnNameType )*
			{
			pushFollow(FOLLOW_columnNameType_in_columnNameTypeList8325);
			columnNameType517=columnNameType();
			state._fsp--;

			stream_columnNameType.add(columnNameType517.getTree());
			// Hive.g:1210:22: ( COMMA columnNameType )*
			loop144:
			while (true) {
				int alt144=2;
				int LA144_0 = input.LA(1);
				if ( (LA144_0==COMMA) ) {
					alt144=1;
				}

				switch (alt144) {
				case 1 :
					// Hive.g:1210:23: COMMA columnNameType
					{
					COMMA518=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameTypeList8328);  
					stream_COMMA.add(COMMA518);

					pushFollow(FOLLOW_columnNameType_in_columnNameTypeList8330);
					columnNameType519=columnNameType();
					state._fsp--;

					stream_columnNameType.add(columnNameType519.getTree());
					}
					break;

				default :
					break loop144;
				}
			}

			// AST REWRITE
			// elements: columnNameType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1210:46: -> ^( TOK_TABCOLLIST ( columnNameType )+ )
			{
				// Hive.g:1210:49: ^( TOK_TABCOLLIST ( columnNameType )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);
				if ( !(stream_columnNameType.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameType.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameType.nextTree());
				}
				stream_columnNameType.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameTypeList"


	public static class columnNameColonTypeList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameColonTypeList"
	// Hive.g:1213:1: columnNameColonTypeList : columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) ;
	public final HiveParser.columnNameColonTypeList_return columnNameColonTypeList() throws RecognitionException {
		HiveParser.columnNameColonTypeList_return retval = new HiveParser.columnNameColonTypeList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA521=null;
		ParserRuleReturnScope columnNameColonType520 =null;
		ParserRuleReturnScope columnNameColonType522 =null;

		CommonTree COMMA521_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameColonType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonType");

		 msgs.push("column name type list"); 
		try {
			// Hive.g:1216:5: ( columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) )
			// Hive.g:1216:7: columnNameColonType ( COMMA columnNameColonType )*
			{
			pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList8368);
			columnNameColonType520=columnNameColonType();
			state._fsp--;

			stream_columnNameColonType.add(columnNameColonType520.getTree());
			// Hive.g:1216:27: ( COMMA columnNameColonType )*
			loop145:
			while (true) {
				int alt145=2;
				int LA145_0 = input.LA(1);
				if ( (LA145_0==COMMA) ) {
					alt145=1;
				}

				switch (alt145) {
				case 1 :
					// Hive.g:1216:28: COMMA columnNameColonType
					{
					COMMA521=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameColonTypeList8371);  
					stream_COMMA.add(COMMA521);

					pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList8373);
					columnNameColonType522=columnNameColonType();
					state._fsp--;

					stream_columnNameColonType.add(columnNameColonType522.getTree());
					}
					break;

				default :
					break loop145;
				}
			}

			// AST REWRITE
			// elements: columnNameColonType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1216:56: -> ^( TOK_TABCOLLIST ( columnNameColonType )+ )
			{
				// Hive.g:1216:59: ^( TOK_TABCOLLIST ( columnNameColonType )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);
				if ( !(stream_columnNameColonType.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameColonType.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameColonType.nextTree());
				}
				stream_columnNameColonType.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameColonTypeList"


	public static class columnNameList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameList"
	// Hive.g:1219:1: columnNameList : columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) ;
	public final HiveParser.columnNameList_return columnNameList() throws RecognitionException {
		HiveParser.columnNameList_return retval = new HiveParser.columnNameList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA524=null;
		ParserRuleReturnScope columnName523 =null;
		ParserRuleReturnScope columnName525 =null;

		CommonTree COMMA524_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");

		 msgs.push("column name list"); 
		try {
			// Hive.g:1222:5: ( columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) )
			// Hive.g:1222:7: columnName ( COMMA columnName )*
			{
			pushFollow(FOLLOW_columnName_in_columnNameList8411);
			columnName523=columnName();
			state._fsp--;

			stream_columnName.add(columnName523.getTree());
			// Hive.g:1222:18: ( COMMA columnName )*
			loop146:
			while (true) {
				int alt146=2;
				int LA146_0 = input.LA(1);
				if ( (LA146_0==COMMA) ) {
					alt146=1;
				}

				switch (alt146) {
				case 1 :
					// Hive.g:1222:19: COMMA columnName
					{
					COMMA524=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameList8414);  
					stream_COMMA.add(COMMA524);

					pushFollow(FOLLOW_columnName_in_columnNameList8416);
					columnName525=columnName();
					state._fsp--;

					stream_columnName.add(columnName525.getTree());
					}
					break;

				default :
					break loop146;
				}
			}

			// AST REWRITE
			// elements: columnName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1222:38: -> ^( TOK_TABCOLNAME ( columnName )+ )
			{
				// Hive.g:1222:41: ^( TOK_TABCOLNAME ( columnName )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);
				if ( !(stream_columnName.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnName.hasNext() ) {
					adaptor.addChild(root_1, stream_columnName.nextTree());
				}
				stream_columnName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameList"


	public static class columnName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnName"
	// Hive.g:1225:1: columnName : Identifier ;
	public final HiveParser.columnName_return columnName() throws RecognitionException {
		HiveParser.columnName_return retval = new HiveParser.columnName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier526=null;

		CommonTree Identifier526_tree=null;

		 msgs.push("column name"); 
		try {
			// Hive.g:1228:5: ( Identifier )
			// Hive.g:1229:7: Identifier
			{
			root_0 = (CommonTree)adaptor.nil();


			Identifier526=(Token)match(input,Identifier,FOLLOW_Identifier_in_columnName8460); 
			Identifier526_tree = (CommonTree)adaptor.create(Identifier526);
			adaptor.addChild(root_0, Identifier526_tree);

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnName"


	public static class columnNameOrderList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameOrderList"
	// Hive.g:1232:1: columnNameOrderList : columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) ;
	public final HiveParser.columnNameOrderList_return columnNameOrderList() throws RecognitionException {
		HiveParser.columnNameOrderList_return retval = new HiveParser.columnNameOrderList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA528=null;
		ParserRuleReturnScope columnNameOrder527 =null;
		ParserRuleReturnScope columnNameOrder529 =null;

		CommonTree COMMA528_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrder");

		 msgs.push("column name order list"); 
		try {
			// Hive.g:1235:5: ( columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) )
			// Hive.g:1235:7: columnNameOrder ( COMMA columnNameOrder )*
			{
			pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList8487);
			columnNameOrder527=columnNameOrder();
			state._fsp--;

			stream_columnNameOrder.add(columnNameOrder527.getTree());
			// Hive.g:1235:23: ( COMMA columnNameOrder )*
			loop147:
			while (true) {
				int alt147=2;
				int LA147_0 = input.LA(1);
				if ( (LA147_0==COMMA) ) {
					alt147=1;
				}

				switch (alt147) {
				case 1 :
					// Hive.g:1235:24: COMMA columnNameOrder
					{
					COMMA528=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameOrderList8490);  
					stream_COMMA.add(COMMA528);

					pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList8492);
					columnNameOrder529=columnNameOrder();
					state._fsp--;

					stream_columnNameOrder.add(columnNameOrder529.getTree());
					}
					break;

				default :
					break loop147;
				}
			}

			// AST REWRITE
			// elements: columnNameOrder
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1235:48: -> ^( TOK_TABCOLNAME ( columnNameOrder )+ )
			{
				// Hive.g:1235:51: ^( TOK_TABCOLNAME ( columnNameOrder )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);
				if ( !(stream_columnNameOrder.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameOrder.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameOrder.nextTree());
				}
				stream_columnNameOrder.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameOrderList"


	public static class columnNameOrder_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameOrder"
	// Hive.g:1238:1: columnNameOrder : Identifier (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC Identifier ) -> ^( TOK_TABSORTCOLNAMEDESC Identifier ) ;
	public final HiveParser.columnNameOrder_return columnNameOrder() throws RecognitionException {
		HiveParser.columnNameOrder_return retval = new HiveParser.columnNameOrder_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token asc=null;
		Token desc=null;
		Token Identifier530=null;

		CommonTree asc_tree=null;
		CommonTree desc_tree=null;
		CommonTree Identifier530_tree=null;
		RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_ASC=new RewriteRuleTokenStream(adaptor,"token KW_ASC");

		 msgs.push("column name order"); 
		try {
			// Hive.g:1241:5: ( Identifier (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC Identifier ) -> ^( TOK_TABSORTCOLNAMEDESC Identifier ) )
			// Hive.g:1241:7: Identifier (asc= KW_ASC |desc= KW_DESC )?
			{
			Identifier530=(Token)match(input,Identifier,FOLLOW_Identifier_in_columnNameOrder8530);  
			stream_Identifier.add(Identifier530);

			// Hive.g:1241:18: (asc= KW_ASC |desc= KW_DESC )?
			int alt148=3;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==KW_ASC) ) {
				alt148=1;
			}
			else if ( (LA148_0==KW_DESC) ) {
				alt148=2;
			}
			switch (alt148) {
				case 1 :
					// Hive.g:1241:19: asc= KW_ASC
					{
					asc=(Token)match(input,KW_ASC,FOLLOW_KW_ASC_in_columnNameOrder8535);  
					stream_KW_ASC.add(asc);

					}
					break;
				case 2 :
					// Hive.g:1241:32: desc= KW_DESC
					{
					desc=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_columnNameOrder8541);  
					stream_KW_DESC.add(desc);

					}
					break;

			}

			// AST REWRITE
			// elements: Identifier, Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1242:5: -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC Identifier )
			if (desc == null) {
				// Hive.g:1242:25: ^( TOK_TABSORTCOLNAMEASC Identifier )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1243:5: -> ^( TOK_TABSORTCOLNAMEDESC Identifier )
			{
				// Hive.g:1243:25: ^( TOK_TABSORTCOLNAMEDESC Identifier )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameOrder"


	public static class columnNameCommentList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameCommentList"
	// Hive.g:1246:1: columnNameCommentList : columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) ;
	public final HiveParser.columnNameCommentList_return columnNameCommentList() throws RecognitionException {
		HiveParser.columnNameCommentList_return retval = new HiveParser.columnNameCommentList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA532=null;
		ParserRuleReturnScope columnNameComment531 =null;
		ParserRuleReturnScope columnNameComment533 =null;

		CommonTree COMMA532_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameComment=new RewriteRuleSubtreeStream(adaptor,"rule columnNameComment");

		 msgs.push("column name comment list"); 
		try {
			// Hive.g:1249:5: ( columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) )
			// Hive.g:1249:7: columnNameComment ( COMMA columnNameComment )*
			{
			pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList8613);
			columnNameComment531=columnNameComment();
			state._fsp--;

			stream_columnNameComment.add(columnNameComment531.getTree());
			// Hive.g:1249:25: ( COMMA columnNameComment )*
			loop149:
			while (true) {
				int alt149=2;
				int LA149_0 = input.LA(1);
				if ( (LA149_0==COMMA) ) {
					alt149=1;
				}

				switch (alt149) {
				case 1 :
					// Hive.g:1249:26: COMMA columnNameComment
					{
					COMMA532=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameCommentList8616);  
					stream_COMMA.add(COMMA532);

					pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList8618);
					columnNameComment533=columnNameComment();
					state._fsp--;

					stream_columnNameComment.add(columnNameComment533.getTree());
					}
					break;

				default :
					break loop149;
				}
			}

			// AST REWRITE
			// elements: columnNameComment
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1249:52: -> ^( TOK_TABCOLNAME ( columnNameComment )+ )
			{
				// Hive.g:1249:55: ^( TOK_TABCOLNAME ( columnNameComment )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);
				if ( !(stream_columnNameComment.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameComment.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameComment.nextTree());
				}
				stream_columnNameComment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameCommentList"


	public static class columnNameComment_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameComment"
	// Hive.g:1252:1: columnNameComment : colName= Identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) ;
	public final HiveParser.columnNameComment_return columnNameComment() throws RecognitionException {
		HiveParser.columnNameComment_return retval = new HiveParser.columnNameComment_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token colName=null;
		Token comment=null;
		Token KW_COMMENT534=null;

		CommonTree colName_tree=null;
		CommonTree comment_tree=null;
		CommonTree KW_COMMENT534_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

		 msgs.push("column name comment"); 
		try {
			// Hive.g:1255:5: (colName= Identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) )
			// Hive.g:1255:7: colName= Identifier ( KW_COMMENT comment= StringLiteral )?
			{
			colName=(Token)match(input,Identifier,FOLLOW_Identifier_in_columnNameComment8658);  
			stream_Identifier.add(colName);

			// Hive.g:1255:26: ( KW_COMMENT comment= StringLiteral )?
			int alt150=2;
			int LA150_0 = input.LA(1);
			if ( (LA150_0==KW_COMMENT) ) {
				alt150=1;
			}
			switch (alt150) {
				case 1 :
					// Hive.g:1255:27: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT534=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameComment8661);  
					stream_KW_COMMENT.add(KW_COMMENT534);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameComment8665);  
					stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: comment, colName
			// token labels: comment, colName
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleTokenStream stream_colName=new RewriteRuleTokenStream(adaptor,"token colName",colName);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1256:5: -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
			{
				// Hive.g:1256:8: ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextNode());
				adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_NULL, "TOK_NULL"));
				// Hive.g:1256:40: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameComment"


	public static class columnRefOrder_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnRefOrder"
	// Hive.g:1259:1: columnRefOrder : expression (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression ) -> ^( TOK_TABSORTCOLNAMEDESC expression ) ;
	public final HiveParser.columnRefOrder_return columnRefOrder() throws RecognitionException {
		HiveParser.columnRefOrder_return retval = new HiveParser.columnRefOrder_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token asc=null;
		Token desc=null;
		ParserRuleReturnScope expression535 =null;

		CommonTree asc_tree=null;
		CommonTree desc_tree=null;
		RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
		RewriteRuleTokenStream stream_KW_ASC=new RewriteRuleTokenStream(adaptor,"token KW_ASC");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		 msgs.push("column order"); 
		try {
			// Hive.g:1262:5: ( expression (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression ) -> ^( TOK_TABSORTCOLNAMEDESC expression ) )
			// Hive.g:1262:7: expression (asc= KW_ASC |desc= KW_DESC )?
			{
			pushFollow(FOLLOW_expression_in_columnRefOrder8713);
			expression535=expression();
			state._fsp--;

			stream_expression.add(expression535.getTree());
			// Hive.g:1262:18: (asc= KW_ASC |desc= KW_DESC )?
			int alt151=3;
			int LA151_0 = input.LA(1);
			if ( (LA151_0==KW_ASC) ) {
				alt151=1;
			}
			else if ( (LA151_0==KW_DESC) ) {
				alt151=2;
			}
			switch (alt151) {
				case 1 :
					// Hive.g:1262:19: asc= KW_ASC
					{
					asc=(Token)match(input,KW_ASC,FOLLOW_KW_ASC_in_columnRefOrder8718);  
					stream_KW_ASC.add(asc);

					}
					break;
				case 2 :
					// Hive.g:1262:32: desc= KW_DESC
					{
					desc=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_columnRefOrder8724);  
					stream_KW_DESC.add(desc);

					}
					break;

			}

			// AST REWRITE
			// elements: expression, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1263:5: -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression )
			if (desc == null) {
				// Hive.g:1263:25: ^( TOK_TABSORTCOLNAMEASC expression )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				adaptor.addChild(root_1, stream_expression.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1264:5: -> ^( TOK_TABSORTCOLNAMEDESC expression )
			{
				// Hive.g:1264:25: ^( TOK_TABSORTCOLNAMEDESC expression )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				adaptor.addChild(root_1, stream_expression.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnRefOrder"


	public static class columnNameType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameType"
	// Hive.g:1267:1: columnNameType : colName= Identifier colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
	public final HiveParser.columnNameType_return columnNameType() throws RecognitionException {
		HiveParser.columnNameType_return retval = new HiveParser.columnNameType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token colName=null;
		Token comment=null;
		Token KW_COMMENT537=null;
		ParserRuleReturnScope colType536 =null;

		CommonTree colName_tree=null;
		CommonTree comment_tree=null;
		CommonTree KW_COMMENT537_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");

		 msgs.push("column specification"); 
		try {
			// Hive.g:1270:5: (colName= Identifier colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
			// Hive.g:1270:7: colName= Identifier colType ( KW_COMMENT comment= StringLiteral )?
			{
			colName=(Token)match(input,Identifier,FOLLOW_Identifier_in_columnNameType8798);  
			stream_Identifier.add(colName);

			pushFollow(FOLLOW_colType_in_columnNameType8800);
			colType536=colType();
			state._fsp--;

			stream_colType.add(colType536.getTree());
			// Hive.g:1270:34: ( KW_COMMENT comment= StringLiteral )?
			int alt152=2;
			int LA152_0 = input.LA(1);
			if ( (LA152_0==KW_COMMENT) ) {
				alt152=1;
			}
			switch (alt152) {
				case 1 :
					// Hive.g:1270:35: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT537=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameType8803);  
					stream_KW_COMMENT.add(KW_COMMENT537);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameType8807);  
					stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: colType, comment, colName, colType, colName
			// token labels: comment, colName
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleTokenStream stream_colName=new RewriteRuleTokenStream(adaptor,"token colName",colName);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1271:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
			if (comment == null) {
				// Hive.g:1271:28: ^( TOK_TABCOL $colName colType )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextNode());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1272:5: -> ^( TOK_TABCOL $colName colType $comment)
			{
				// Hive.g:1272:28: ^( TOK_TABCOL $colName colType $comment)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextNode());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameType"


	public static class columnNameColonType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameColonType"
	// Hive.g:1275:1: columnNameColonType : colName= Identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
	public final HiveParser.columnNameColonType_return columnNameColonType() throws RecognitionException {
		HiveParser.columnNameColonType_return retval = new HiveParser.columnNameColonType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token colName=null;
		Token comment=null;
		Token COLON538=null;
		Token KW_COMMENT540=null;
		ParserRuleReturnScope colType539 =null;

		CommonTree colName_tree=null;
		CommonTree comment_tree=null;
		CommonTree COLON538_tree=null;
		CommonTree KW_COMMENT540_tree=null;
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");

		 msgs.push("column specification"); 
		try {
			// Hive.g:1278:5: (colName= Identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
			// Hive.g:1278:7: colName= Identifier COLON colType ( KW_COMMENT comment= StringLiteral )?
			{
			colName=(Token)match(input,Identifier,FOLLOW_Identifier_in_columnNameColonType8893);  
			stream_Identifier.add(colName);

			COLON538=(Token)match(input,COLON,FOLLOW_COLON_in_columnNameColonType8895);  
			stream_COLON.add(COLON538);

			pushFollow(FOLLOW_colType_in_columnNameColonType8897);
			colType539=colType();
			state._fsp--;

			stream_colType.add(colType539.getTree());
			// Hive.g:1278:40: ( KW_COMMENT comment= StringLiteral )?
			int alt153=2;
			int LA153_0 = input.LA(1);
			if ( (LA153_0==KW_COMMENT) ) {
				alt153=1;
			}
			switch (alt153) {
				case 1 :
					// Hive.g:1278:41: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT540=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameColonType8900);  
					stream_KW_COMMENT.add(KW_COMMENT540);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameColonType8904);  
					stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: colType, colType, comment, colName, colName
			// token labels: comment, colName
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleTokenStream stream_colName=new RewriteRuleTokenStream(adaptor,"token colName",colName);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1279:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
			if (comment == null) {
				// Hive.g:1279:28: ^( TOK_TABCOL $colName colType )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextNode());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1280:5: -> ^( TOK_TABCOL $colName colType $comment)
			{
				// Hive.g:1280:28: ^( TOK_TABCOL $colName colType $comment)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextNode());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameColonType"


	public static class colType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "colType"
	// Hive.g:1283:1: colType : type ;
	public final HiveParser.colType_return colType() throws RecognitionException {
		HiveParser.colType_return retval = new HiveParser.colType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope type541 =null;


		 msgs.push("column type"); 
		try {
			// Hive.g:1286:5: ( type )
			// Hive.g:1286:7: type
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_in_colType8988);
			type541=type();
			state._fsp--;

			adaptor.addChild(root_0, type541.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "colType"


	public static class colTypeList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "colTypeList"
	// Hive.g:1289:1: colTypeList : colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) ;
	public final HiveParser.colTypeList_return colTypeList() throws RecognitionException {
		HiveParser.colTypeList_return retval = new HiveParser.colTypeList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA543=null;
		ParserRuleReturnScope colType542 =null;
		ParserRuleReturnScope colType544 =null;

		CommonTree COMMA543_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");

		 msgs.push("column type list"); 
		try {
			// Hive.g:1292:5: ( colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) )
			// Hive.g:1292:7: colType ( COMMA colType )*
			{
			pushFollow(FOLLOW_colType_in_colTypeList9015);
			colType542=colType();
			state._fsp--;

			stream_colType.add(colType542.getTree());
			// Hive.g:1292:15: ( COMMA colType )*
			loop154:
			while (true) {
				int alt154=2;
				int LA154_0 = input.LA(1);
				if ( (LA154_0==COMMA) ) {
					alt154=1;
				}

				switch (alt154) {
				case 1 :
					// Hive.g:1292:16: COMMA colType
					{
					COMMA543=(Token)match(input,COMMA,FOLLOW_COMMA_in_colTypeList9018);  
					stream_COMMA.add(COMMA543);

					pushFollow(FOLLOW_colType_in_colTypeList9020);
					colType544=colType();
					state._fsp--;

					stream_colType.add(colType544.getTree());
					}
					break;

				default :
					break loop154;
				}
			}

			// AST REWRITE
			// elements: colType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1292:32: -> ^( TOK_COLTYPELIST ( colType )+ )
			{
				// Hive.g:1292:35: ^( TOK_COLTYPELIST ( colType )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_COLTYPELIST, "TOK_COLTYPELIST"), root_1);
				if ( !(stream_colType.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_colType.hasNext() ) {
					adaptor.addChild(root_1, stream_colType.nextTree());
				}
				stream_colType.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "colTypeList"


	public static class type_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "type"
	// Hive.g:1295:1: type : ( primitiveType | listType | structType | mapType | unionType );
	public final HiveParser.type_return type() throws RecognitionException {
		HiveParser.type_return retval = new HiveParser.type_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope primitiveType545 =null;
		ParserRuleReturnScope listType546 =null;
		ParserRuleReturnScope structType547 =null;
		ParserRuleReturnScope mapType548 =null;
		ParserRuleReturnScope unionType549 =null;


		try {
			// Hive.g:1296:5: ( primitiveType | listType | structType | mapType | unionType )
			int alt155=5;
			switch ( input.LA(1) ) {
			case KW_BIGINT:
			case KW_BINARY:
			case KW_BOOLEAN:
			case KW_DATE:
			case KW_DATETIME:
			case KW_DOUBLE:
			case KW_FLOAT:
			case KW_INT:
			case KW_SMALLINT:
			case KW_STRING:
			case KW_TIMESTAMP:
			case KW_TINYINT:
				{
				alt155=1;
				}
				break;
			case KW_ARRAY:
				{
				alt155=2;
				}
				break;
			case KW_STRUCT:
				{
				alt155=3;
				}
				break;
			case KW_MAP:
				{
				alt155=4;
				}
				break;
			case KW_UNIONTYPE:
				{
				alt155=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 155, 0, input);
				throw nvae;
			}
			switch (alt155) {
				case 1 :
					// Hive.g:1296:7: primitiveType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_primitiveType_in_type9048);
					primitiveType545=primitiveType();
					state._fsp--;

					adaptor.addChild(root_0, primitiveType545.getTree());

					}
					break;
				case 2 :
					// Hive.g:1297:7: listType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_listType_in_type9056);
					listType546=listType();
					state._fsp--;

					adaptor.addChild(root_0, listType546.getTree());

					}
					break;
				case 3 :
					// Hive.g:1298:7: structType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_structType_in_type9064);
					structType547=structType();
					state._fsp--;

					adaptor.addChild(root_0, structType547.getTree());

					}
					break;
				case 4 :
					// Hive.g:1299:7: mapType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_mapType_in_type9072);
					mapType548=mapType();
					state._fsp--;

					adaptor.addChild(root_0, mapType548.getTree());

					}
					break;
				case 5 :
					// Hive.g:1300:7: unionType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_unionType_in_type9080);
					unionType549=unionType();
					state._fsp--;

					adaptor.addChild(root_0, unionType549.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type"


	public static class primitiveType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "primitiveType"
	// Hive.g:1302:1: primitiveType : ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY );
	public final HiveParser.primitiveType_return primitiveType() throws RecognitionException {
		HiveParser.primitiveType_return retval = new HiveParser.primitiveType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_TINYINT550=null;
		Token KW_SMALLINT551=null;
		Token KW_INT552=null;
		Token KW_BIGINT553=null;
		Token KW_BOOLEAN554=null;
		Token KW_FLOAT555=null;
		Token KW_DOUBLE556=null;
		Token KW_DATE557=null;
		Token KW_DATETIME558=null;
		Token KW_TIMESTAMP559=null;
		Token KW_STRING560=null;
		Token KW_BINARY561=null;

		CommonTree KW_TINYINT550_tree=null;
		CommonTree KW_SMALLINT551_tree=null;
		CommonTree KW_INT552_tree=null;
		CommonTree KW_BIGINT553_tree=null;
		CommonTree KW_BOOLEAN554_tree=null;
		CommonTree KW_FLOAT555_tree=null;
		CommonTree KW_DOUBLE556_tree=null;
		CommonTree KW_DATE557_tree=null;
		CommonTree KW_DATETIME558_tree=null;
		CommonTree KW_TIMESTAMP559_tree=null;
		CommonTree KW_STRING560_tree=null;
		CommonTree KW_BINARY561_tree=null;
		RewriteRuleTokenStream stream_KW_DATETIME=new RewriteRuleTokenStream(adaptor,"token KW_DATETIME");
		RewriteRuleTokenStream stream_KW_STRING=new RewriteRuleTokenStream(adaptor,"token KW_STRING");
		RewriteRuleTokenStream stream_KW_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token KW_TIMESTAMP");
		RewriteRuleTokenStream stream_KW_DATE=new RewriteRuleTokenStream(adaptor,"token KW_DATE");
		RewriteRuleTokenStream stream_KW_FLOAT=new RewriteRuleTokenStream(adaptor,"token KW_FLOAT");
		RewriteRuleTokenStream stream_KW_BINARY=new RewriteRuleTokenStream(adaptor,"token KW_BINARY");
		RewriteRuleTokenStream stream_KW_INT=new RewriteRuleTokenStream(adaptor,"token KW_INT");
		RewriteRuleTokenStream stream_KW_SMALLINT=new RewriteRuleTokenStream(adaptor,"token KW_SMALLINT");
		RewriteRuleTokenStream stream_KW_DOUBLE=new RewriteRuleTokenStream(adaptor,"token KW_DOUBLE");
		RewriteRuleTokenStream stream_KW_BIGINT=new RewriteRuleTokenStream(adaptor,"token KW_BIGINT");
		RewriteRuleTokenStream stream_KW_TINYINT=new RewriteRuleTokenStream(adaptor,"token KW_TINYINT");
		RewriteRuleTokenStream stream_KW_BOOLEAN=new RewriteRuleTokenStream(adaptor,"token KW_BOOLEAN");

		 msgs.push("primitive type specification"); 
		try {
			// Hive.g:1305:5: ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY )
			int alt156=12;
			switch ( input.LA(1) ) {
			case KW_TINYINT:
				{
				alt156=1;
				}
				break;
			case KW_SMALLINT:
				{
				alt156=2;
				}
				break;
			case KW_INT:
				{
				alt156=3;
				}
				break;
			case KW_BIGINT:
				{
				alt156=4;
				}
				break;
			case KW_BOOLEAN:
				{
				alt156=5;
				}
				break;
			case KW_FLOAT:
				{
				alt156=6;
				}
				break;
			case KW_DOUBLE:
				{
				alt156=7;
				}
				break;
			case KW_DATE:
				{
				alt156=8;
				}
				break;
			case KW_DATETIME:
				{
				alt156=9;
				}
				break;
			case KW_TIMESTAMP:
				{
				alt156=10;
				}
				break;
			case KW_STRING:
				{
				alt156=11;
				}
				break;
			case KW_BINARY:
				{
				alt156=12;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 156, 0, input);
				throw nvae;
			}
			switch (alt156) {
				case 1 :
					// Hive.g:1305:7: KW_TINYINT
					{
					KW_TINYINT550=(Token)match(input,KW_TINYINT,FOLLOW_KW_TINYINT_in_primitiveType9102);  
					stream_KW_TINYINT.add(KW_TINYINT550);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1305:24: -> TOK_TINYINT
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TINYINT, "TOK_TINYINT"));
					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1306:7: KW_SMALLINT
					{
					KW_SMALLINT551=(Token)match(input,KW_SMALLINT,FOLLOW_KW_SMALLINT_in_primitiveType9123);  
					stream_KW_SMALLINT.add(KW_SMALLINT551);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1306:24: -> TOK_SMALLINT
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_SMALLINT, "TOK_SMALLINT"));
					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// Hive.g:1307:7: KW_INT
					{
					KW_INT552=(Token)match(input,KW_INT,FOLLOW_KW_INT_in_primitiveType9143);  
					stream_KW_INT.add(KW_INT552);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1307:24: -> TOK_INT
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_INT, "TOK_INT"));
					}


					retval.tree = root_0;

					}
					break;
				case 4 :
					// Hive.g:1308:7: KW_BIGINT
					{
					KW_BIGINT553=(Token)match(input,KW_BIGINT,FOLLOW_KW_BIGINT_in_primitiveType9168);  
					stream_KW_BIGINT.add(KW_BIGINT553);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1308:24: -> TOK_BIGINT
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_BIGINT, "TOK_BIGINT"));
					}


					retval.tree = root_0;

					}
					break;
				case 5 :
					// Hive.g:1309:7: KW_BOOLEAN
					{
					KW_BOOLEAN554=(Token)match(input,KW_BOOLEAN,FOLLOW_KW_BOOLEAN_in_primitiveType9190);  
					stream_KW_BOOLEAN.add(KW_BOOLEAN554);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1309:24: -> TOK_BOOLEAN
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_BOOLEAN, "TOK_BOOLEAN"));
					}


					retval.tree = root_0;

					}
					break;
				case 6 :
					// Hive.g:1310:7: KW_FLOAT
					{
					KW_FLOAT555=(Token)match(input,KW_FLOAT,FOLLOW_KW_FLOAT_in_primitiveType9211);  
					stream_KW_FLOAT.add(KW_FLOAT555);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1310:24: -> TOK_FLOAT
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_FLOAT, "TOK_FLOAT"));
					}


					retval.tree = root_0;

					}
					break;
				case 7 :
					// Hive.g:1311:7: KW_DOUBLE
					{
					KW_DOUBLE556=(Token)match(input,KW_DOUBLE,FOLLOW_KW_DOUBLE_in_primitiveType9234);  
					stream_KW_DOUBLE.add(KW_DOUBLE556);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1311:24: -> TOK_DOUBLE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_DOUBLE, "TOK_DOUBLE"));
					}


					retval.tree = root_0;

					}
					break;
				case 8 :
					// Hive.g:1312:7: KW_DATE
					{
					KW_DATE557=(Token)match(input,KW_DATE,FOLLOW_KW_DATE_in_primitiveType9256);  
					stream_KW_DATE.add(KW_DATE557);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1312:24: -> TOK_DATE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_DATE, "TOK_DATE"));
					}


					retval.tree = root_0;

					}
					break;
				case 9 :
					// Hive.g:1313:7: KW_DATETIME
					{
					KW_DATETIME558=(Token)match(input,KW_DATETIME,FOLLOW_KW_DATETIME_in_primitiveType9280);  
					stream_KW_DATETIME.add(KW_DATETIME558);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1313:24: -> TOK_DATETIME
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_DATETIME, "TOK_DATETIME"));
					}


					retval.tree = root_0;

					}
					break;
				case 10 :
					// Hive.g:1314:7: KW_TIMESTAMP
					{
					KW_TIMESTAMP559=(Token)match(input,KW_TIMESTAMP,FOLLOW_KW_TIMESTAMP_in_primitiveType9300);  
					stream_KW_TIMESTAMP.add(KW_TIMESTAMP559);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1314:24: -> TOK_TIMESTAMP
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TIMESTAMP, "TOK_TIMESTAMP"));
					}


					retval.tree = root_0;

					}
					break;
				case 11 :
					// Hive.g:1315:7: KW_STRING
					{
					KW_STRING560=(Token)match(input,KW_STRING,FOLLOW_KW_STRING_in_primitiveType9319);  
					stream_KW_STRING.add(KW_STRING560);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1315:24: -> TOK_STRING
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_STRING, "TOK_STRING"));
					}


					retval.tree = root_0;

					}
					break;
				case 12 :
					// Hive.g:1316:7: KW_BINARY
					{
					KW_BINARY561=(Token)match(input,KW_BINARY,FOLLOW_KW_BINARY_in_primitiveType9341);  
					stream_KW_BINARY.add(KW_BINARY561);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1316:24: -> TOK_BINARY
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_BINARY, "TOK_BINARY"));
					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "primitiveType"


	public static class listType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "listType"
	// Hive.g:1319:1: listType : KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) ;
	public final HiveParser.listType_return listType() throws RecognitionException {
		HiveParser.listType_return retval = new HiveParser.listType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ARRAY562=null;
		Token LESSTHAN563=null;
		Token GREATERTHAN565=null;
		ParserRuleReturnScope type564 =null;

		CommonTree KW_ARRAY562_tree=null;
		CommonTree LESSTHAN563_tree=null;
		CommonTree GREATERTHAN565_tree=null;
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_KW_ARRAY=new RewriteRuleTokenStream(adaptor,"token KW_ARRAY");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");

		 msgs.push("list type"); 
		try {
			// Hive.g:1322:5: ( KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) )
			// Hive.g:1322:7: KW_ARRAY LESSTHAN type GREATERTHAN
			{
			KW_ARRAY562=(Token)match(input,KW_ARRAY,FOLLOW_KW_ARRAY_in_listType9382);  
			stream_KW_ARRAY.add(KW_ARRAY562);

			LESSTHAN563=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_listType9384);  
			stream_LESSTHAN.add(LESSTHAN563);

			pushFollow(FOLLOW_type_in_listType9386);
			type564=type();
			state._fsp--;

			stream_type.add(type564.getTree());
			GREATERTHAN565=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_listType9388);  
			stream_GREATERTHAN.add(GREATERTHAN565);

			// AST REWRITE
			// elements: type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1322:44: -> ^( TOK_LIST type )
			{
				// Hive.g:1322:47: ^( TOK_LIST type )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LIST, "TOK_LIST"), root_1);
				adaptor.addChild(root_1, stream_type.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "listType"


	public static class structType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "structType"
	// Hive.g:1325:1: structType : KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) ;
	public final HiveParser.structType_return structType() throws RecognitionException {
		HiveParser.structType_return retval = new HiveParser.structType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_STRUCT566=null;
		Token LESSTHAN567=null;
		Token GREATERTHAN569=null;
		ParserRuleReturnScope columnNameColonTypeList568 =null;

		CommonTree KW_STRUCT566_tree=null;
		CommonTree LESSTHAN567_tree=null;
		CommonTree GREATERTHAN569_tree=null;
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_KW_STRUCT=new RewriteRuleTokenStream(adaptor,"token KW_STRUCT");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_columnNameColonTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonTypeList");

		 msgs.push("struct type"); 
		try {
			// Hive.g:1328:5: ( KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) )
			// Hive.g:1328:7: KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN
			{
			KW_STRUCT566=(Token)match(input,KW_STRUCT,FOLLOW_KW_STRUCT_in_structType9425);  
			stream_KW_STRUCT.add(KW_STRUCT566);

			LESSTHAN567=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_structType9427);  
			stream_LESSTHAN.add(LESSTHAN567);

			pushFollow(FOLLOW_columnNameColonTypeList_in_structType9429);
			columnNameColonTypeList568=columnNameColonTypeList();
			state._fsp--;

			stream_columnNameColonTypeList.add(columnNameColonTypeList568.getTree());
			GREATERTHAN569=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_structType9431);  
			stream_GREATERTHAN.add(GREATERTHAN569);

			// AST REWRITE
			// elements: columnNameColonTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1328:62: -> ^( TOK_STRUCT columnNameColonTypeList )
			{
				// Hive.g:1328:65: ^( TOK_STRUCT columnNameColonTypeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_STRUCT, "TOK_STRUCT"), root_1);
				adaptor.addChild(root_1, stream_columnNameColonTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "structType"


	public static class mapType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "mapType"
	// Hive.g:1331:1: mapType : KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) ;
	public final HiveParser.mapType_return mapType() throws RecognitionException {
		HiveParser.mapType_return retval = new HiveParser.mapType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_MAP570=null;
		Token LESSTHAN571=null;
		Token COMMA572=null;
		Token GREATERTHAN573=null;
		ParserRuleReturnScope left =null;
		ParserRuleReturnScope right =null;

		CommonTree KW_MAP570_tree=null;
		CommonTree LESSTHAN571_tree=null;
		CommonTree COMMA572_tree=null;
		CommonTree GREATERTHAN573_tree=null;
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");

		 msgs.push("map type"); 
		try {
			// Hive.g:1334:5: ( KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) )
			// Hive.g:1334:7: KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN
			{
			KW_MAP570=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_mapType9466);  
			stream_KW_MAP.add(KW_MAP570);

			LESSTHAN571=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_mapType9468);  
			stream_LESSTHAN.add(LESSTHAN571);

			pushFollow(FOLLOW_primitiveType_in_mapType9472);
			left=primitiveType();
			state._fsp--;

			stream_primitiveType.add(left.getTree());
			COMMA572=(Token)match(input,COMMA,FOLLOW_COMMA_in_mapType9474);  
			stream_COMMA.add(COMMA572);

			pushFollow(FOLLOW_type_in_mapType9478);
			right=type();
			state._fsp--;

			stream_type.add(right.getTree());
			GREATERTHAN573=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_mapType9480);  
			stream_GREATERTHAN.add(GREATERTHAN573);

			// AST REWRITE
			// elements: right, left
			// token labels: 
			// rule labels: retval, left, right
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.getTree():null);
			RewriteRuleSubtreeStream stream_right=new RewriteRuleSubtreeStream(adaptor,"rule right",right!=null?right.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1335:5: -> ^( TOK_MAP $left $right)
			{
				// Hive.g:1335:8: ^( TOK_MAP $left $right)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_MAP, "TOK_MAP"), root_1);
				adaptor.addChild(root_1, stream_left.nextTree());
				adaptor.addChild(root_1, stream_right.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "mapType"


	public static class unionType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unionType"
	// Hive.g:1338:1: unionType : KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) ;
	public final HiveParser.unionType_return unionType() throws RecognitionException {
		HiveParser.unionType_return retval = new HiveParser.unionType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_UNIONTYPE574=null;
		Token LESSTHAN575=null;
		Token GREATERTHAN577=null;
		ParserRuleReturnScope colTypeList576 =null;

		CommonTree KW_UNIONTYPE574_tree=null;
		CommonTree LESSTHAN575_tree=null;
		CommonTree GREATERTHAN577_tree=null;
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_KW_UNIONTYPE=new RewriteRuleTokenStream(adaptor,"token KW_UNIONTYPE");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_colTypeList=new RewriteRuleSubtreeStream(adaptor,"rule colTypeList");

		 msgs.push("uniontype type"); 
		try {
			// Hive.g:1341:5: ( KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) )
			// Hive.g:1341:7: KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN
			{
			KW_UNIONTYPE574=(Token)match(input,KW_UNIONTYPE,FOLLOW_KW_UNIONTYPE_in_unionType9523);  
			stream_KW_UNIONTYPE.add(KW_UNIONTYPE574);

			LESSTHAN575=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_unionType9525);  
			stream_LESSTHAN.add(LESSTHAN575);

			pushFollow(FOLLOW_colTypeList_in_unionType9527);
			colTypeList576=colTypeList();
			state._fsp--;

			stream_colTypeList.add(colTypeList576.getTree());
			GREATERTHAN577=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_unionType9529);  
			stream_GREATERTHAN.add(GREATERTHAN577);

			// AST REWRITE
			// elements: colTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1341:53: -> ^( TOK_UNIONTYPE colTypeList )
			{
				// Hive.g:1341:56: ^( TOK_UNIONTYPE colTypeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNIONTYPE, "TOK_UNIONTYPE"), root_1);
				adaptor.addChild(root_1, stream_colTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unionType"


	public static class queryOperator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "queryOperator"
	// Hive.g:1344:1: queryOperator : KW_UNION KW_ALL -> ^( TOK_UNION ) ;
	public final HiveParser.queryOperator_return queryOperator() throws RecognitionException {
		HiveParser.queryOperator_return retval = new HiveParser.queryOperator_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_UNION578=null;
		Token KW_ALL579=null;

		CommonTree KW_UNION578_tree=null;
		CommonTree KW_ALL579_tree=null;
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
		RewriteRuleTokenStream stream_KW_UNION=new RewriteRuleTokenStream(adaptor,"token KW_UNION");

		 msgs.push("query operator"); 
		try {
			// Hive.g:1347:5: ( KW_UNION KW_ALL -> ^( TOK_UNION ) )
			// Hive.g:1347:7: KW_UNION KW_ALL
			{
			KW_UNION578=(Token)match(input,KW_UNION,FOLLOW_KW_UNION_in_queryOperator9564);  
			stream_KW_UNION.add(KW_UNION578);

			KW_ALL579=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_queryOperator9566);  
			stream_KW_ALL.add(KW_ALL579);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1347:23: -> ^( TOK_UNION )
			{
				// Hive.g:1347:26: ^( TOK_UNION )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNION, "TOK_UNION"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "queryOperator"


	public static class queryStatementExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "queryStatementExpression"
	// Hive.g:1351:1: queryStatementExpression : queryStatement ( queryOperator ^ queryStatement )* ;
	public final HiveParser.queryStatementExpression_return queryStatementExpression() throws RecognitionException {
		HiveParser.queryStatementExpression_return retval = new HiveParser.queryStatementExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope queryStatement580 =null;
		ParserRuleReturnScope queryOperator581 =null;
		ParserRuleReturnScope queryStatement582 =null;


		try {
			// Hive.g:1352:5: ( queryStatement ( queryOperator ^ queryStatement )* )
			// Hive.g:1352:7: queryStatement ( queryOperator ^ queryStatement )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_queryStatement_in_queryStatementExpression9590);
			queryStatement580=queryStatement();
			state._fsp--;

			adaptor.addChild(root_0, queryStatement580.getTree());

			// Hive.g:1352:22: ( queryOperator ^ queryStatement )*
			loop157:
			while (true) {
				int alt157=2;
				int LA157_0 = input.LA(1);
				if ( (LA157_0==KW_UNION) ) {
					alt157=1;
				}

				switch (alt157) {
				case 1 :
					// Hive.g:1352:23: queryOperator ^ queryStatement
					{
					pushFollow(FOLLOW_queryOperator_in_queryStatementExpression9593);
					queryOperator581=queryOperator();
					state._fsp--;

					root_0 = (CommonTree)adaptor.becomeRoot(queryOperator581.getTree(), root_0);
					pushFollow(FOLLOW_queryStatement_in_queryStatementExpression9596);
					queryStatement582=queryStatement();
					state._fsp--;

					adaptor.addChild(root_0, queryStatement582.getTree());

					}
					break;

				default :
					break loop157;
				}
			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "queryStatementExpression"


	public static class queryStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "queryStatement"
	// Hive.g:1355:1: queryStatement : ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) | regular_body );
	public final HiveParser.queryStatement_return queryStatement() throws RecognitionException {
		HiveParser.queryStatement_return retval = new HiveParser.queryStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		List<Object> list_b=null;
		ParserRuleReturnScope fromClause583 =null;
		ParserRuleReturnScope regular_body584 =null;
		RuleReturnScope b = null;
		RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");

		try {
			// Hive.g:1356:5: ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) | regular_body )
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==KW_FROM) ) {
				alt159=1;
			}
			else if ( (LA159_0==KW_INSERT||LA159_0==KW_MAP||LA159_0==KW_REDUCE||LA159_0==KW_SELECT) ) {
				alt159=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 159, 0, input);
				throw nvae;
			}

			switch (alt159) {
				case 1 :
					// Hive.g:1357:5: fromClause (b+= body )+
					{
					pushFollow(FOLLOW_fromClause_in_queryStatement9619);
					fromClause583=fromClause();
					state._fsp--;

					stream_fromClause.add(fromClause583.getTree());
					// Hive.g:1358:5: (b+= body )+
					int cnt158=0;
					loop158:
					while (true) {
						int alt158=2;
						int LA158_0 = input.LA(1);
						if ( (LA158_0==KW_INSERT||LA158_0==KW_MAP||LA158_0==KW_REDUCE||LA158_0==KW_SELECT) ) {
							alt158=1;
						}

						switch (alt158) {
						case 1 :
							// Hive.g:1358:7: b+= body
							{
							pushFollow(FOLLOW_body_in_queryStatement9629);
							b=body();
							state._fsp--;

							stream_body.add(b.getTree());
							if (list_b==null) list_b=new ArrayList<Object>();
							list_b.add(b.getTree());
							}
							break;

						default :
							if ( cnt158 >= 1 ) break loop158;
							EarlyExitException eee = new EarlyExitException(158, input);
							throw eee;
						}
						cnt158++;
					}

					// AST REWRITE
					// elements: body, fromClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1358:18: -> ^( TOK_QUERY fromClause ( body )+ )
					{
						// Hive.g:1358:21: ^( TOK_QUERY fromClause ( body )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
						adaptor.addChild(root_1, stream_fromClause.nextTree());
						if ( !(stream_body.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_body.hasNext() ) {
							adaptor.addChild(root_1, stream_body.nextTree());
						}
						stream_body.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1359:7: regular_body
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_regular_body_in_queryStatement9651);
					regular_body584=regular_body();
					state._fsp--;

					adaptor.addChild(root_0, regular_body584.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "queryStatement"


	public static class regular_body_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "regular_body"
	// Hive.g:1362:1: regular_body : ( insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) | selectStatement );
	public final HiveParser.regular_body_return regular_body() throws RecognitionException {
		HiveParser.regular_body_return retval = new HiveParser.regular_body_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope insertClause585 =null;
		ParserRuleReturnScope selectClause586 =null;
		ParserRuleReturnScope fromClause587 =null;
		ParserRuleReturnScope whereClause588 =null;
		ParserRuleReturnScope groupByClause589 =null;
		ParserRuleReturnScope havingClause590 =null;
		ParserRuleReturnScope orderByClause591 =null;
		ParserRuleReturnScope clusterByClause592 =null;
		ParserRuleReturnScope distributeByClause593 =null;
		ParserRuleReturnScope sortByClause594 =null;
		ParserRuleReturnScope limitClause595 =null;
		ParserRuleReturnScope selectStatement596 =null;

		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
		RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
		RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
		RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
		RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
		RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
		RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
		RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
		RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");

		try {
			// Hive.g:1363:4: ( insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) | selectStatement )
			int alt168=2;
			int LA168_0 = input.LA(1);
			if ( (LA168_0==KW_INSERT) ) {
				alt168=1;
			}
			else if ( (LA168_0==KW_MAP||LA168_0==KW_REDUCE||LA168_0==KW_SELECT) ) {
				alt168=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 168, 0, input);
				throw nvae;
			}

			switch (alt168) {
				case 1 :
					// Hive.g:1364:4: insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
					{
					pushFollow(FOLLOW_insertClause_in_regular_body9670);
					insertClause585=insertClause();
					state._fsp--;

					stream_insertClause.add(insertClause585.getTree());
					pushFollow(FOLLOW_selectClause_in_regular_body9675);
					selectClause586=selectClause();
					state._fsp--;

					stream_selectClause.add(selectClause586.getTree());
					pushFollow(FOLLOW_fromClause_in_regular_body9680);
					fromClause587=fromClause();
					state._fsp--;

					stream_fromClause.add(fromClause587.getTree());
					// Hive.g:1367:4: ( whereClause )?
					int alt160=2;
					int LA160_0 = input.LA(1);
					if ( (LA160_0==KW_WHERE) ) {
						alt160=1;
					}
					switch (alt160) {
						case 1 :
							// Hive.g:1367:4: whereClause
							{
							pushFollow(FOLLOW_whereClause_in_regular_body9685);
							whereClause588=whereClause();
							state._fsp--;

							stream_whereClause.add(whereClause588.getTree());
							}
							break;

					}

					// Hive.g:1368:4: ( groupByClause )?
					int alt161=2;
					int LA161_0 = input.LA(1);
					if ( (LA161_0==KW_GROUP) ) {
						alt161=1;
					}
					switch (alt161) {
						case 1 :
							// Hive.g:1368:4: groupByClause
							{
							pushFollow(FOLLOW_groupByClause_in_regular_body9691);
							groupByClause589=groupByClause();
							state._fsp--;

							stream_groupByClause.add(groupByClause589.getTree());
							}
							break;

					}

					// Hive.g:1369:4: ( havingClause )?
					int alt162=2;
					int LA162_0 = input.LA(1);
					if ( (LA162_0==KW_HAVING) ) {
						alt162=1;
					}
					switch (alt162) {
						case 1 :
							// Hive.g:1369:4: havingClause
							{
							pushFollow(FOLLOW_havingClause_in_regular_body9697);
							havingClause590=havingClause();
							state._fsp--;

							stream_havingClause.add(havingClause590.getTree());
							}
							break;

					}

					// Hive.g:1370:4: ( orderByClause )?
					int alt163=2;
					int LA163_0 = input.LA(1);
					if ( (LA163_0==KW_ORDER) ) {
						alt163=1;
					}
					switch (alt163) {
						case 1 :
							// Hive.g:1370:4: orderByClause
							{
							pushFollow(FOLLOW_orderByClause_in_regular_body9703);
							orderByClause591=orderByClause();
							state._fsp--;

							stream_orderByClause.add(orderByClause591.getTree());
							}
							break;

					}

					// Hive.g:1371:4: ( clusterByClause )?
					int alt164=2;
					int LA164_0 = input.LA(1);
					if ( (LA164_0==KW_CLUSTER) ) {
						alt164=1;
					}
					switch (alt164) {
						case 1 :
							// Hive.g:1371:4: clusterByClause
							{
							pushFollow(FOLLOW_clusterByClause_in_regular_body9709);
							clusterByClause592=clusterByClause();
							state._fsp--;

							stream_clusterByClause.add(clusterByClause592.getTree());
							}
							break;

					}

					// Hive.g:1372:4: ( distributeByClause )?
					int alt165=2;
					int LA165_0 = input.LA(1);
					if ( (LA165_0==KW_DISTRIBUTE) ) {
						alt165=1;
					}
					switch (alt165) {
						case 1 :
							// Hive.g:1372:4: distributeByClause
							{
							pushFollow(FOLLOW_distributeByClause_in_regular_body9715);
							distributeByClause593=distributeByClause();
							state._fsp--;

							stream_distributeByClause.add(distributeByClause593.getTree());
							}
							break;

					}

					// Hive.g:1373:4: ( sortByClause )?
					int alt166=2;
					int LA166_0 = input.LA(1);
					if ( (LA166_0==KW_SORT) ) {
						alt166=1;
					}
					switch (alt166) {
						case 1 :
							// Hive.g:1373:4: sortByClause
							{
							pushFollow(FOLLOW_sortByClause_in_regular_body9721);
							sortByClause594=sortByClause();
							state._fsp--;

							stream_sortByClause.add(sortByClause594.getTree());
							}
							break;

					}

					// Hive.g:1374:4: ( limitClause )?
					int alt167=2;
					int LA167_0 = input.LA(1);
					if ( (LA167_0==KW_LIMIT) ) {
						alt167=1;
					}
					switch (alt167) {
						case 1 :
							// Hive.g:1374:4: limitClause
							{
							pushFollow(FOLLOW_limitClause_in_regular_body9727);
							limitClause595=limitClause();
							state._fsp--;

							stream_limitClause.add(limitClause595.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: insertClause, groupByClause, selectClause, clusterByClause, havingClause, limitClause, fromClause, sortByClause, whereClause, orderByClause, distributeByClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1374:17: -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
					{
						// Hive.g:1374:20: ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
						adaptor.addChild(root_1, stream_fromClause.nextTree());
						// Hive.g:1374:43: ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
						adaptor.addChild(root_2, stream_insertClause.nextTree());
						adaptor.addChild(root_2, stream_selectClause.nextTree());
						// Hive.g:1375:35: ( whereClause )?
						if ( stream_whereClause.hasNext() ) {
							adaptor.addChild(root_2, stream_whereClause.nextTree());
						}
						stream_whereClause.reset();

						// Hive.g:1375:48: ( groupByClause )?
						if ( stream_groupByClause.hasNext() ) {
							adaptor.addChild(root_2, stream_groupByClause.nextTree());
						}
						stream_groupByClause.reset();

						// Hive.g:1375:63: ( havingClause )?
						if ( stream_havingClause.hasNext() ) {
							adaptor.addChild(root_2, stream_havingClause.nextTree());
						}
						stream_havingClause.reset();

						// Hive.g:1375:77: ( orderByClause )?
						if ( stream_orderByClause.hasNext() ) {
							adaptor.addChild(root_2, stream_orderByClause.nextTree());
						}
						stream_orderByClause.reset();

						// Hive.g:1375:92: ( clusterByClause )?
						if ( stream_clusterByClause.hasNext() ) {
							adaptor.addChild(root_2, stream_clusterByClause.nextTree());
						}
						stream_clusterByClause.reset();

						// Hive.g:1376:22: ( distributeByClause )?
						if ( stream_distributeByClause.hasNext() ) {
							adaptor.addChild(root_2, stream_distributeByClause.nextTree());
						}
						stream_distributeByClause.reset();

						// Hive.g:1376:42: ( sortByClause )?
						if ( stream_sortByClause.hasNext() ) {
							adaptor.addChild(root_2, stream_sortByClause.nextTree());
						}
						stream_sortByClause.reset();

						// Hive.g:1376:56: ( limitClause )?
						if ( stream_limitClause.hasNext() ) {
							adaptor.addChild(root_2, stream_limitClause.nextTree());
						}
						stream_limitClause.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1378:4: selectStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_selectStatement_in_regular_body9820);
					selectStatement596=selectStatement();
					state._fsp--;

					adaptor.addChild(root_0, selectStatement596.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "regular_body"


	public static class selectStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selectStatement"
	// Hive.g:1381:1: selectStatement : selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) ;
	public final HiveParser.selectStatement_return selectStatement() throws RecognitionException {
		HiveParser.selectStatement_return retval = new HiveParser.selectStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope selectClause597 =null;
		ParserRuleReturnScope fromClause598 =null;
		ParserRuleReturnScope whereClause599 =null;
		ParserRuleReturnScope groupByClause600 =null;
		ParserRuleReturnScope havingClause601 =null;
		ParserRuleReturnScope orderByClause602 =null;
		ParserRuleReturnScope clusterByClause603 =null;
		ParserRuleReturnScope distributeByClause604 =null;
		ParserRuleReturnScope sortByClause605 =null;
		ParserRuleReturnScope limitClause606 =null;

		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
		RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
		RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
		RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
		RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
		RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
		RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
		RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");

		try {
			// Hive.g:1382:4: ( selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) )
			// Hive.g:1383:4: selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
			{
			pushFollow(FOLLOW_selectClause_in_selectStatement9838);
			selectClause597=selectClause();
			state._fsp--;

			stream_selectClause.add(selectClause597.getTree());
			pushFollow(FOLLOW_fromClause_in_selectStatement9843);
			fromClause598=fromClause();
			state._fsp--;

			stream_fromClause.add(fromClause598.getTree());
			// Hive.g:1385:4: ( whereClause )?
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==KW_WHERE) ) {
				alt169=1;
			}
			switch (alt169) {
				case 1 :
					// Hive.g:1385:4: whereClause
					{
					pushFollow(FOLLOW_whereClause_in_selectStatement9848);
					whereClause599=whereClause();
					state._fsp--;

					stream_whereClause.add(whereClause599.getTree());
					}
					break;

			}

			// Hive.g:1386:4: ( groupByClause )?
			int alt170=2;
			int LA170_0 = input.LA(1);
			if ( (LA170_0==KW_GROUP) ) {
				alt170=1;
			}
			switch (alt170) {
				case 1 :
					// Hive.g:1386:4: groupByClause
					{
					pushFollow(FOLLOW_groupByClause_in_selectStatement9854);
					groupByClause600=groupByClause();
					state._fsp--;

					stream_groupByClause.add(groupByClause600.getTree());
					}
					break;

			}

			// Hive.g:1387:4: ( havingClause )?
			int alt171=2;
			int LA171_0 = input.LA(1);
			if ( (LA171_0==KW_HAVING) ) {
				alt171=1;
			}
			switch (alt171) {
				case 1 :
					// Hive.g:1387:4: havingClause
					{
					pushFollow(FOLLOW_havingClause_in_selectStatement9860);
					havingClause601=havingClause();
					state._fsp--;

					stream_havingClause.add(havingClause601.getTree());
					}
					break;

			}

			// Hive.g:1388:4: ( orderByClause )?
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==KW_ORDER) ) {
				alt172=1;
			}
			switch (alt172) {
				case 1 :
					// Hive.g:1388:4: orderByClause
					{
					pushFollow(FOLLOW_orderByClause_in_selectStatement9866);
					orderByClause602=orderByClause();
					state._fsp--;

					stream_orderByClause.add(orderByClause602.getTree());
					}
					break;

			}

			// Hive.g:1389:4: ( clusterByClause )?
			int alt173=2;
			int LA173_0 = input.LA(1);
			if ( (LA173_0==KW_CLUSTER) ) {
				alt173=1;
			}
			switch (alt173) {
				case 1 :
					// Hive.g:1389:4: clusterByClause
					{
					pushFollow(FOLLOW_clusterByClause_in_selectStatement9872);
					clusterByClause603=clusterByClause();
					state._fsp--;

					stream_clusterByClause.add(clusterByClause603.getTree());
					}
					break;

			}

			// Hive.g:1390:4: ( distributeByClause )?
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==KW_DISTRIBUTE) ) {
				alt174=1;
			}
			switch (alt174) {
				case 1 :
					// Hive.g:1390:4: distributeByClause
					{
					pushFollow(FOLLOW_distributeByClause_in_selectStatement9878);
					distributeByClause604=distributeByClause();
					state._fsp--;

					stream_distributeByClause.add(distributeByClause604.getTree());
					}
					break;

			}

			// Hive.g:1391:4: ( sortByClause )?
			int alt175=2;
			int LA175_0 = input.LA(1);
			if ( (LA175_0==KW_SORT) ) {
				alt175=1;
			}
			switch (alt175) {
				case 1 :
					// Hive.g:1391:4: sortByClause
					{
					pushFollow(FOLLOW_sortByClause_in_selectStatement9884);
					sortByClause605=sortByClause();
					state._fsp--;

					stream_sortByClause.add(sortByClause605.getTree());
					}
					break;

			}

			// Hive.g:1392:4: ( limitClause )?
			int alt176=2;
			int LA176_0 = input.LA(1);
			if ( (LA176_0==KW_LIMIT) ) {
				alt176=1;
			}
			switch (alt176) {
				case 1 :
					// Hive.g:1392:4: limitClause
					{
					pushFollow(FOLLOW_limitClause_in_selectStatement9890);
					limitClause606=limitClause();
					state._fsp--;

					stream_limitClause.add(limitClause606.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: clusterByClause, havingClause, whereClause, selectClause, sortByClause, limitClause, distributeByClause, orderByClause, groupByClause, fromClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1392:17: -> ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
			{
				// Hive.g:1392:20: ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				adaptor.addChild(root_1, stream_fromClause.nextTree());
				// Hive.g:1392:43: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				// Hive.g:1392:56: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
				// Hive.g:1392:74: ^( TOK_DIR TOK_TMP_FILE )
				{
				CommonTree root_4 = (CommonTree)adaptor.nil();
				root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
				adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_2, stream_selectClause.nextTree());
				// Hive.g:1393:35: ( whereClause )?
				if ( stream_whereClause.hasNext() ) {
					adaptor.addChild(root_2, stream_whereClause.nextTree());
				}
				stream_whereClause.reset();

				// Hive.g:1393:48: ( groupByClause )?
				if ( stream_groupByClause.hasNext() ) {
					adaptor.addChild(root_2, stream_groupByClause.nextTree());
				}
				stream_groupByClause.reset();

				// Hive.g:1393:63: ( havingClause )?
				if ( stream_havingClause.hasNext() ) {
					adaptor.addChild(root_2, stream_havingClause.nextTree());
				}
				stream_havingClause.reset();

				// Hive.g:1393:77: ( orderByClause )?
				if ( stream_orderByClause.hasNext() ) {
					adaptor.addChild(root_2, stream_orderByClause.nextTree());
				}
				stream_orderByClause.reset();

				// Hive.g:1393:92: ( clusterByClause )?
				if ( stream_clusterByClause.hasNext() ) {
					adaptor.addChild(root_2, stream_clusterByClause.nextTree());
				}
				stream_clusterByClause.reset();

				// Hive.g:1394:22: ( distributeByClause )?
				if ( stream_distributeByClause.hasNext() ) {
					adaptor.addChild(root_2, stream_distributeByClause.nextTree());
				}
				stream_distributeByClause.reset();

				// Hive.g:1394:42: ( sortByClause )?
				if ( stream_sortByClause.hasNext() ) {
					adaptor.addChild(root_2, stream_sortByClause.nextTree());
				}
				stream_sortByClause.reset();

				// Hive.g:1394:56: ( limitClause )?
				if ( stream_limitClause.hasNext() ) {
					adaptor.addChild(root_2, stream_limitClause.nextTree());
				}
				stream_limitClause.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selectStatement"


	public static class body_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "body"
	// Hive.g:1398:1: body : ( insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) | selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) );
	public final HiveParser.body_return body() throws RecognitionException {
		HiveParser.body_return retval = new HiveParser.body_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope insertClause607 =null;
		ParserRuleReturnScope selectClause608 =null;
		ParserRuleReturnScope whereClause609 =null;
		ParserRuleReturnScope groupByClause610 =null;
		ParserRuleReturnScope havingClause611 =null;
		ParserRuleReturnScope orderByClause612 =null;
		ParserRuleReturnScope clusterByClause613 =null;
		ParserRuleReturnScope distributeByClause614 =null;
		ParserRuleReturnScope sortByClause615 =null;
		ParserRuleReturnScope limitClause616 =null;
		ParserRuleReturnScope selectClause617 =null;
		ParserRuleReturnScope whereClause618 =null;
		ParserRuleReturnScope groupByClause619 =null;
		ParserRuleReturnScope havingClause620 =null;
		ParserRuleReturnScope orderByClause621 =null;
		ParserRuleReturnScope clusterByClause622 =null;
		ParserRuleReturnScope distributeByClause623 =null;
		ParserRuleReturnScope sortByClause624 =null;
		ParserRuleReturnScope limitClause625 =null;

		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
		RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
		RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
		RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
		RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
		RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
		RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
		RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
		RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");

		try {
			// Hive.g:1399:4: ( insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) | selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
			int alt193=2;
			int LA193_0 = input.LA(1);
			if ( (LA193_0==KW_INSERT) ) {
				alt193=1;
			}
			else if ( (LA193_0==KW_MAP||LA193_0==KW_REDUCE||LA193_0==KW_SELECT) ) {
				alt193=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 193, 0, input);
				throw nvae;
			}

			switch (alt193) {
				case 1 :
					// Hive.g:1400:4: insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
					{
					pushFollow(FOLLOW_insertClause_in_body10000);
					insertClause607=insertClause();
					state._fsp--;

					stream_insertClause.add(insertClause607.getTree());
					pushFollow(FOLLOW_selectClause_in_body10005);
					selectClause608=selectClause();
					state._fsp--;

					stream_selectClause.add(selectClause608.getTree());
					// Hive.g:1402:4: ( whereClause )?
					int alt177=2;
					int LA177_0 = input.LA(1);
					if ( (LA177_0==KW_WHERE) ) {
						alt177=1;
					}
					switch (alt177) {
						case 1 :
							// Hive.g:1402:4: whereClause
							{
							pushFollow(FOLLOW_whereClause_in_body10010);
							whereClause609=whereClause();
							state._fsp--;

							stream_whereClause.add(whereClause609.getTree());
							}
							break;

					}

					// Hive.g:1403:4: ( groupByClause )?
					int alt178=2;
					int LA178_0 = input.LA(1);
					if ( (LA178_0==KW_GROUP) ) {
						alt178=1;
					}
					switch (alt178) {
						case 1 :
							// Hive.g:1403:4: groupByClause
							{
							pushFollow(FOLLOW_groupByClause_in_body10016);
							groupByClause610=groupByClause();
							state._fsp--;

							stream_groupByClause.add(groupByClause610.getTree());
							}
							break;

					}

					// Hive.g:1404:4: ( havingClause )?
					int alt179=2;
					int LA179_0 = input.LA(1);
					if ( (LA179_0==KW_HAVING) ) {
						alt179=1;
					}
					switch (alt179) {
						case 1 :
							// Hive.g:1404:4: havingClause
							{
							pushFollow(FOLLOW_havingClause_in_body10022);
							havingClause611=havingClause();
							state._fsp--;

							stream_havingClause.add(havingClause611.getTree());
							}
							break;

					}

					// Hive.g:1405:4: ( orderByClause )?
					int alt180=2;
					int LA180_0 = input.LA(1);
					if ( (LA180_0==KW_ORDER) ) {
						alt180=1;
					}
					switch (alt180) {
						case 1 :
							// Hive.g:1405:4: orderByClause
							{
							pushFollow(FOLLOW_orderByClause_in_body10028);
							orderByClause612=orderByClause();
							state._fsp--;

							stream_orderByClause.add(orderByClause612.getTree());
							}
							break;

					}

					// Hive.g:1406:4: ( clusterByClause )?
					int alt181=2;
					int LA181_0 = input.LA(1);
					if ( (LA181_0==KW_CLUSTER) ) {
						alt181=1;
					}
					switch (alt181) {
						case 1 :
							// Hive.g:1406:4: clusterByClause
							{
							pushFollow(FOLLOW_clusterByClause_in_body10034);
							clusterByClause613=clusterByClause();
							state._fsp--;

							stream_clusterByClause.add(clusterByClause613.getTree());
							}
							break;

					}

					// Hive.g:1407:4: ( distributeByClause )?
					int alt182=2;
					int LA182_0 = input.LA(1);
					if ( (LA182_0==KW_DISTRIBUTE) ) {
						alt182=1;
					}
					switch (alt182) {
						case 1 :
							// Hive.g:1407:4: distributeByClause
							{
							pushFollow(FOLLOW_distributeByClause_in_body10040);
							distributeByClause614=distributeByClause();
							state._fsp--;

							stream_distributeByClause.add(distributeByClause614.getTree());
							}
							break;

					}

					// Hive.g:1408:4: ( sortByClause )?
					int alt183=2;
					int LA183_0 = input.LA(1);
					if ( (LA183_0==KW_SORT) ) {
						alt183=1;
					}
					switch (alt183) {
						case 1 :
							// Hive.g:1408:4: sortByClause
							{
							pushFollow(FOLLOW_sortByClause_in_body10046);
							sortByClause615=sortByClause();
							state._fsp--;

							stream_sortByClause.add(sortByClause615.getTree());
							}
							break;

					}

					// Hive.g:1409:4: ( limitClause )?
					int alt184=2;
					int LA184_0 = input.LA(1);
					if ( (LA184_0==KW_LIMIT) ) {
						alt184=1;
					}
					switch (alt184) {
						case 1 :
							// Hive.g:1409:4: limitClause
							{
							pushFollow(FOLLOW_limitClause_in_body10052);
							limitClause616=limitClause();
							state._fsp--;

							stream_limitClause.add(limitClause616.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: selectClause, limitClause, orderByClause, havingClause, whereClause, clusterByClause, sortByClause, groupByClause, distributeByClause, insertClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1409:17: -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
					{
						// Hive.g:1409:20: ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);
						// Hive.g:1409:33: ( insertClause )?
						if ( stream_insertClause.hasNext() ) {
							adaptor.addChild(root_1, stream_insertClause.nextTree());
						}
						stream_insertClause.reset();

						adaptor.addChild(root_1, stream_selectClause.nextTree());
						// Hive.g:1410:35: ( whereClause )?
						if ( stream_whereClause.hasNext() ) {
							adaptor.addChild(root_1, stream_whereClause.nextTree());
						}
						stream_whereClause.reset();

						// Hive.g:1410:48: ( groupByClause )?
						if ( stream_groupByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_groupByClause.nextTree());
						}
						stream_groupByClause.reset();

						// Hive.g:1410:63: ( havingClause )?
						if ( stream_havingClause.hasNext() ) {
							adaptor.addChild(root_1, stream_havingClause.nextTree());
						}
						stream_havingClause.reset();

						// Hive.g:1410:77: ( orderByClause )?
						if ( stream_orderByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_orderByClause.nextTree());
						}
						stream_orderByClause.reset();

						// Hive.g:1410:92: ( clusterByClause )?
						if ( stream_clusterByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_clusterByClause.nextTree());
						}
						stream_clusterByClause.reset();

						// Hive.g:1411:22: ( distributeByClause )?
						if ( stream_distributeByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_distributeByClause.nextTree());
						}
						stream_distributeByClause.reset();

						// Hive.g:1411:42: ( sortByClause )?
						if ( stream_sortByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_sortByClause.nextTree());
						}
						stream_sortByClause.reset();

						// Hive.g:1411:56: ( limitClause )?
						if ( stream_limitClause.hasNext() ) {
							adaptor.addChild(root_1, stream_limitClause.nextTree());
						}
						stream_limitClause.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1413:4: selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
					{
					pushFollow(FOLLOW_selectClause_in_body10140);
					selectClause617=selectClause();
					state._fsp--;

					stream_selectClause.add(selectClause617.getTree());
					// Hive.g:1414:4: ( whereClause )?
					int alt185=2;
					int LA185_0 = input.LA(1);
					if ( (LA185_0==KW_WHERE) ) {
						alt185=1;
					}
					switch (alt185) {
						case 1 :
							// Hive.g:1414:4: whereClause
							{
							pushFollow(FOLLOW_whereClause_in_body10145);
							whereClause618=whereClause();
							state._fsp--;

							stream_whereClause.add(whereClause618.getTree());
							}
							break;

					}

					// Hive.g:1415:4: ( groupByClause )?
					int alt186=2;
					int LA186_0 = input.LA(1);
					if ( (LA186_0==KW_GROUP) ) {
						alt186=1;
					}
					switch (alt186) {
						case 1 :
							// Hive.g:1415:4: groupByClause
							{
							pushFollow(FOLLOW_groupByClause_in_body10151);
							groupByClause619=groupByClause();
							state._fsp--;

							stream_groupByClause.add(groupByClause619.getTree());
							}
							break;

					}

					// Hive.g:1416:4: ( havingClause )?
					int alt187=2;
					int LA187_0 = input.LA(1);
					if ( (LA187_0==KW_HAVING) ) {
						alt187=1;
					}
					switch (alt187) {
						case 1 :
							// Hive.g:1416:4: havingClause
							{
							pushFollow(FOLLOW_havingClause_in_body10157);
							havingClause620=havingClause();
							state._fsp--;

							stream_havingClause.add(havingClause620.getTree());
							}
							break;

					}

					// Hive.g:1417:4: ( orderByClause )?
					int alt188=2;
					int LA188_0 = input.LA(1);
					if ( (LA188_0==KW_ORDER) ) {
						alt188=1;
					}
					switch (alt188) {
						case 1 :
							// Hive.g:1417:4: orderByClause
							{
							pushFollow(FOLLOW_orderByClause_in_body10163);
							orderByClause621=orderByClause();
							state._fsp--;

							stream_orderByClause.add(orderByClause621.getTree());
							}
							break;

					}

					// Hive.g:1418:4: ( clusterByClause )?
					int alt189=2;
					int LA189_0 = input.LA(1);
					if ( (LA189_0==KW_CLUSTER) ) {
						alt189=1;
					}
					switch (alt189) {
						case 1 :
							// Hive.g:1418:4: clusterByClause
							{
							pushFollow(FOLLOW_clusterByClause_in_body10169);
							clusterByClause622=clusterByClause();
							state._fsp--;

							stream_clusterByClause.add(clusterByClause622.getTree());
							}
							break;

					}

					// Hive.g:1419:4: ( distributeByClause )?
					int alt190=2;
					int LA190_0 = input.LA(1);
					if ( (LA190_0==KW_DISTRIBUTE) ) {
						alt190=1;
					}
					switch (alt190) {
						case 1 :
							// Hive.g:1419:4: distributeByClause
							{
							pushFollow(FOLLOW_distributeByClause_in_body10175);
							distributeByClause623=distributeByClause();
							state._fsp--;

							stream_distributeByClause.add(distributeByClause623.getTree());
							}
							break;

					}

					// Hive.g:1420:4: ( sortByClause )?
					int alt191=2;
					int LA191_0 = input.LA(1);
					if ( (LA191_0==KW_SORT) ) {
						alt191=1;
					}
					switch (alt191) {
						case 1 :
							// Hive.g:1420:4: sortByClause
							{
							pushFollow(FOLLOW_sortByClause_in_body10181);
							sortByClause624=sortByClause();
							state._fsp--;

							stream_sortByClause.add(sortByClause624.getTree());
							}
							break;

					}

					// Hive.g:1421:4: ( limitClause )?
					int alt192=2;
					int LA192_0 = input.LA(1);
					if ( (LA192_0==KW_LIMIT) ) {
						alt192=1;
					}
					switch (alt192) {
						case 1 :
							// Hive.g:1421:4: limitClause
							{
							pushFollow(FOLLOW_limitClause_in_body10187);
							limitClause625=limitClause();
							state._fsp--;

							stream_limitClause.add(limitClause625.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: selectClause, orderByClause, groupByClause, whereClause, distributeByClause, limitClause, havingClause, sortByClause, clusterByClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1421:17: -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
					{
						// Hive.g:1421:20: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);
						// Hive.g:1421:33: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_2);
						// Hive.g:1421:51: ^( TOK_DIR TOK_TMP_FILE )
						{
						CommonTree root_3 = (CommonTree)adaptor.nil();
						root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_3);
						adaptor.addChild(root_3, (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_1, stream_selectClause.nextTree());
						// Hive.g:1422:35: ( whereClause )?
						if ( stream_whereClause.hasNext() ) {
							adaptor.addChild(root_1, stream_whereClause.nextTree());
						}
						stream_whereClause.reset();

						// Hive.g:1422:48: ( groupByClause )?
						if ( stream_groupByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_groupByClause.nextTree());
						}
						stream_groupByClause.reset();

						// Hive.g:1422:63: ( havingClause )?
						if ( stream_havingClause.hasNext() ) {
							adaptor.addChild(root_1, stream_havingClause.nextTree());
						}
						stream_havingClause.reset();

						// Hive.g:1422:77: ( orderByClause )?
						if ( stream_orderByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_orderByClause.nextTree());
						}
						stream_orderByClause.reset();

						// Hive.g:1422:92: ( clusterByClause )?
						if ( stream_clusterByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_clusterByClause.nextTree());
						}
						stream_clusterByClause.reset();

						// Hive.g:1423:22: ( distributeByClause )?
						if ( stream_distributeByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_distributeByClause.nextTree());
						}
						stream_distributeByClause.reset();

						// Hive.g:1423:42: ( sortByClause )?
						if ( stream_sortByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_sortByClause.nextTree());
						}
						stream_sortByClause.reset();

						// Hive.g:1423:56: ( limitClause )?
						if ( stream_limitClause.hasNext() ) {
							adaptor.addChild(root_1, stream_limitClause.nextTree());
						}
						stream_limitClause.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "body"


	public static class insertClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "insertClause"
	// Hive.g:1426:1: insertClause : ( KW_INSERT KW_OVERWRITE destination -> ^( TOK_DESTINATION destination ) | KW_INSERT KW_INTO KW_TABLE tableOrPartition -> ^( TOK_INSERT_INTO ^( tableOrPartition ) ) );
	public final HiveParser.insertClause_return insertClause() throws RecognitionException {
		HiveParser.insertClause_return retval = new HiveParser.insertClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_INSERT626=null;
		Token KW_OVERWRITE627=null;
		Token KW_INSERT629=null;
		Token KW_INTO630=null;
		Token KW_TABLE631=null;
		ParserRuleReturnScope destination628 =null;
		ParserRuleReturnScope tableOrPartition632 =null;

		CommonTree KW_INSERT626_tree=null;
		CommonTree KW_OVERWRITE627_tree=null;
		CommonTree KW_INSERT629_tree=null;
		CommonTree KW_INTO630_tree=null;
		CommonTree KW_TABLE631_tree=null;
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
		RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
		RewriteRuleSubtreeStream stream_destination=new RewriteRuleSubtreeStream(adaptor,"rule destination");

		 msgs.push("insert clause"); 
		try {
			// Hive.g:1429:4: ( KW_INSERT KW_OVERWRITE destination -> ^( TOK_DESTINATION destination ) | KW_INSERT KW_INTO KW_TABLE tableOrPartition -> ^( TOK_INSERT_INTO ^( tableOrPartition ) ) )
			int alt194=2;
			int LA194_0 = input.LA(1);
			if ( (LA194_0==KW_INSERT) ) {
				int LA194_1 = input.LA(2);
				if ( (LA194_1==KW_OVERWRITE) ) {
					alt194=1;
				}
				else if ( (LA194_1==KW_INTO) ) {
					alt194=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 194, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 194, 0, input);
				throw nvae;
			}

			switch (alt194) {
				case 1 :
					// Hive.g:1430:6: KW_INSERT KW_OVERWRITE destination
					{
					KW_INSERT626=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause10302);  
					stream_KW_INSERT.add(KW_INSERT626);

					KW_OVERWRITE627=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_insertClause10304);  
					stream_KW_OVERWRITE.add(KW_OVERWRITE627);

					pushFollow(FOLLOW_destination_in_insertClause10306);
					destination628=destination();
					state._fsp--;

					stream_destination.add(destination628.getTree());
					// AST REWRITE
					// elements: destination
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1430:41: -> ^( TOK_DESTINATION destination )
					{
						// Hive.g:1430:44: ^( TOK_DESTINATION destination )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_1);
						adaptor.addChild(root_1, stream_destination.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1431:6: KW_INSERT KW_INTO KW_TABLE tableOrPartition
					{
					KW_INSERT629=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause10321);  
					stream_KW_INSERT.add(KW_INSERT629);

					KW_INTO630=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_insertClause10323);  
					stream_KW_INTO.add(KW_INTO630);

					KW_TABLE631=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_insertClause10325);  
					stream_KW_TABLE.add(KW_TABLE631);

					pushFollow(FOLLOW_tableOrPartition_in_insertClause10327);
					tableOrPartition632=tableOrPartition();
					state._fsp--;

					stream_tableOrPartition.add(tableOrPartition632.getTree());
					// AST REWRITE
					// elements: tableOrPartition
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1432:8: -> ^( TOK_INSERT_INTO ^( tableOrPartition ) )
					{
						// Hive.g:1432:11: ^( TOK_INSERT_INTO ^( tableOrPartition ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT_INTO, "TOK_INSERT_INTO"), root_1);
						// Hive.g:1432:29: ^( tableOrPartition )
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot(stream_tableOrPartition.nextNode(), root_2);
						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insertClause"


	public static class destination_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "destination"
	// Hive.g:1435:1: destination : ( KW_LOCAL KW_DIRECTORY StringLiteral -> ^( TOK_LOCAL_DIR StringLiteral ) | KW_DIRECTORY StringLiteral -> ^( TOK_DIR StringLiteral ) | KW_TABLE tableOrPartition -> ^( tableOrPartition ) );
	public final HiveParser.destination_return destination() throws RecognitionException {
		HiveParser.destination_return retval = new HiveParser.destination_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_LOCAL633=null;
		Token KW_DIRECTORY634=null;
		Token StringLiteral635=null;
		Token KW_DIRECTORY636=null;
		Token StringLiteral637=null;
		Token KW_TABLE638=null;
		ParserRuleReturnScope tableOrPartition639 =null;

		CommonTree KW_LOCAL633_tree=null;
		CommonTree KW_DIRECTORY634_tree=null;
		CommonTree StringLiteral635_tree=null;
		CommonTree KW_DIRECTORY636_tree=null;
		CommonTree StringLiteral637_tree=null;
		CommonTree KW_TABLE638_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_DIRECTORY=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORY");
		RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");

		 msgs.push("destination specification"); 
		try {
			// Hive.g:1438:4: ( KW_LOCAL KW_DIRECTORY StringLiteral -> ^( TOK_LOCAL_DIR StringLiteral ) | KW_DIRECTORY StringLiteral -> ^( TOK_DIR StringLiteral ) | KW_TABLE tableOrPartition -> ^( tableOrPartition ) )
			int alt195=3;
			switch ( input.LA(1) ) {
			case KW_LOCAL:
				{
				alt195=1;
				}
				break;
			case KW_DIRECTORY:
				{
				alt195=2;
				}
				break;
			case KW_TABLE:
				{
				alt195=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 195, 0, input);
				throw nvae;
			}
			switch (alt195) {
				case 1 :
					// Hive.g:1439:6: KW_LOCAL KW_DIRECTORY StringLiteral
					{
					KW_LOCAL633=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_destination10374);  
					stream_KW_LOCAL.add(KW_LOCAL633);

					KW_DIRECTORY634=(Token)match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination10376);  
					stream_KW_DIRECTORY.add(KW_DIRECTORY634);

					StringLiteral635=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_destination10378);  
					stream_StringLiteral.add(StringLiteral635);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1439:42: -> ^( TOK_LOCAL_DIR StringLiteral )
					{
						// Hive.g:1439:45: ^( TOK_LOCAL_DIR StringLiteral )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LOCAL_DIR, "TOK_LOCAL_DIR"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1440:6: KW_DIRECTORY StringLiteral
					{
					KW_DIRECTORY636=(Token)match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination10393);  
					stream_KW_DIRECTORY.add(KW_DIRECTORY636);

					StringLiteral637=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_destination10395);  
					stream_StringLiteral.add(StringLiteral637);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1440:33: -> ^( TOK_DIR StringLiteral )
					{
						// Hive.g:1440:36: ^( TOK_DIR StringLiteral )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// Hive.g:1441:6: KW_TABLE tableOrPartition
					{
					KW_TABLE638=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_destination10410);  
					stream_KW_TABLE.add(KW_TABLE638);

					pushFollow(FOLLOW_tableOrPartition_in_destination10412);
					tableOrPartition639=tableOrPartition();
					state._fsp--;

					stream_tableOrPartition.add(tableOrPartition639.getTree());
					// AST REWRITE
					// elements: tableOrPartition
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1441:32: -> ^( tableOrPartition )
					{
						// Hive.g:1441:35: ^( tableOrPartition )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_tableOrPartition.nextNode(), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "destination"


	public static class limitClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "limitClause"
	// Hive.g:1444:1: limitClause : KW_LIMIT num= Number -> ^( TOK_LIMIT $num) ;
	public final HiveParser.limitClause_return limitClause() throws RecognitionException {
		HiveParser.limitClause_return retval = new HiveParser.limitClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token num=null;
		Token KW_LIMIT640=null;

		CommonTree num_tree=null;
		CommonTree KW_LIMIT640_tree=null;
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_LIMIT=new RewriteRuleTokenStream(adaptor,"token KW_LIMIT");

		 msgs.push("limit clause"); 
		try {
			// Hive.g:1447:4: ( KW_LIMIT num= Number -> ^( TOK_LIMIT $num) )
			// Hive.g:1448:4: KW_LIMIT num= Number
			{
			KW_LIMIT640=(Token)match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_limitClause10446);  
			stream_KW_LIMIT.add(KW_LIMIT640);

			num=(Token)match(input,Number,FOLLOW_Number_in_limitClause10450);  
			stream_Number.add(num);

			// AST REWRITE
			// elements: num
			// token labels: num
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1448:24: -> ^( TOK_LIMIT $num)
			{
				// Hive.g:1448:27: ^( TOK_LIMIT $num)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LIMIT, "TOK_LIMIT"), root_1);
				adaptor.addChild(root_1, stream_num.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "limitClause"


	public static class selectClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selectClause"
	// Hive.g:1453:1: selectClause : ( KW_SELECT ( hintClause )? ( ( ( KW_ALL |dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) ) -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList ) -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList ) -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) ) | trfmClause -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) ) );
	public final HiveParser.selectClause_return selectClause() throws RecognitionException {
		HiveParser.selectClause_return retval = new HiveParser.selectClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token dist=null;
		Token transform=null;
		Token KW_SELECT641=null;
		Token KW_ALL643=null;
		ParserRuleReturnScope hintClause642 =null;
		ParserRuleReturnScope selectList644 =null;
		ParserRuleReturnScope selectTrfmClause645 =null;
		ParserRuleReturnScope trfmClause646 =null;

		CommonTree dist_tree=null;
		CommonTree transform_tree=null;
		CommonTree KW_SELECT641_tree=null;
		CommonTree KW_ALL643_tree=null;
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
		RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
		RewriteRuleTokenStream stream_KW_TRANSFORM=new RewriteRuleTokenStream(adaptor,"token KW_TRANSFORM");
		RewriteRuleTokenStream stream_KW_DISTINCT=new RewriteRuleTokenStream(adaptor,"token KW_DISTINCT");
		RewriteRuleSubtreeStream stream_selectList=new RewriteRuleSubtreeStream(adaptor,"rule selectList");
		RewriteRuleSubtreeStream stream_hintClause=new RewriteRuleSubtreeStream(adaptor,"rule hintClause");
		RewriteRuleSubtreeStream stream_trfmClause=new RewriteRuleSubtreeStream(adaptor,"rule trfmClause");
		RewriteRuleSubtreeStream stream_selectTrfmClause=new RewriteRuleSubtreeStream(adaptor,"rule selectTrfmClause");

		 msgs.push("select clause"); 
		try {
			// Hive.g:1456:5: ( KW_SELECT ( hintClause )? ( ( ( KW_ALL |dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) ) -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList ) -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList ) -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) ) | trfmClause -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) ) )
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==KW_SELECT) ) {
				alt199=1;
			}
			else if ( (LA199_0==KW_MAP||LA199_0==KW_REDUCE) ) {
				alt199=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 199, 0, input);
				throw nvae;
			}

			switch (alt199) {
				case 1 :
					// Hive.g:1457:5: KW_SELECT ( hintClause )? ( ( ( KW_ALL |dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) )
					{
					KW_SELECT641=(Token)match(input,KW_SELECT,FOLLOW_KW_SELECT_in_selectClause10491);  
					stream_KW_SELECT.add(KW_SELECT641);

					// Hive.g:1457:15: ( hintClause )?
					int alt196=2;
					int LA196_0 = input.LA(1);
					if ( (LA196_0==DIVIDE) ) {
						alt196=1;
					}
					switch (alt196) {
						case 1 :
							// Hive.g:1457:15: hintClause
							{
							pushFollow(FOLLOW_hintClause_in_selectClause10493);
							hintClause642=hintClause();
							state._fsp--;

							stream_hintClause.add(hintClause642.getTree());
							}
							break;

					}

					// Hive.g:1457:27: ( ( ( KW_ALL |dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) )
					int alt198=2;
					int LA198_0 = input.LA(1);
					if ( (LA198_0==BigintLiteral||LA198_0==CharSetName||LA198_0==Identifier||LA198_0==KW_ALL||LA198_0==KW_ARRAY||(LA198_0 >= KW_CASE && LA198_0 <= KW_CAST)||LA198_0==KW_DISTINCT||LA198_0==KW_FALSE||LA198_0==KW_IF||LA198_0==KW_MAP||LA198_0==KW_NOT||LA198_0==KW_NULL||LA198_0==KW_STRUCT||LA198_0==KW_TRUE||LA198_0==KW_UNIONTYPE||LA198_0==LPAREN||LA198_0==MINUS||(LA198_0 >= Number && LA198_0 <= PLUS)||(LA198_0 >= STAR && LA198_0 <= TILDE)||LA198_0==TinyintLiteral) ) {
						alt198=1;
					}
					else if ( (LA198_0==KW_TRANSFORM) ) {
						alt198=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 198, 0, input);
						throw nvae;
					}

					switch (alt198) {
						case 1 :
							// Hive.g:1457:28: ( ( KW_ALL |dist= KW_DISTINCT )? selectList )
							{
							// Hive.g:1457:28: ( ( KW_ALL |dist= KW_DISTINCT )? selectList )
							// Hive.g:1457:29: ( KW_ALL |dist= KW_DISTINCT )? selectList
							{
							// Hive.g:1457:29: ( KW_ALL |dist= KW_DISTINCT )?
							int alt197=3;
							int LA197_0 = input.LA(1);
							if ( (LA197_0==KW_ALL) ) {
								alt197=1;
							}
							else if ( (LA197_0==KW_DISTINCT) ) {
								alt197=2;
							}
							switch (alt197) {
								case 1 :
									// Hive.g:1457:30: KW_ALL
									{
									KW_ALL643=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_selectClause10499);  
									stream_KW_ALL.add(KW_ALL643);

									}
									break;
								case 2 :
									// Hive.g:1457:39: dist= KW_DISTINCT
									{
									dist=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_selectClause10505);  
									stream_KW_DISTINCT.add(dist);

									}
									break;

							}

							pushFollow(FOLLOW_selectList_in_selectClause10509);
							selectList644=selectList();
							state._fsp--;

							stream_selectList.add(selectList644.getTree());
							}

							}
							break;
						case 2 :
							// Hive.g:1458:29: (transform= KW_TRANSFORM selectTrfmClause )
							{
							// Hive.g:1458:29: (transform= KW_TRANSFORM selectTrfmClause )
							// Hive.g:1458:30: transform= KW_TRANSFORM selectTrfmClause
							{
							transform=(Token)match(input,KW_TRANSFORM,FOLLOW_KW_TRANSFORM_in_selectClause10543);  
							stream_KW_TRANSFORM.add(transform);

							pushFollow(FOLLOW_selectTrfmClause_in_selectClause10545);
							selectTrfmClause645=selectTrfmClause();
							state._fsp--;

							stream_selectTrfmClause.add(selectTrfmClause645.getTree());
							}

							}
							break;

					}

					// AST REWRITE
					// elements: hintClause, selectList, hintClause, selectTrfmClause, hintClause, selectList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1459:6: -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList )
					if (transform == null && dist == null) {
						// Hive.g:1459:48: ^( TOK_SELECT ( hintClause )? selectList )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_1);
						// Hive.g:1459:61: ( hintClause )?
						if ( stream_hintClause.hasNext() ) {
							adaptor.addChild(root_1, stream_hintClause.nextTree());
						}
						stream_hintClause.reset();

						adaptor.addChild(root_1, stream_selectList.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}

					else // 1460:6: -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList )
					if (transform == null && dist != null) {
						// Hive.g:1460:48: ^( TOK_SELECTDI ( hintClause )? selectList )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELECTDI, "TOK_SELECTDI"), root_1);
						// Hive.g:1460:63: ( hintClause )?
						if ( stream_hintClause.hasNext() ) {
							adaptor.addChild(root_1, stream_hintClause.nextTree());
						}
						stream_hintClause.reset();

						adaptor.addChild(root_1, stream_selectList.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}

					else // 1461:6: -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) )
					{
						// Hive.g:1461:9: ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_1);
						// Hive.g:1461:22: ( hintClause )?
						if ( stream_hintClause.hasNext() ) {
							adaptor.addChild(root_1, stream_hintClause.nextTree());
						}
						stream_hintClause.reset();

						// Hive.g:1461:34: ^( TOK_SELEXPR selectTrfmClause )
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_2);
						adaptor.addChild(root_2, stream_selectTrfmClause.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1463:5: trfmClause
					{
					pushFollow(FOLLOW_trfmClause_in_selectClause10616);
					trfmClause646=trfmClause();
					state._fsp--;

					stream_trfmClause.add(trfmClause646.getTree());
					// AST REWRITE
					// elements: trfmClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1463:17: -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) )
					{
						// Hive.g:1463:19: ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_1);
						// Hive.g:1463:32: ^( TOK_SELEXPR trfmClause )
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_2);
						adaptor.addChild(root_2, stream_trfmClause.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selectClause"


	public static class selectList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selectList"
	// Hive.g:1466:1: selectList : selectItem ( COMMA selectItem )* -> ( selectItem )+ ;
	public final HiveParser.selectList_return selectList() throws RecognitionException {
		HiveParser.selectList_return retval = new HiveParser.selectList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA648=null;
		ParserRuleReturnScope selectItem647 =null;
		ParserRuleReturnScope selectItem649 =null;

		CommonTree COMMA648_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_selectItem=new RewriteRuleSubtreeStream(adaptor,"rule selectItem");

		 msgs.push("select list"); 
		try {
			// Hive.g:1469:5: ( selectItem ( COMMA selectItem )* -> ( selectItem )+ )
			// Hive.g:1470:5: selectItem ( COMMA selectItem )*
			{
			pushFollow(FOLLOW_selectItem_in_selectList10659);
			selectItem647=selectItem();
			state._fsp--;

			stream_selectItem.add(selectItem647.getTree());
			// Hive.g:1470:16: ( COMMA selectItem )*
			loop200:
			while (true) {
				int alt200=2;
				int LA200_0 = input.LA(1);
				if ( (LA200_0==COMMA) ) {
					alt200=1;
				}

				switch (alt200) {
				case 1 :
					// Hive.g:1470:18: COMMA selectItem
					{
					COMMA648=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectList10663);  
					stream_COMMA.add(COMMA648);

					pushFollow(FOLLOW_selectItem_in_selectList10666);
					selectItem649=selectItem();
					state._fsp--;

					stream_selectItem.add(selectItem649.getTree());
					}
					break;

				default :
					break loop200;
				}
			}

			// AST REWRITE
			// elements: selectItem
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1470:39: -> ( selectItem )+
			{
				if ( !(stream_selectItem.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_selectItem.hasNext() ) {
					adaptor.addChild(root_0, stream_selectItem.nextTree());
				}
				stream_selectItem.reset();

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selectList"


	public static class selectTrfmClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selectTrfmClause"
	// Hive.g:1473:1: selectTrfmClause : LPAREN selectExpressionList RPAREN inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) ;
	public final HiveParser.selectTrfmClause_return selectTrfmClause() throws RecognitionException {
		HiveParser.selectTrfmClause_return retval = new HiveParser.selectTrfmClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN650=null;
		Token RPAREN652=null;
		Token KW_USING653=null;
		Token StringLiteral654=null;
		Token KW_AS655=null;
		Token LPAREN656=null;
		Token RPAREN659=null;
		ParserRuleReturnScope inSerde =null;
		ParserRuleReturnScope inRec =null;
		ParserRuleReturnScope outSerde =null;
		ParserRuleReturnScope outRec =null;
		ParserRuleReturnScope selectExpressionList651 =null;
		ParserRuleReturnScope aliasList657 =null;
		ParserRuleReturnScope columnNameTypeList658 =null;
		ParserRuleReturnScope aliasList660 =null;
		ParserRuleReturnScope columnNameTypeList661 =null;

		CommonTree LPAREN650_tree=null;
		CommonTree RPAREN652_tree=null;
		CommonTree KW_USING653_tree=null;
		CommonTree StringLiteral654_tree=null;
		CommonTree KW_AS655_tree=null;
		CommonTree LPAREN656_tree=null;
		CommonTree RPAREN659_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_rowFormat=new RewriteRuleSubtreeStream(adaptor,"rule rowFormat");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
		RewriteRuleSubtreeStream stream_recordReader=new RewriteRuleSubtreeStream(adaptor,"rule recordReader");
		RewriteRuleSubtreeStream stream_aliasList=new RewriteRuleSubtreeStream(adaptor,"rule aliasList");
		RewriteRuleSubtreeStream stream_selectExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule selectExpressionList");
		RewriteRuleSubtreeStream stream_recordWriter=new RewriteRuleSubtreeStream(adaptor,"rule recordWriter");

		 msgs.push("transform clause"); 
		try {
			// Hive.g:1476:5: ( LPAREN selectExpressionList RPAREN inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) )
			// Hive.g:1477:5: LPAREN selectExpressionList RPAREN inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader
			{
			LPAREN650=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_selectTrfmClause10705);  
			stream_LPAREN.add(LPAREN650);

			pushFollow(FOLLOW_selectExpressionList_in_selectTrfmClause10707);
			selectExpressionList651=selectExpressionList();
			state._fsp--;

			stream_selectExpressionList.add(selectExpressionList651.getTree());
			RPAREN652=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_selectTrfmClause10709);  
			stream_RPAREN.add(RPAREN652);

			pushFollow(FOLLOW_rowFormat_in_selectTrfmClause10717);
			inSerde=rowFormat();
			state._fsp--;

			stream_rowFormat.add(inSerde.getTree());
			pushFollow(FOLLOW_recordWriter_in_selectTrfmClause10721);
			inRec=recordWriter();
			state._fsp--;

			stream_recordWriter.add(inRec.getTree());
			KW_USING653=(Token)match(input,KW_USING,FOLLOW_KW_USING_in_selectTrfmClause10727);  
			stream_KW_USING.add(KW_USING653);

			StringLiteral654=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_selectTrfmClause10729);  
			stream_StringLiteral.add(StringLiteral654);

			// Hive.g:1480:5: ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )?
			int alt204=2;
			int LA204_0 = input.LA(1);
			if ( (LA204_0==KW_AS) ) {
				alt204=1;
			}
			switch (alt204) {
				case 1 :
					// Hive.g:1480:7: KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
					{
					KW_AS655=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_selectTrfmClause10737);  
					stream_KW_AS.add(KW_AS655);

					// Hive.g:1480:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
					int alt203=2;
					int LA203_0 = input.LA(1);
					if ( (LA203_0==LPAREN) ) {
						alt203=1;
					}
					else if ( (LA203_0==Identifier) ) {
						alt203=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 203, 0, input);
						throw nvae;
					}

					switch (alt203) {
						case 1 :
							// Hive.g:1480:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
							{
							// Hive.g:1480:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
							// Hive.g:1480:15: LPAREN ( aliasList | columnNameTypeList ) RPAREN
							{
							LPAREN656=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_selectTrfmClause10741);  
							stream_LPAREN.add(LPAREN656);

							// Hive.g:1480:22: ( aliasList | columnNameTypeList )
							int alt201=2;
							int LA201_0 = input.LA(1);
							if ( (LA201_0==Identifier) ) {
								int LA201_1 = input.LA(2);
								if ( (LA201_1==COMMA||LA201_1==RPAREN) ) {
									alt201=1;
								}
								else if ( (LA201_1==KW_ARRAY||(LA201_1 >= KW_BIGINT && LA201_1 <= KW_BOOLEAN)||(LA201_1 >= KW_DATE && LA201_1 <= KW_DATETIME)||LA201_1==KW_DOUBLE||LA201_1==KW_FLOAT||LA201_1==KW_INT||LA201_1==KW_MAP||LA201_1==KW_SMALLINT||(LA201_1 >= KW_STRING && LA201_1 <= KW_STRUCT)||(LA201_1 >= KW_TIMESTAMP && LA201_1 <= KW_TINYINT)||LA201_1==KW_UNIONTYPE) ) {
									alt201=2;
								}

								else {
									int nvaeMark = input.mark();
									try {
										input.consume();
										NoViableAltException nvae =
											new NoViableAltException("", 201, 1, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 201, 0, input);
								throw nvae;
							}

							switch (alt201) {
								case 1 :
									// Hive.g:1480:23: aliasList
									{
									pushFollow(FOLLOW_aliasList_in_selectTrfmClause10744);
									aliasList657=aliasList();
									state._fsp--;

									stream_aliasList.add(aliasList657.getTree());
									}
									break;
								case 2 :
									// Hive.g:1480:35: columnNameTypeList
									{
									pushFollow(FOLLOW_columnNameTypeList_in_selectTrfmClause10748);
									columnNameTypeList658=columnNameTypeList();
									state._fsp--;

									stream_columnNameTypeList.add(columnNameTypeList658.getTree());
									}
									break;

							}

							RPAREN659=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_selectTrfmClause10751);  
							stream_RPAREN.add(RPAREN659);

							}

							}
							break;
						case 2 :
							// Hive.g:1480:65: ( aliasList | columnNameTypeList )
							{
							// Hive.g:1480:65: ( aliasList | columnNameTypeList )
							int alt202=2;
							int LA202_0 = input.LA(1);
							if ( (LA202_0==Identifier) ) {
								switch ( input.LA(2) ) {
								case EOF:
								case COMMA:
								case KW_CLUSTER:
								case KW_DISTRIBUTE:
								case KW_FROM:
								case KW_GROUP:
								case KW_HAVING:
								case KW_INSERT:
								case KW_LIMIT:
								case KW_ORDER:
								case KW_RECORDREADER:
								case KW_REDUCE:
								case KW_ROW:
								case KW_SELECT:
								case KW_SORT:
								case KW_UNION:
								case KW_WHERE:
								case RPAREN:
									{
									alt202=1;
									}
									break;
								case KW_MAP:
									{
									int LA202_19 = input.LA(3);
									if ( (LA202_19==LESSTHAN) ) {
										alt202=2;
									}
									else if ( (LA202_19==BigintLiteral||LA202_19==CharSetName||LA202_19==Identifier||LA202_19==KW_ARRAY||(LA202_19 >= KW_CASE && LA202_19 <= KW_CAST)||LA202_19==KW_FALSE||LA202_19==KW_IF||LA202_19==KW_MAP||LA202_19==KW_NOT||LA202_19==KW_NULL||LA202_19==KW_STRUCT||LA202_19==KW_TRUE||LA202_19==KW_UNIONTYPE||LA202_19==LPAREN||LA202_19==MINUS||(LA202_19 >= Number && LA202_19 <= PLUS)||(LA202_19 >= STAR && LA202_19 <= TILDE)||LA202_19==TinyintLiteral) ) {
										alt202=1;
									}

									else {
										int nvaeMark = input.mark();
										try {
											for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
												input.consume();
											}
											NoViableAltException nvae =
												new NoViableAltException("", 202, 19, input);
											throw nvae;
										} finally {
											input.rewind(nvaeMark);
										}
									}

									}
									break;
								case KW_ARRAY:
								case KW_BIGINT:
								case KW_BINARY:
								case KW_BOOLEAN:
								case KW_DATE:
								case KW_DATETIME:
								case KW_DOUBLE:
								case KW_FLOAT:
								case KW_INT:
								case KW_SMALLINT:
								case KW_STRING:
								case KW_STRUCT:
								case KW_TIMESTAMP:
								case KW_TINYINT:
								case KW_UNIONTYPE:
									{
									alt202=2;
									}
									break;
								default:
									int nvaeMark = input.mark();
									try {
										input.consume();
										NoViableAltException nvae =
											new NoViableAltException("", 202, 1, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}
							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 202, 0, input);
								throw nvae;
							}

							switch (alt202) {
								case 1 :
									// Hive.g:1480:66: aliasList
									{
									pushFollow(FOLLOW_aliasList_in_selectTrfmClause10757);
									aliasList660=aliasList();
									state._fsp--;

									stream_aliasList.add(aliasList660.getTree());
									}
									break;
								case 2 :
									// Hive.g:1480:78: columnNameTypeList
									{
									pushFollow(FOLLOW_columnNameTypeList_in_selectTrfmClause10761);
									columnNameTypeList661=columnNameTypeList();
									state._fsp--;

									stream_columnNameTypeList.add(columnNameTypeList661.getTree());
									}
									break;

							}

							}
							break;

					}

					}
					break;

			}

			pushFollow(FOLLOW_rowFormat_in_selectTrfmClause10773);
			outSerde=rowFormat();
			state._fsp--;

			stream_rowFormat.add(outSerde.getTree());
			pushFollow(FOLLOW_recordReader_in_selectTrfmClause10777);
			outRec=recordReader();
			state._fsp--;

			stream_recordReader.add(outRec.getTree());
			// AST REWRITE
			// elements: aliasList, outRec, inRec, columnNameTypeList, inSerde, outSerde, selectExpressionList, StringLiteral
			// token labels: 
			// rule labels: retval, inSerde, inRec, outRec, outSerde
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_inSerde=new RewriteRuleSubtreeStream(adaptor,"rule inSerde",inSerde!=null?inSerde.getTree():null);
			RewriteRuleSubtreeStream stream_inRec=new RewriteRuleSubtreeStream(adaptor,"rule inRec",inRec!=null?inRec.getTree():null);
			RewriteRuleSubtreeStream stream_outRec=new RewriteRuleSubtreeStream(adaptor,"rule outRec",outRec!=null?outRec.getTree():null);
			RewriteRuleSubtreeStream stream_outSerde=new RewriteRuleSubtreeStream(adaptor,"rule outSerde",outSerde!=null?outSerde.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1482:5: -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
			{
				// Hive.g:1482:8: ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TRANSFORM, "TOK_TRANSFORM"), root_1);
				adaptor.addChild(root_1, stream_selectExpressionList.nextTree());
				adaptor.addChild(root_1, stream_inSerde.nextTree());
				adaptor.addChild(root_1, stream_inRec.nextTree());
				adaptor.addChild(root_1, stream_StringLiteral.nextNode());
				adaptor.addChild(root_1, stream_outSerde.nextTree());
				adaptor.addChild(root_1, stream_outRec.nextTree());
				// Hive.g:1482:93: ( aliasList )?
				if ( stream_aliasList.hasNext() ) {
					adaptor.addChild(root_1, stream_aliasList.nextTree());
				}
				stream_aliasList.reset();

				// Hive.g:1482:104: ( columnNameTypeList )?
				if ( stream_columnNameTypeList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				}
				stream_columnNameTypeList.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selectTrfmClause"


	public static class hintClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "hintClause"
	// Hive.g:1485:1: hintClause : DIVIDE STAR PLUS hintList STAR DIVIDE -> ^( TOK_HINTLIST hintList ) ;
	public final HiveParser.hintClause_return hintClause() throws RecognitionException {
		HiveParser.hintClause_return retval = new HiveParser.hintClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DIVIDE662=null;
		Token STAR663=null;
		Token PLUS664=null;
		Token STAR666=null;
		Token DIVIDE667=null;
		ParserRuleReturnScope hintList665 =null;

		CommonTree DIVIDE662_tree=null;
		CommonTree STAR663_tree=null;
		CommonTree PLUS664_tree=null;
		CommonTree STAR666_tree=null;
		CommonTree DIVIDE667_tree=null;
		RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
		RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
		RewriteRuleTokenStream stream_DIVIDE=new RewriteRuleTokenStream(adaptor,"token DIVIDE");
		RewriteRuleSubtreeStream stream_hintList=new RewriteRuleSubtreeStream(adaptor,"rule hintList");

		 msgs.push("hint clause"); 
		try {
			// Hive.g:1488:5: ( DIVIDE STAR PLUS hintList STAR DIVIDE -> ^( TOK_HINTLIST hintList ) )
			// Hive.g:1489:5: DIVIDE STAR PLUS hintList STAR DIVIDE
			{
			DIVIDE662=(Token)match(input,DIVIDE,FOLLOW_DIVIDE_in_hintClause10840);  
			stream_DIVIDE.add(DIVIDE662);

			STAR663=(Token)match(input,STAR,FOLLOW_STAR_in_hintClause10842);  
			stream_STAR.add(STAR663);

			PLUS664=(Token)match(input,PLUS,FOLLOW_PLUS_in_hintClause10844);  
			stream_PLUS.add(PLUS664);

			pushFollow(FOLLOW_hintList_in_hintClause10846);
			hintList665=hintList();
			state._fsp--;

			stream_hintList.add(hintList665.getTree());
			STAR666=(Token)match(input,STAR,FOLLOW_STAR_in_hintClause10848);  
			stream_STAR.add(STAR666);

			DIVIDE667=(Token)match(input,DIVIDE,FOLLOW_DIVIDE_in_hintClause10850);  
			stream_DIVIDE.add(DIVIDE667);

			// AST REWRITE
			// elements: hintList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1489:43: -> ^( TOK_HINTLIST hintList )
			{
				// Hive.g:1489:46: ^( TOK_HINTLIST hintList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_HINTLIST, "TOK_HINTLIST"), root_1);
				adaptor.addChild(root_1, stream_hintList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hintClause"


	public static class hintList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "hintList"
	// Hive.g:1492:1: hintList : hintItem ( COMMA hintItem )* -> ( hintItem )+ ;
	public final HiveParser.hintList_return hintList() throws RecognitionException {
		HiveParser.hintList_return retval = new HiveParser.hintList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA669=null;
		ParserRuleReturnScope hintItem668 =null;
		ParserRuleReturnScope hintItem670 =null;

		CommonTree COMMA669_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_hintItem=new RewriteRuleSubtreeStream(adaptor,"rule hintItem");

		 msgs.push("hint list"); 
		try {
			// Hive.g:1495:5: ( hintItem ( COMMA hintItem )* -> ( hintItem )+ )
			// Hive.g:1496:5: hintItem ( COMMA hintItem )*
			{
			pushFollow(FOLLOW_hintItem_in_hintList10889);
			hintItem668=hintItem();
			state._fsp--;

			stream_hintItem.add(hintItem668.getTree());
			// Hive.g:1496:14: ( COMMA hintItem )*
			loop205:
			while (true) {
				int alt205=2;
				int LA205_0 = input.LA(1);
				if ( (LA205_0==COMMA) ) {
					alt205=1;
				}

				switch (alt205) {
				case 1 :
					// Hive.g:1496:15: COMMA hintItem
					{
					COMMA669=(Token)match(input,COMMA,FOLLOW_COMMA_in_hintList10892);  
					stream_COMMA.add(COMMA669);

					pushFollow(FOLLOW_hintItem_in_hintList10894);
					hintItem670=hintItem();
					state._fsp--;

					stream_hintItem.add(hintItem670.getTree());
					}
					break;

				default :
					break loop205;
				}
			}

			// AST REWRITE
			// elements: hintItem
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1496:32: -> ( hintItem )+
			{
				if ( !(stream_hintItem.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_hintItem.hasNext() ) {
					adaptor.addChild(root_0, stream_hintItem.nextTree());
				}
				stream_hintItem.reset();

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hintList"


	public static class hintItem_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "hintItem"
	// Hive.g:1499:1: hintItem : hintName ( LPAREN hintArgs RPAREN )? -> ^( TOK_HINT hintName ( hintArgs )? ) ;
	public final HiveParser.hintItem_return hintItem() throws RecognitionException {
		HiveParser.hintItem_return retval = new HiveParser.hintItem_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN672=null;
		Token RPAREN674=null;
		ParserRuleReturnScope hintName671 =null;
		ParserRuleReturnScope hintArgs673 =null;

		CommonTree LPAREN672_tree=null;
		CommonTree RPAREN674_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_hintName=new RewriteRuleSubtreeStream(adaptor,"rule hintName");
		RewriteRuleSubtreeStream stream_hintArgs=new RewriteRuleSubtreeStream(adaptor,"rule hintArgs");

		 msgs.push("hint item"); 
		try {
			// Hive.g:1502:5: ( hintName ( LPAREN hintArgs RPAREN )? -> ^( TOK_HINT hintName ( hintArgs )? ) )
			// Hive.g:1503:5: hintName ( LPAREN hintArgs RPAREN )?
			{
			pushFollow(FOLLOW_hintName_in_hintItem10932);
			hintName671=hintName();
			state._fsp--;

			stream_hintName.add(hintName671.getTree());
			// Hive.g:1503:14: ( LPAREN hintArgs RPAREN )?
			int alt206=2;
			int LA206_0 = input.LA(1);
			if ( (LA206_0==LPAREN) ) {
				alt206=1;
			}
			switch (alt206) {
				case 1 :
					// Hive.g:1503:15: LPAREN hintArgs RPAREN
					{
					LPAREN672=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_hintItem10935);  
					stream_LPAREN.add(LPAREN672);

					pushFollow(FOLLOW_hintArgs_in_hintItem10937);
					hintArgs673=hintArgs();
					state._fsp--;

					stream_hintArgs.add(hintArgs673.getTree());
					RPAREN674=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_hintItem10939);  
					stream_RPAREN.add(RPAREN674);

					}
					break;

			}

			// AST REWRITE
			// elements: hintName, hintArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1503:40: -> ^( TOK_HINT hintName ( hintArgs )? )
			{
				// Hive.g:1503:43: ^( TOK_HINT hintName ( hintArgs )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_HINT, "TOK_HINT"), root_1);
				adaptor.addChild(root_1, stream_hintName.nextTree());
				// Hive.g:1503:63: ( hintArgs )?
				if ( stream_hintArgs.hasNext() ) {
					adaptor.addChild(root_1, stream_hintArgs.nextTree());
				}
				stream_hintArgs.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hintItem"


	public static class hintName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "hintName"
	// Hive.g:1506:1: hintName : ( KW_MAPJOIN -> TOK_MAPJOIN | KW_STREAMTABLE -> TOK_STREAMTABLE | KW_HOLD_DDLTIME -> TOK_HOLD_DDLTIME );
	public final HiveParser.hintName_return hintName() throws RecognitionException {
		HiveParser.hintName_return retval = new HiveParser.hintName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_MAPJOIN675=null;
		Token KW_STREAMTABLE676=null;
		Token KW_HOLD_DDLTIME677=null;

		CommonTree KW_MAPJOIN675_tree=null;
		CommonTree KW_STREAMTABLE676_tree=null;
		CommonTree KW_HOLD_DDLTIME677_tree=null;
		RewriteRuleTokenStream stream_KW_HOLD_DDLTIME=new RewriteRuleTokenStream(adaptor,"token KW_HOLD_DDLTIME");
		RewriteRuleTokenStream stream_KW_MAPJOIN=new RewriteRuleTokenStream(adaptor,"token KW_MAPJOIN");
		RewriteRuleTokenStream stream_KW_STREAMTABLE=new RewriteRuleTokenStream(adaptor,"token KW_STREAMTABLE");

		 msgs.push("hint name"); 
		try {
			// Hive.g:1509:5: ( KW_MAPJOIN -> TOK_MAPJOIN | KW_STREAMTABLE -> TOK_STREAMTABLE | KW_HOLD_DDLTIME -> TOK_HOLD_DDLTIME )
			int alt207=3;
			switch ( input.LA(1) ) {
			case KW_MAPJOIN:
				{
				alt207=1;
				}
				break;
			case KW_STREAMTABLE:
				{
				alt207=2;
				}
				break;
			case KW_HOLD_DDLTIME:
				{
				alt207=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 207, 0, input);
				throw nvae;
			}
			switch (alt207) {
				case 1 :
					// Hive.g:1510:5: KW_MAPJOIN
					{
					KW_MAPJOIN675=(Token)match(input,KW_MAPJOIN,FOLLOW_KW_MAPJOIN_in_hintName10983);  
					stream_KW_MAPJOIN.add(KW_MAPJOIN675);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1510:16: -> TOK_MAPJOIN
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_MAPJOIN, "TOK_MAPJOIN"));
					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1511:7: KW_STREAMTABLE
					{
					KW_STREAMTABLE676=(Token)match(input,KW_STREAMTABLE,FOLLOW_KW_STREAMTABLE_in_hintName10995);  
					stream_KW_STREAMTABLE.add(KW_STREAMTABLE676);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1511:22: -> TOK_STREAMTABLE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_STREAMTABLE, "TOK_STREAMTABLE"));
					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// Hive.g:1512:7: KW_HOLD_DDLTIME
					{
					KW_HOLD_DDLTIME677=(Token)match(input,KW_HOLD_DDLTIME,FOLLOW_KW_HOLD_DDLTIME_in_hintName11007);  
					stream_KW_HOLD_DDLTIME.add(KW_HOLD_DDLTIME677);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1512:23: -> TOK_HOLD_DDLTIME
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_HOLD_DDLTIME, "TOK_HOLD_DDLTIME"));
					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hintName"


	public static class hintArgs_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "hintArgs"
	// Hive.g:1515:1: hintArgs : hintArgName ( COMMA hintArgName )* -> ^( TOK_HINTARGLIST ( hintArgName )+ ) ;
	public final HiveParser.hintArgs_return hintArgs() throws RecognitionException {
		HiveParser.hintArgs_return retval = new HiveParser.hintArgs_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA679=null;
		ParserRuleReturnScope hintArgName678 =null;
		ParserRuleReturnScope hintArgName680 =null;

		CommonTree COMMA679_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_hintArgName=new RewriteRuleSubtreeStream(adaptor,"rule hintArgName");

		 msgs.push("hint arguments"); 
		try {
			// Hive.g:1518:5: ( hintArgName ( COMMA hintArgName )* -> ^( TOK_HINTARGLIST ( hintArgName )+ ) )
			// Hive.g:1519:5: hintArgName ( COMMA hintArgName )*
			{
			pushFollow(FOLLOW_hintArgName_in_hintArgs11042);
			hintArgName678=hintArgName();
			state._fsp--;

			stream_hintArgName.add(hintArgName678.getTree());
			// Hive.g:1519:17: ( COMMA hintArgName )*
			loop208:
			while (true) {
				int alt208=2;
				int LA208_0 = input.LA(1);
				if ( (LA208_0==COMMA) ) {
					alt208=1;
				}

				switch (alt208) {
				case 1 :
					// Hive.g:1519:18: COMMA hintArgName
					{
					COMMA679=(Token)match(input,COMMA,FOLLOW_COMMA_in_hintArgs11045);  
					stream_COMMA.add(COMMA679);

					pushFollow(FOLLOW_hintArgName_in_hintArgs11047);
					hintArgName680=hintArgName();
					state._fsp--;

					stream_hintArgName.add(hintArgName680.getTree());
					}
					break;

				default :
					break loop208;
				}
			}

			// AST REWRITE
			// elements: hintArgName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1519:38: -> ^( TOK_HINTARGLIST ( hintArgName )+ )
			{
				// Hive.g:1519:41: ^( TOK_HINTARGLIST ( hintArgName )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_HINTARGLIST, "TOK_HINTARGLIST"), root_1);
				if ( !(stream_hintArgName.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_hintArgName.hasNext() ) {
					adaptor.addChild(root_1, stream_hintArgName.nextTree());
				}
				stream_hintArgName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hintArgs"


	public static class hintArgName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "hintArgName"
	// Hive.g:1522:1: hintArgName : Identifier ;
	public final HiveParser.hintArgName_return hintArgName() throws RecognitionException {
		HiveParser.hintArgName_return retval = new HiveParser.hintArgName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier681=null;

		CommonTree Identifier681_tree=null;

		 msgs.push("hint argument name"); 
		try {
			// Hive.g:1525:5: ( Identifier )
			// Hive.g:1526:5: Identifier
			{
			root_0 = (CommonTree)adaptor.nil();


			Identifier681=(Token)match(input,Identifier,FOLLOW_Identifier_in_hintArgName11089); 
			Identifier681_tree = (CommonTree)adaptor.create(Identifier681);
			adaptor.addChild(root_0, Identifier681_tree);

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hintArgName"


	public static class selectItem_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selectItem"
	// Hive.g:1529:1: selectItem : ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? ) -> ^( TOK_SELEXPR selectExpression ( Identifier )* ) ;
	public final HiveParser.selectItem_return selectItem() throws RecognitionException {
		HiveParser.selectItem_return retval = new HiveParser.selectItem_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_AS683=null;
		Token Identifier684=null;
		Token KW_AS685=null;
		Token LPAREN686=null;
		Token Identifier687=null;
		Token COMMA688=null;
		Token Identifier689=null;
		Token RPAREN690=null;
		ParserRuleReturnScope selectExpression682 =null;

		CommonTree KW_AS683_tree=null;
		CommonTree Identifier684_tree=null;
		CommonTree KW_AS685_tree=null;
		CommonTree LPAREN686_tree=null;
		CommonTree Identifier687_tree=null;
		CommonTree COMMA688_tree=null;
		CommonTree Identifier689_tree=null;
		CommonTree RPAREN690_tree=null;
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_selectExpression=new RewriteRuleSubtreeStream(adaptor,"rule selectExpression");

		 msgs.push("selection target"); 
		try {
			// Hive.g:1532:5: ( ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? ) -> ^( TOK_SELEXPR selectExpression ( Identifier )* ) )
			// Hive.g:1533:5: ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? )
			{
			// Hive.g:1533:5: ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? )
			// Hive.g:1533:7: selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )?
			{
			pushFollow(FOLLOW_selectExpression_in_selectItem11122);
			selectExpression682=selectExpression();
			state._fsp--;

			stream_selectExpression.add(selectExpression682.getTree());
			// Hive.g:1533:25: ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )?
			int alt211=3;
			int LA211_0 = input.LA(1);
			if ( (LA211_0==KW_AS) ) {
				int LA211_1 = input.LA(2);
				if ( (LA211_1==LPAREN) ) {
					alt211=2;
				}
				else if ( (LA211_1==Identifier) ) {
					alt211=1;
				}
			}
			else if ( (LA211_0==Identifier) ) {
				alt211=1;
			}
			switch (alt211) {
				case 1 :
					// Hive.g:1533:26: ( ( KW_AS )? Identifier )
					{
					// Hive.g:1533:26: ( ( KW_AS )? Identifier )
					// Hive.g:1533:27: ( KW_AS )? Identifier
					{
					// Hive.g:1533:27: ( KW_AS )?
					int alt209=2;
					int LA209_0 = input.LA(1);
					if ( (LA209_0==KW_AS) ) {
						alt209=1;
					}
					switch (alt209) {
						case 1 :
							// Hive.g:1533:27: KW_AS
							{
							KW_AS683=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_selectItem11127);  
							stream_KW_AS.add(KW_AS683);

							}
							break;

					}

					Identifier684=(Token)match(input,Identifier,FOLLOW_Identifier_in_selectItem11130);  
					stream_Identifier.add(Identifier684);

					}

					}
					break;
				case 2 :
					// Hive.g:1533:48: ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN )
					{
					// Hive.g:1533:48: ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN )
					// Hive.g:1533:49: KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN
					{
					KW_AS685=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_selectItem11136);  
					stream_KW_AS.add(KW_AS685);

					LPAREN686=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_selectItem11138);  
					stream_LPAREN.add(LPAREN686);

					Identifier687=(Token)match(input,Identifier,FOLLOW_Identifier_in_selectItem11140);  
					stream_Identifier.add(Identifier687);

					// Hive.g:1533:73: ( COMMA Identifier )*
					loop210:
					while (true) {
						int alt210=2;
						int LA210_0 = input.LA(1);
						if ( (LA210_0==COMMA) ) {
							alt210=1;
						}

						switch (alt210) {
						case 1 :
							// Hive.g:1533:74: COMMA Identifier
							{
							COMMA688=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectItem11143);  
							stream_COMMA.add(COMMA688);

							Identifier689=(Token)match(input,Identifier,FOLLOW_Identifier_in_selectItem11145);  
							stream_Identifier.add(Identifier689);

							}
							break;

						default :
							break loop210;
						}
					}

					RPAREN690=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_selectItem11149);  
					stream_RPAREN.add(RPAREN690);

					}

					}
					break;

			}

			}

			// AST REWRITE
			// elements: selectExpression, Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1533:104: -> ^( TOK_SELEXPR selectExpression ( Identifier )* )
			{
				// Hive.g:1533:107: ^( TOK_SELEXPR selectExpression ( Identifier )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_1);
				adaptor.addChild(root_1, stream_selectExpression.nextTree());
				// Hive.g:1533:138: ( Identifier )*
				while ( stream_Identifier.hasNext() ) {
					adaptor.addChild(root_1, stream_Identifier.nextNode());
				}
				stream_Identifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selectItem"


	public static class trfmClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "trfmClause"
	// Hive.g:1536:1: trfmClause : ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList ) inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) ;
	public final HiveParser.trfmClause_return trfmClause() throws RecognitionException {
		HiveParser.trfmClause_return retval = new HiveParser.trfmClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_MAP691=null;
		Token KW_REDUCE693=null;
		Token KW_USING695=null;
		Token StringLiteral696=null;
		Token KW_AS697=null;
		Token LPAREN698=null;
		Token RPAREN701=null;
		ParserRuleReturnScope inSerde =null;
		ParserRuleReturnScope inRec =null;
		ParserRuleReturnScope outSerde =null;
		ParserRuleReturnScope outRec =null;
		ParserRuleReturnScope selectExpressionList692 =null;
		ParserRuleReturnScope selectExpressionList694 =null;
		ParserRuleReturnScope aliasList699 =null;
		ParserRuleReturnScope columnNameTypeList700 =null;
		ParserRuleReturnScope aliasList702 =null;
		ParserRuleReturnScope columnNameTypeList703 =null;

		CommonTree KW_MAP691_tree=null;
		CommonTree KW_REDUCE693_tree=null;
		CommonTree KW_USING695_tree=null;
		CommonTree StringLiteral696_tree=null;
		CommonTree KW_AS697_tree=null;
		CommonTree LPAREN698_tree=null;
		CommonTree RPAREN701_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_REDUCE=new RewriteRuleTokenStream(adaptor,"token KW_REDUCE");
		RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
		RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_rowFormat=new RewriteRuleSubtreeStream(adaptor,"rule rowFormat");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
		RewriteRuleSubtreeStream stream_recordReader=new RewriteRuleSubtreeStream(adaptor,"rule recordReader");
		RewriteRuleSubtreeStream stream_aliasList=new RewriteRuleSubtreeStream(adaptor,"rule aliasList");
		RewriteRuleSubtreeStream stream_selectExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule selectExpressionList");
		RewriteRuleSubtreeStream stream_recordWriter=new RewriteRuleSubtreeStream(adaptor,"rule recordWriter");

		 msgs.push("transform clause"); 
		try {
			// Hive.g:1539:5: ( ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList ) inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) )
			// Hive.g:1540:5: ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList ) inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader
			{
			// Hive.g:1540:5: ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList )
			int alt212=2;
			int LA212_0 = input.LA(1);
			if ( (LA212_0==KW_MAP) ) {
				alt212=1;
			}
			else if ( (LA212_0==KW_REDUCE) ) {
				alt212=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 212, 0, input);
				throw nvae;
			}

			switch (alt212) {
				case 1 :
					// Hive.g:1540:9: KW_MAP selectExpressionList
					{
					KW_MAP691=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_trfmClause11199);  
					stream_KW_MAP.add(KW_MAP691);

					pushFollow(FOLLOW_selectExpressionList_in_trfmClause11204);
					selectExpressionList692=selectExpressionList();
					state._fsp--;

					stream_selectExpressionList.add(selectExpressionList692.getTree());
					}
					break;
				case 2 :
					// Hive.g:1541:9: KW_REDUCE selectExpressionList
					{
					KW_REDUCE693=(Token)match(input,KW_REDUCE,FOLLOW_KW_REDUCE_in_trfmClause11214);  
					stream_KW_REDUCE.add(KW_REDUCE693);

					pushFollow(FOLLOW_selectExpressionList_in_trfmClause11216);
					selectExpressionList694=selectExpressionList();
					state._fsp--;

					stream_selectExpressionList.add(selectExpressionList694.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_rowFormat_in_trfmClause11226);
			inSerde=rowFormat();
			state._fsp--;

			stream_rowFormat.add(inSerde.getTree());
			pushFollow(FOLLOW_recordWriter_in_trfmClause11230);
			inRec=recordWriter();
			state._fsp--;

			stream_recordWriter.add(inRec.getTree());
			KW_USING695=(Token)match(input,KW_USING,FOLLOW_KW_USING_in_trfmClause11236);  
			stream_KW_USING.add(KW_USING695);

			StringLiteral696=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_trfmClause11238);  
			stream_StringLiteral.add(StringLiteral696);

			// Hive.g:1544:5: ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )?
			int alt216=2;
			int LA216_0 = input.LA(1);
			if ( (LA216_0==KW_AS) ) {
				alt216=1;
			}
			switch (alt216) {
				case 1 :
					// Hive.g:1544:7: KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
					{
					KW_AS697=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_trfmClause11246);  
					stream_KW_AS.add(KW_AS697);

					// Hive.g:1544:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
					int alt215=2;
					int LA215_0 = input.LA(1);
					if ( (LA215_0==LPAREN) ) {
						alt215=1;
					}
					else if ( (LA215_0==Identifier) ) {
						alt215=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 215, 0, input);
						throw nvae;
					}

					switch (alt215) {
						case 1 :
							// Hive.g:1544:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
							{
							// Hive.g:1544:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
							// Hive.g:1544:15: LPAREN ( aliasList | columnNameTypeList ) RPAREN
							{
							LPAREN698=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_trfmClause11250);  
							stream_LPAREN.add(LPAREN698);

							// Hive.g:1544:22: ( aliasList | columnNameTypeList )
							int alt213=2;
							int LA213_0 = input.LA(1);
							if ( (LA213_0==Identifier) ) {
								int LA213_1 = input.LA(2);
								if ( (LA213_1==COMMA||LA213_1==RPAREN) ) {
									alt213=1;
								}
								else if ( (LA213_1==KW_ARRAY||(LA213_1 >= KW_BIGINT && LA213_1 <= KW_BOOLEAN)||(LA213_1 >= KW_DATE && LA213_1 <= KW_DATETIME)||LA213_1==KW_DOUBLE||LA213_1==KW_FLOAT||LA213_1==KW_INT||LA213_1==KW_MAP||LA213_1==KW_SMALLINT||(LA213_1 >= KW_STRING && LA213_1 <= KW_STRUCT)||(LA213_1 >= KW_TIMESTAMP && LA213_1 <= KW_TINYINT)||LA213_1==KW_UNIONTYPE) ) {
									alt213=2;
								}

								else {
									int nvaeMark = input.mark();
									try {
										input.consume();
										NoViableAltException nvae =
											new NoViableAltException("", 213, 1, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 213, 0, input);
								throw nvae;
							}

							switch (alt213) {
								case 1 :
									// Hive.g:1544:23: aliasList
									{
									pushFollow(FOLLOW_aliasList_in_trfmClause11253);
									aliasList699=aliasList();
									state._fsp--;

									stream_aliasList.add(aliasList699.getTree());
									}
									break;
								case 2 :
									// Hive.g:1544:35: columnNameTypeList
									{
									pushFollow(FOLLOW_columnNameTypeList_in_trfmClause11257);
									columnNameTypeList700=columnNameTypeList();
									state._fsp--;

									stream_columnNameTypeList.add(columnNameTypeList700.getTree());
									}
									break;

							}

							RPAREN701=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_trfmClause11260);  
							stream_RPAREN.add(RPAREN701);

							}

							}
							break;
						case 2 :
							// Hive.g:1544:65: ( aliasList | columnNameTypeList )
							{
							// Hive.g:1544:65: ( aliasList | columnNameTypeList )
							int alt214=2;
							int LA214_0 = input.LA(1);
							if ( (LA214_0==Identifier) ) {
								switch ( input.LA(2) ) {
								case EOF:
								case COMMA:
								case KW_CLUSTER:
								case KW_DISTRIBUTE:
								case KW_FROM:
								case KW_GROUP:
								case KW_HAVING:
								case KW_INSERT:
								case KW_LIMIT:
								case KW_ORDER:
								case KW_RECORDREADER:
								case KW_REDUCE:
								case KW_ROW:
								case KW_SELECT:
								case KW_SORT:
								case KW_UNION:
								case KW_WHERE:
								case RPAREN:
									{
									alt214=1;
									}
									break;
								case KW_MAP:
									{
									int LA214_19 = input.LA(3);
									if ( (LA214_19==LESSTHAN) ) {
										alt214=2;
									}
									else if ( (LA214_19==BigintLiteral||LA214_19==CharSetName||LA214_19==Identifier||LA214_19==KW_ARRAY||(LA214_19 >= KW_CASE && LA214_19 <= KW_CAST)||LA214_19==KW_FALSE||LA214_19==KW_IF||LA214_19==KW_MAP||LA214_19==KW_NOT||LA214_19==KW_NULL||LA214_19==KW_STRUCT||LA214_19==KW_TRUE||LA214_19==KW_UNIONTYPE||LA214_19==LPAREN||LA214_19==MINUS||(LA214_19 >= Number && LA214_19 <= PLUS)||(LA214_19 >= STAR && LA214_19 <= TILDE)||LA214_19==TinyintLiteral) ) {
										alt214=1;
									}

									else {
										int nvaeMark = input.mark();
										try {
											for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
												input.consume();
											}
											NoViableAltException nvae =
												new NoViableAltException("", 214, 19, input);
											throw nvae;
										} finally {
											input.rewind(nvaeMark);
										}
									}

									}
									break;
								case KW_ARRAY:
								case KW_BIGINT:
								case KW_BINARY:
								case KW_BOOLEAN:
								case KW_DATE:
								case KW_DATETIME:
								case KW_DOUBLE:
								case KW_FLOAT:
								case KW_INT:
								case KW_SMALLINT:
								case KW_STRING:
								case KW_STRUCT:
								case KW_TIMESTAMP:
								case KW_TINYINT:
								case KW_UNIONTYPE:
									{
									alt214=2;
									}
									break;
								default:
									int nvaeMark = input.mark();
									try {
										input.consume();
										NoViableAltException nvae =
											new NoViableAltException("", 214, 1, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}
							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 214, 0, input);
								throw nvae;
							}

							switch (alt214) {
								case 1 :
									// Hive.g:1544:66: aliasList
									{
									pushFollow(FOLLOW_aliasList_in_trfmClause11266);
									aliasList702=aliasList();
									state._fsp--;

									stream_aliasList.add(aliasList702.getTree());
									}
									break;
								case 2 :
									// Hive.g:1544:78: columnNameTypeList
									{
									pushFollow(FOLLOW_columnNameTypeList_in_trfmClause11270);
									columnNameTypeList703=columnNameTypeList();
									state._fsp--;

									stream_columnNameTypeList.add(columnNameTypeList703.getTree());
									}
									break;

							}

							}
							break;

					}

					}
					break;

			}

			pushFollow(FOLLOW_rowFormat_in_trfmClause11282);
			outSerde=rowFormat();
			state._fsp--;

			stream_rowFormat.add(outSerde.getTree());
			pushFollow(FOLLOW_recordReader_in_trfmClause11286);
			outRec=recordReader();
			state._fsp--;

			stream_recordReader.add(outRec.getTree());
			// AST REWRITE
			// elements: outSerde, inRec, outRec, columnNameTypeList, StringLiteral, inSerde, selectExpressionList, aliasList
			// token labels: 
			// rule labels: retval, inSerde, inRec, outRec, outSerde
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_inSerde=new RewriteRuleSubtreeStream(adaptor,"rule inSerde",inSerde!=null?inSerde.getTree():null);
			RewriteRuleSubtreeStream stream_inRec=new RewriteRuleSubtreeStream(adaptor,"rule inRec",inRec!=null?inRec.getTree():null);
			RewriteRuleSubtreeStream stream_outRec=new RewriteRuleSubtreeStream(adaptor,"rule outRec",outRec!=null?outRec.getTree():null);
			RewriteRuleSubtreeStream stream_outSerde=new RewriteRuleSubtreeStream(adaptor,"rule outSerde",outSerde!=null?outSerde.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1546:5: -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
			{
				// Hive.g:1546:8: ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TRANSFORM, "TOK_TRANSFORM"), root_1);
				adaptor.addChild(root_1, stream_selectExpressionList.nextTree());
				adaptor.addChild(root_1, stream_inSerde.nextTree());
				adaptor.addChild(root_1, stream_inRec.nextTree());
				adaptor.addChild(root_1, stream_StringLiteral.nextNode());
				adaptor.addChild(root_1, stream_outSerde.nextTree());
				adaptor.addChild(root_1, stream_outRec.nextTree());
				// Hive.g:1546:93: ( aliasList )?
				if ( stream_aliasList.hasNext() ) {
					adaptor.addChild(root_1, stream_aliasList.nextTree());
				}
				stream_aliasList.reset();

				// Hive.g:1546:104: ( columnNameTypeList )?
				if ( stream_columnNameTypeList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				}
				stream_columnNameTypeList.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trfmClause"


	public static class selectExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selectExpression"
	// Hive.g:1549:1: selectExpression : ( expression | tableAllColumns );
	public final HiveParser.selectExpression_return selectExpression() throws RecognitionException {
		HiveParser.selectExpression_return retval = new HiveParser.selectExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope expression704 =null;
		ParserRuleReturnScope tableAllColumns705 =null;


		 msgs.push("select expression"); 
		try {
			// Hive.g:1552:5: ( expression | tableAllColumns )
			int alt217=2;
			alt217 = dfa217.predict(input);
			switch (alt217) {
				case 1 :
					// Hive.g:1553:5: expression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_expression_in_selectExpression11349);
					expression704=expression();
					state._fsp--;

					adaptor.addChild(root_0, expression704.getTree());

					}
					break;
				case 2 :
					// Hive.g:1553:18: tableAllColumns
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_tableAllColumns_in_selectExpression11353);
					tableAllColumns705=tableAllColumns();
					state._fsp--;

					adaptor.addChild(root_0, tableAllColumns705.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selectExpression"


	public static class selectExpressionList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selectExpressionList"
	// Hive.g:1556:1: selectExpressionList : selectExpression ( COMMA selectExpression )* -> ^( TOK_EXPLIST ( selectExpression )+ ) ;
	public final HiveParser.selectExpressionList_return selectExpressionList() throws RecognitionException {
		HiveParser.selectExpressionList_return retval = new HiveParser.selectExpressionList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA707=null;
		ParserRuleReturnScope selectExpression706 =null;
		ParserRuleReturnScope selectExpression708 =null;

		CommonTree COMMA707_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_selectExpression=new RewriteRuleSubtreeStream(adaptor,"rule selectExpression");

		 msgs.push("select expression list"); 
		try {
			// Hive.g:1559:5: ( selectExpression ( COMMA selectExpression )* -> ^( TOK_EXPLIST ( selectExpression )+ ) )
			// Hive.g:1560:5: selectExpression ( COMMA selectExpression )*
			{
			pushFollow(FOLLOW_selectExpression_in_selectExpressionList11384);
			selectExpression706=selectExpression();
			state._fsp--;

			stream_selectExpression.add(selectExpression706.getTree());
			// Hive.g:1560:22: ( COMMA selectExpression )*
			loop218:
			while (true) {
				int alt218=2;
				int LA218_0 = input.LA(1);
				if ( (LA218_0==COMMA) ) {
					alt218=1;
				}

				switch (alt218) {
				case 1 :
					// Hive.g:1560:23: COMMA selectExpression
					{
					COMMA707=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectExpressionList11387);  
					stream_COMMA.add(COMMA707);

					pushFollow(FOLLOW_selectExpression_in_selectExpressionList11389);
					selectExpression708=selectExpression();
					state._fsp--;

					stream_selectExpression.add(selectExpression708.getTree());
					}
					break;

				default :
					break loop218;
				}
			}

			// AST REWRITE
			// elements: selectExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1560:48: -> ^( TOK_EXPLIST ( selectExpression )+ )
			{
				// Hive.g:1560:51: ^( TOK_EXPLIST ( selectExpression )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_EXPLIST, "TOK_EXPLIST"), root_1);
				if ( !(stream_selectExpression.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_selectExpression.hasNext() ) {
					adaptor.addChild(root_1, stream_selectExpression.nextTree());
				}
				stream_selectExpression.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selectExpressionList"


	public static class tableAllColumns_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableAllColumns"
	// Hive.g:1566:1: tableAllColumns : ( STAR -> ^( TOK_ALLCOLREF ) | tableName DOT STAR -> ^( TOK_ALLCOLREF tableName ) );
	public final HiveParser.tableAllColumns_return tableAllColumns() throws RecognitionException {
		HiveParser.tableAllColumns_return retval = new HiveParser.tableAllColumns_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token STAR709=null;
		Token DOT711=null;
		Token STAR712=null;
		ParserRuleReturnScope tableName710 =null;

		CommonTree STAR709_tree=null;
		CommonTree DOT711_tree=null;
		CommonTree STAR712_tree=null;
		RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
		RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		try {
			// Hive.g:1567:5: ( STAR -> ^( TOK_ALLCOLREF ) | tableName DOT STAR -> ^( TOK_ALLCOLREF tableName ) )
			int alt219=2;
			int LA219_0 = input.LA(1);
			if ( (LA219_0==STAR) ) {
				alt219=1;
			}
			else if ( (LA219_0==Identifier) ) {
				alt219=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 219, 0, input);
				throw nvae;
			}

			switch (alt219) {
				case 1 :
					// Hive.g:1567:7: STAR
					{
					STAR709=(Token)match(input,STAR,FOLLOW_STAR_in_tableAllColumns11420);  
					stream_STAR.add(STAR709);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1568:9: -> ^( TOK_ALLCOLREF )
					{
						// Hive.g:1568:12: ^( TOK_ALLCOLREF )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1569:7: tableName DOT STAR
					{
					pushFollow(FOLLOW_tableName_in_tableAllColumns11442);
					tableName710=tableName();
					state._fsp--;

					stream_tableName.add(tableName710.getTree());
					DOT711=(Token)match(input,DOT,FOLLOW_DOT_in_tableAllColumns11444);  
					stream_DOT.add(DOT711);

					STAR712=(Token)match(input,STAR,FOLLOW_STAR_in_tableAllColumns11446);  
					stream_STAR.add(STAR712);

					// AST REWRITE
					// elements: tableName
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1570:9: -> ^( TOK_ALLCOLREF tableName )
					{
						// Hive.g:1570:12: ^( TOK_ALLCOLREF tableName )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableAllColumns"


	public static class tableOrColumn_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableOrColumn"
	// Hive.g:1574:1: tableOrColumn : Identifier -> ^( TOK_TABLE_OR_COL Identifier ) ;
	public final HiveParser.tableOrColumn_return tableOrColumn() throws RecognitionException {
		HiveParser.tableOrColumn_return retval = new HiveParser.tableOrColumn_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier713=null;

		CommonTree Identifier713_tree=null;
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

		 msgs.push("table or column identifier"); 
		try {
			// Hive.g:1577:5: ( Identifier -> ^( TOK_TABLE_OR_COL Identifier ) )
			// Hive.g:1578:5: Identifier
			{
			Identifier713=(Token)match(input,Identifier,FOLLOW_Identifier_in_tableOrColumn11494);  
			stream_Identifier.add(Identifier713);

			// AST REWRITE
			// elements: Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1578:16: -> ^( TOK_TABLE_OR_COL Identifier )
			{
				// Hive.g:1578:19: ^( TOK_TABLE_OR_COL Identifier )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLE_OR_COL, "TOK_TABLE_OR_COL"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableOrColumn"


	public static class expressionList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "expressionList"
	// Hive.g:1581:1: expressionList : expression ( COMMA expression )* -> ^( TOK_EXPLIST ( expression )+ ) ;
	public final HiveParser.expressionList_return expressionList() throws RecognitionException {
		HiveParser.expressionList_return retval = new HiveParser.expressionList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA715=null;
		ParserRuleReturnScope expression714 =null;
		ParserRuleReturnScope expression716 =null;

		CommonTree COMMA715_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		 msgs.push("expression list"); 
		try {
			// Hive.g:1584:5: ( expression ( COMMA expression )* -> ^( TOK_EXPLIST ( expression )+ ) )
			// Hive.g:1585:5: expression ( COMMA expression )*
			{
			pushFollow(FOLLOW_expression_in_expressionList11533);
			expression714=expression();
			state._fsp--;

			stream_expression.add(expression714.getTree());
			// Hive.g:1585:16: ( COMMA expression )*
			loop220:
			while (true) {
				int alt220=2;
				int LA220_0 = input.LA(1);
				if ( (LA220_0==COMMA) ) {
					alt220=1;
				}

				switch (alt220) {
				case 1 :
					// Hive.g:1585:17: COMMA expression
					{
					COMMA715=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList11536);  
					stream_COMMA.add(COMMA715);

					pushFollow(FOLLOW_expression_in_expressionList11538);
					expression716=expression();
					state._fsp--;

					stream_expression.add(expression716.getTree());
					}
					break;

				default :
					break loop220;
				}
			}

			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1585:36: -> ^( TOK_EXPLIST ( expression )+ )
			{
				// Hive.g:1585:39: ^( TOK_EXPLIST ( expression )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_EXPLIST, "TOK_EXPLIST"), root_1);
				if ( !(stream_expression.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.hasNext() ) {
					adaptor.addChild(root_1, stream_expression.nextTree());
				}
				stream_expression.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expressionList"


	public static class aliasList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "aliasList"
	// Hive.g:1588:1: aliasList : Identifier ( COMMA Identifier )* -> ^( TOK_ALIASLIST ( Identifier )+ ) ;
	public final HiveParser.aliasList_return aliasList() throws RecognitionException {
		HiveParser.aliasList_return retval = new HiveParser.aliasList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier717=null;
		Token COMMA718=null;
		Token Identifier719=null;

		CommonTree Identifier717_tree=null;
		CommonTree COMMA718_tree=null;
		CommonTree Identifier719_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

		 msgs.push("alias list"); 
		try {
			// Hive.g:1591:5: ( Identifier ( COMMA Identifier )* -> ^( TOK_ALIASLIST ( Identifier )+ ) )
			// Hive.g:1592:5: Identifier ( COMMA Identifier )*
			{
			Identifier717=(Token)match(input,Identifier,FOLLOW_Identifier_in_aliasList11580);  
			stream_Identifier.add(Identifier717);

			// Hive.g:1592:16: ( COMMA Identifier )*
			loop221:
			while (true) {
				int alt221=2;
				int LA221_0 = input.LA(1);
				if ( (LA221_0==COMMA) ) {
					alt221=1;
				}

				switch (alt221) {
				case 1 :
					// Hive.g:1592:17: COMMA Identifier
					{
					COMMA718=(Token)match(input,COMMA,FOLLOW_COMMA_in_aliasList11583);  
					stream_COMMA.add(COMMA718);

					Identifier719=(Token)match(input,Identifier,FOLLOW_Identifier_in_aliasList11585);  
					stream_Identifier.add(Identifier719);

					}
					break;

				default :
					break loop221;
				}
			}

			// AST REWRITE
			// elements: Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1592:36: -> ^( TOK_ALIASLIST ( Identifier )+ )
			{
				// Hive.g:1592:39: ^( TOK_ALIASLIST ( Identifier )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALIASLIST, "TOK_ALIASLIST"), root_1);
				if ( !(stream_Identifier.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_Identifier.hasNext() ) {
					adaptor.addChild(root_1, stream_Identifier.nextNode());
				}
				stream_Identifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "aliasList"


	public static class fromClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fromClause"
	// Hive.g:1597:1: fromClause : KW_FROM joinSource -> ^( TOK_FROM joinSource ) ;
	public final HiveParser.fromClause_return fromClause() throws RecognitionException {
		HiveParser.fromClause_return retval = new HiveParser.fromClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_FROM720=null;
		ParserRuleReturnScope joinSource721 =null;

		CommonTree KW_FROM720_tree=null;
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleSubtreeStream stream_joinSource=new RewriteRuleSubtreeStream(adaptor,"rule joinSource");

		 msgs.push("from clause"); 
		try {
			// Hive.g:1600:5: ( KW_FROM joinSource -> ^( TOK_FROM joinSource ) )
			// Hive.g:1601:5: KW_FROM joinSource
			{
			KW_FROM720=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_fromClause11629);  
			stream_KW_FROM.add(KW_FROM720);

			pushFollow(FOLLOW_joinSource_in_fromClause11631);
			joinSource721=joinSource();
			state._fsp--;

			stream_joinSource.add(joinSource721.getTree());
			// AST REWRITE
			// elements: joinSource
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1601:24: -> ^( TOK_FROM joinSource )
			{
				// Hive.g:1601:27: ^( TOK_FROM joinSource )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FROM, "TOK_FROM"), root_1);
				adaptor.addChild(root_1, stream_joinSource.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fromClause"


	public static class joinSource_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "joinSource"
	// Hive.g:1604:1: joinSource : ( fromSource ( joinToken ^ fromSource ( KW_ON ! expression )? )* | uniqueJoinToken ^ uniqueJoinSource ( COMMA ! uniqueJoinSource )+ );
	public final HiveParser.joinSource_return joinSource() throws RecognitionException {
		HiveParser.joinSource_return retval = new HiveParser.joinSource_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ON725=null;
		Token COMMA729=null;
		ParserRuleReturnScope fromSource722 =null;
		ParserRuleReturnScope joinToken723 =null;
		ParserRuleReturnScope fromSource724 =null;
		ParserRuleReturnScope expression726 =null;
		ParserRuleReturnScope uniqueJoinToken727 =null;
		ParserRuleReturnScope uniqueJoinSource728 =null;
		ParserRuleReturnScope uniqueJoinSource730 =null;

		CommonTree KW_ON725_tree=null;
		CommonTree COMMA729_tree=null;

		 msgs.push("join source"); 
		try {
			// Hive.g:1607:5: ( fromSource ( joinToken ^ fromSource ( KW_ON ! expression )? )* | uniqueJoinToken ^ uniqueJoinSource ( COMMA ! uniqueJoinSource )+ )
			int alt225=2;
			int LA225_0 = input.LA(1);
			if ( (LA225_0==Identifier||LA225_0==LPAREN) ) {
				alt225=1;
			}
			else if ( (LA225_0==KW_UNIQUEJOIN) ) {
				alt225=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 225, 0, input);
				throw nvae;
			}

			switch (alt225) {
				case 1 :
					// Hive.g:1607:7: fromSource ( joinToken ^ fromSource ( KW_ON ! expression )? )*
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_fromSource_in_joinSource11666);
					fromSource722=fromSource();
					state._fsp--;

					adaptor.addChild(root_0, fromSource722.getTree());

					// Hive.g:1607:18: ( joinToken ^ fromSource ( KW_ON ! expression )? )*
					loop223:
					while (true) {
						int alt223=2;
						int LA223_0 = input.LA(1);
						if ( (LA223_0==Identifier||LA223_0==KW_FULL||LA223_0==KW_JOIN||LA223_0==KW_LEFT||LA223_0==KW_RIGHT) ) {
							alt223=1;
						}

						switch (alt223) {
						case 1 :
							// Hive.g:1607:20: joinToken ^ fromSource ( KW_ON ! expression )?
							{
							pushFollow(FOLLOW_joinToken_in_joinSource11670);
							joinToken723=joinToken();
							state._fsp--;

							root_0 = (CommonTree)adaptor.becomeRoot(joinToken723.getTree(), root_0);
							pushFollow(FOLLOW_fromSource_in_joinSource11673);
							fromSource724=fromSource();
							state._fsp--;

							adaptor.addChild(root_0, fromSource724.getTree());

							// Hive.g:1607:42: ( KW_ON ! expression )?
							int alt222=2;
							int LA222_0 = input.LA(1);
							if ( (LA222_0==KW_ON) ) {
								alt222=1;
							}
							switch (alt222) {
								case 1 :
									// Hive.g:1607:43: KW_ON ! expression
									{
									KW_ON725=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_joinSource11676); 
									pushFollow(FOLLOW_expression_in_joinSource11679);
									expression726=expression();
									state._fsp--;

									adaptor.addChild(root_0, expression726.getTree());

									}
									break;

							}

							}
							break;

						default :
							break loop223;
						}
					}

					}
					break;
				case 2 :
					// Hive.g:1608:7: uniqueJoinToken ^ uniqueJoinSource ( COMMA ! uniqueJoinSource )+
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_uniqueJoinToken_in_joinSource11692);
					uniqueJoinToken727=uniqueJoinToken();
					state._fsp--;

					root_0 = (CommonTree)adaptor.becomeRoot(uniqueJoinToken727.getTree(), root_0);
					pushFollow(FOLLOW_uniqueJoinSource_in_joinSource11695);
					uniqueJoinSource728=uniqueJoinSource();
					state._fsp--;

					adaptor.addChild(root_0, uniqueJoinSource728.getTree());

					// Hive.g:1608:41: ( COMMA ! uniqueJoinSource )+
					int cnt224=0;
					loop224:
					while (true) {
						int alt224=2;
						int LA224_0 = input.LA(1);
						if ( (LA224_0==COMMA) ) {
							alt224=1;
						}

						switch (alt224) {
						case 1 :
							// Hive.g:1608:42: COMMA ! uniqueJoinSource
							{
							COMMA729=(Token)match(input,COMMA,FOLLOW_COMMA_in_joinSource11698); 
							pushFollow(FOLLOW_uniqueJoinSource_in_joinSource11701);
							uniqueJoinSource730=uniqueJoinSource();
							state._fsp--;

							adaptor.addChild(root_0, uniqueJoinSource730.getTree());

							}
							break;

						default :
							if ( cnt224 >= 1 ) break loop224;
							EarlyExitException eee = new EarlyExitException(224, input);
							throw eee;
						}
						cnt224++;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "joinSource"


	public static class uniqueJoinSource_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "uniqueJoinSource"
	// Hive.g:1611:1: uniqueJoinSource : ( KW_PRESERVE )? fromSource uniqueJoinExpr ;
	public final HiveParser.uniqueJoinSource_return uniqueJoinSource() throws RecognitionException {
		HiveParser.uniqueJoinSource_return retval = new HiveParser.uniqueJoinSource_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_PRESERVE731=null;
		ParserRuleReturnScope fromSource732 =null;
		ParserRuleReturnScope uniqueJoinExpr733 =null;

		CommonTree KW_PRESERVE731_tree=null;

		 msgs.push("join source"); 
		try {
			// Hive.g:1614:5: ( ( KW_PRESERVE )? fromSource uniqueJoinExpr )
			// Hive.g:1614:7: ( KW_PRESERVE )? fromSource uniqueJoinExpr
			{
			root_0 = (CommonTree)adaptor.nil();


			// Hive.g:1614:7: ( KW_PRESERVE )?
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==KW_PRESERVE) ) {
				alt226=1;
			}
			switch (alt226) {
				case 1 :
					// Hive.g:1614:7: KW_PRESERVE
					{
					KW_PRESERVE731=(Token)match(input,KW_PRESERVE,FOLLOW_KW_PRESERVE_in_uniqueJoinSource11730); 
					KW_PRESERVE731_tree = (CommonTree)adaptor.create(KW_PRESERVE731);
					adaptor.addChild(root_0, KW_PRESERVE731_tree);

					}
					break;

			}

			pushFollow(FOLLOW_fromSource_in_uniqueJoinSource11733);
			fromSource732=fromSource();
			state._fsp--;

			adaptor.addChild(root_0, fromSource732.getTree());

			pushFollow(FOLLOW_uniqueJoinExpr_in_uniqueJoinSource11735);
			uniqueJoinExpr733=uniqueJoinExpr();
			state._fsp--;

			adaptor.addChild(root_0, uniqueJoinExpr733.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "uniqueJoinSource"


	public static class uniqueJoinExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "uniqueJoinExpr"
	// Hive.g:1617:1: uniqueJoinExpr : LPAREN e1+= expression ( COMMA e1+= expression )* RPAREN -> ^( TOK_EXPLIST ( $e1)* ) ;
	public final HiveParser.uniqueJoinExpr_return uniqueJoinExpr() throws RecognitionException {
		HiveParser.uniqueJoinExpr_return retval = new HiveParser.uniqueJoinExpr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN734=null;
		Token COMMA735=null;
		Token RPAREN736=null;
		List<Object> list_e1=null;
		RuleReturnScope e1 = null;
		CommonTree LPAREN734_tree=null;
		CommonTree COMMA735_tree=null;
		CommonTree RPAREN736_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		 msgs.push("unique join expression list"); 
		try {
			// Hive.g:1620:5: ( LPAREN e1+= expression ( COMMA e1+= expression )* RPAREN -> ^( TOK_EXPLIST ( $e1)* ) )
			// Hive.g:1620:7: LPAREN e1+= expression ( COMMA e1+= expression )* RPAREN
			{
			LPAREN734=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_uniqueJoinExpr11762);  
			stream_LPAREN.add(LPAREN734);

			pushFollow(FOLLOW_expression_in_uniqueJoinExpr11766);
			e1=expression();
			state._fsp--;

			stream_expression.add(e1.getTree());
			if (list_e1==null) list_e1=new ArrayList<Object>();
			list_e1.add(e1.getTree());
			// Hive.g:1620:29: ( COMMA e1+= expression )*
			loop227:
			while (true) {
				int alt227=2;
				int LA227_0 = input.LA(1);
				if ( (LA227_0==COMMA) ) {
					alt227=1;
				}

				switch (alt227) {
				case 1 :
					// Hive.g:1620:30: COMMA e1+= expression
					{
					COMMA735=(Token)match(input,COMMA,FOLLOW_COMMA_in_uniqueJoinExpr11769);  
					stream_COMMA.add(COMMA735);

					pushFollow(FOLLOW_expression_in_uniqueJoinExpr11773);
					e1=expression();
					state._fsp--;

					stream_expression.add(e1.getTree());
					if (list_e1==null) list_e1=new ArrayList<Object>();
					list_e1.add(e1.getTree());
					}
					break;

				default :
					break loop227;
				}
			}

			RPAREN736=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_uniqueJoinExpr11777);  
			stream_RPAREN.add(RPAREN736);

			// AST REWRITE
			// elements: e1
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: e1
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"token e1",list_e1);
			root_0 = (CommonTree)adaptor.nil();
			// 1621:7: -> ^( TOK_EXPLIST ( $e1)* )
			{
				// Hive.g:1621:10: ^( TOK_EXPLIST ( $e1)* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_EXPLIST, "TOK_EXPLIST"), root_1);
				// Hive.g:1621:25: ( $e1)*
				while ( stream_e1.hasNext() ) {
					adaptor.addChild(root_1, stream_e1.nextTree());
				}
				stream_e1.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "uniqueJoinExpr"


	public static class uniqueJoinToken_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "uniqueJoinToken"
	// Hive.g:1624:1: uniqueJoinToken : KW_UNIQUEJOIN -> TOK_UNIQUEJOIN ;
	public final HiveParser.uniqueJoinToken_return uniqueJoinToken() throws RecognitionException {
		HiveParser.uniqueJoinToken_return retval = new HiveParser.uniqueJoinToken_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_UNIQUEJOIN737=null;

		CommonTree KW_UNIQUEJOIN737_tree=null;
		RewriteRuleTokenStream stream_KW_UNIQUEJOIN=new RewriteRuleTokenStream(adaptor,"token KW_UNIQUEJOIN");

		 msgs.push("unique join"); 
		try {
			// Hive.g:1627:5: ( KW_UNIQUEJOIN -> TOK_UNIQUEJOIN )
			// Hive.g:1627:7: KW_UNIQUEJOIN
			{
			KW_UNIQUEJOIN737=(Token)match(input,KW_UNIQUEJOIN,FOLLOW_KW_UNIQUEJOIN_in_uniqueJoinToken11820);  
			stream_KW_UNIQUEJOIN.add(KW_UNIQUEJOIN737);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1627:21: -> TOK_UNIQUEJOIN
			{
				adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_UNIQUEJOIN, "TOK_UNIQUEJOIN"));
			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "uniqueJoinToken"


	public static class joinToken_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "joinToken"
	// Hive.g:1629:1: joinToken : ( KW_JOIN -> TOK_JOIN | kwInner KW_JOIN -> TOK_JOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN );
	public final HiveParser.joinToken_return joinToken() throws RecognitionException {
		HiveParser.joinToken_return retval = new HiveParser.joinToken_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_JOIN738=null;
		Token KW_JOIN740=null;
		Token KW_LEFT741=null;
		Token KW_OUTER742=null;
		Token KW_JOIN743=null;
		Token KW_RIGHT744=null;
		Token KW_OUTER745=null;
		Token KW_JOIN746=null;
		Token KW_FULL747=null;
		Token KW_OUTER748=null;
		Token KW_JOIN749=null;
		Token KW_LEFT750=null;
		Token KW_SEMI751=null;
		Token KW_JOIN752=null;
		ParserRuleReturnScope kwInner739 =null;

		CommonTree KW_JOIN738_tree=null;
		CommonTree KW_JOIN740_tree=null;
		CommonTree KW_LEFT741_tree=null;
		CommonTree KW_OUTER742_tree=null;
		CommonTree KW_JOIN743_tree=null;
		CommonTree KW_RIGHT744_tree=null;
		CommonTree KW_OUTER745_tree=null;
		CommonTree KW_JOIN746_tree=null;
		CommonTree KW_FULL747_tree=null;
		CommonTree KW_OUTER748_tree=null;
		CommonTree KW_JOIN749_tree=null;
		CommonTree KW_LEFT750_tree=null;
		CommonTree KW_SEMI751_tree=null;
		CommonTree KW_JOIN752_tree=null;
		RewriteRuleTokenStream stream_KW_RIGHT=new RewriteRuleTokenStream(adaptor,"token KW_RIGHT");
		RewriteRuleTokenStream stream_KW_OUTER=new RewriteRuleTokenStream(adaptor,"token KW_OUTER");
		RewriteRuleTokenStream stream_KW_JOIN=new RewriteRuleTokenStream(adaptor,"token KW_JOIN");
		RewriteRuleTokenStream stream_KW_LEFT=new RewriteRuleTokenStream(adaptor,"token KW_LEFT");
		RewriteRuleTokenStream stream_KW_SEMI=new RewriteRuleTokenStream(adaptor,"token KW_SEMI");
		RewriteRuleTokenStream stream_KW_FULL=new RewriteRuleTokenStream(adaptor,"token KW_FULL");
		RewriteRuleSubtreeStream stream_kwInner=new RewriteRuleSubtreeStream(adaptor,"rule kwInner");

		 msgs.push("join type specifier"); 
		try {
			// Hive.g:1632:5: ( KW_JOIN -> TOK_JOIN | kwInner KW_JOIN -> TOK_JOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN )
			int alt228=6;
			switch ( input.LA(1) ) {
			case KW_JOIN:
				{
				alt228=1;
				}
				break;
			case Identifier:
				{
				alt228=2;
				}
				break;
			case KW_LEFT:
				{
				int LA228_3 = input.LA(2);
				if ( (LA228_3==KW_OUTER) ) {
					alt228=3;
				}
				else if ( (LA228_3==KW_SEMI) ) {
					alt228=6;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 228, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_RIGHT:
				{
				alt228=4;
				}
				break;
			case KW_FULL:
				{
				alt228=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 228, 0, input);
				throw nvae;
			}
			switch (alt228) {
				case 1 :
					// Hive.g:1633:7: KW_JOIN
					{
					KW_JOIN738=(Token)match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken11852);  
					stream_KW_JOIN.add(KW_JOIN738);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1633:35: -> TOK_JOIN
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_JOIN, "TOK_JOIN"));
					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1634:7: kwInner KW_JOIN
					{
					pushFollow(FOLLOW_kwInner_in_joinToken11884);
					kwInner739=kwInner();
					state._fsp--;

					stream_kwInner.add(kwInner739.getTree());
					KW_JOIN740=(Token)match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken11887);  
					stream_KW_JOIN.add(KW_JOIN740);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1634:35: -> TOK_JOIN
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_JOIN, "TOK_JOIN"));
					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// Hive.g:1635:7: KW_LEFT KW_OUTER KW_JOIN
					{
					KW_LEFT741=(Token)match(input,KW_LEFT,FOLLOW_KW_LEFT_in_joinToken11910);  
					stream_KW_LEFT.add(KW_LEFT741);

					KW_OUTER742=(Token)match(input,KW_OUTER,FOLLOW_KW_OUTER_in_joinToken11913);  
					stream_KW_OUTER.add(KW_OUTER742);

					KW_JOIN743=(Token)match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken11915);  
					stream_KW_JOIN.add(KW_JOIN743);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1635:35: -> TOK_LEFTOUTERJOIN
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_LEFTOUTERJOIN, "TOK_LEFTOUTERJOIN"));
					}


					retval.tree = root_0;

					}
					break;
				case 4 :
					// Hive.g:1636:7: KW_RIGHT KW_OUTER KW_JOIN
					{
					KW_RIGHT744=(Token)match(input,KW_RIGHT,FOLLOW_KW_RIGHT_in_joinToken11929);  
					stream_KW_RIGHT.add(KW_RIGHT744);

					KW_OUTER745=(Token)match(input,KW_OUTER,FOLLOW_KW_OUTER_in_joinToken11931);  
					stream_KW_OUTER.add(KW_OUTER745);

					KW_JOIN746=(Token)match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken11933);  
					stream_KW_JOIN.add(KW_JOIN746);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1636:35: -> TOK_RIGHTOUTERJOIN
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_RIGHTOUTERJOIN, "TOK_RIGHTOUTERJOIN"));
					}


					retval.tree = root_0;

					}
					break;
				case 5 :
					// Hive.g:1637:7: KW_FULL KW_OUTER KW_JOIN
					{
					KW_FULL747=(Token)match(input,KW_FULL,FOLLOW_KW_FULL_in_joinToken11947);  
					stream_KW_FULL.add(KW_FULL747);

					KW_OUTER748=(Token)match(input,KW_OUTER,FOLLOW_KW_OUTER_in_joinToken11950);  
					stream_KW_OUTER.add(KW_OUTER748);

					KW_JOIN749=(Token)match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken11952);  
					stream_KW_JOIN.add(KW_JOIN749);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1637:35: -> TOK_FULLOUTERJOIN
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_FULLOUTERJOIN, "TOK_FULLOUTERJOIN"));
					}


					retval.tree = root_0;

					}
					break;
				case 6 :
					// Hive.g:1638:7: KW_LEFT KW_SEMI KW_JOIN
					{
					KW_LEFT750=(Token)match(input,KW_LEFT,FOLLOW_KW_LEFT_in_joinToken11966);  
					stream_KW_LEFT.add(KW_LEFT750);

					KW_SEMI751=(Token)match(input,KW_SEMI,FOLLOW_KW_SEMI_in_joinToken11969);  
					stream_KW_SEMI.add(KW_SEMI751);

					KW_JOIN752=(Token)match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken11972);  
					stream_KW_JOIN.add(KW_JOIN752);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1638:35: -> TOK_LEFTSEMIJOIN
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_LEFTSEMIJOIN, "TOK_LEFTSEMIJOIN"));
					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "joinToken"


	public static class lateralView_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "lateralView"
	// Hive.g:1641:1: lateralView : KW_LATERAL KW_VIEW function tableAlias KW_AS Identifier ( COMMA Identifier )* -> ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) ) ;
	public final HiveParser.lateralView_return lateralView() throws RecognitionException {
		HiveParser.lateralView_return retval = new HiveParser.lateralView_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_LATERAL753=null;
		Token KW_VIEW754=null;
		Token KW_AS757=null;
		Token Identifier758=null;
		Token COMMA759=null;
		Token Identifier760=null;
		ParserRuleReturnScope function755 =null;
		ParserRuleReturnScope tableAlias756 =null;

		CommonTree KW_LATERAL753_tree=null;
		CommonTree KW_VIEW754_tree=null;
		CommonTree KW_AS757_tree=null;
		CommonTree Identifier758_tree=null;
		CommonTree COMMA759_tree=null;
		CommonTree Identifier760_tree=null;
		RewriteRuleTokenStream stream_KW_LATERAL=new RewriteRuleTokenStream(adaptor,"token KW_LATERAL");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_tableAlias=new RewriteRuleSubtreeStream(adaptor,"rule tableAlias");
		RewriteRuleSubtreeStream stream_function=new RewriteRuleSubtreeStream(adaptor,"rule function");

		msgs.push("lateral view"); 
		try {
			// Hive.g:1644:2: ( KW_LATERAL KW_VIEW function tableAlias KW_AS Identifier ( COMMA Identifier )* -> ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) ) )
			// Hive.g:1645:2: KW_LATERAL KW_VIEW function tableAlias KW_AS Identifier ( COMMA Identifier )*
			{
			KW_LATERAL753=(Token)match(input,KW_LATERAL,FOLLOW_KW_LATERAL_in_lateralView12003);  
			stream_KW_LATERAL.add(KW_LATERAL753);

			KW_VIEW754=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_lateralView12005);  
			stream_KW_VIEW.add(KW_VIEW754);

			pushFollow(FOLLOW_function_in_lateralView12007);
			function755=function();
			state._fsp--;

			stream_function.add(function755.getTree());
			pushFollow(FOLLOW_tableAlias_in_lateralView12009);
			tableAlias756=tableAlias();
			state._fsp--;

			stream_tableAlias.add(tableAlias756.getTree());
			KW_AS757=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_lateralView12011);  
			stream_KW_AS.add(KW_AS757);

			Identifier758=(Token)match(input,Identifier,FOLLOW_Identifier_in_lateralView12013);  
			stream_Identifier.add(Identifier758);

			// Hive.g:1645:58: ( COMMA Identifier )*
			loop229:
			while (true) {
				int alt229=2;
				int LA229_0 = input.LA(1);
				if ( (LA229_0==COMMA) ) {
					alt229=1;
				}

				switch (alt229) {
				case 1 :
					// Hive.g:1645:59: COMMA Identifier
					{
					COMMA759=(Token)match(input,COMMA,FOLLOW_COMMA_in_lateralView12016);  
					stream_COMMA.add(COMMA759);

					Identifier760=(Token)match(input,Identifier,FOLLOW_Identifier_in_lateralView12018);  
					stream_Identifier.add(Identifier760);

					}
					break;

				default :
					break loop229;
				}
			}

			// AST REWRITE
			// elements: function, tableAlias, Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1645:78: -> ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) )
			{
				// Hive.g:1645:81: ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LATERAL_VIEW, "TOK_LATERAL_VIEW"), root_1);
				// Hive.g:1645:100: ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_2);
				// Hive.g:1645:113: ^( TOK_SELEXPR function ( Identifier )+ tableAlias )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_3);
				adaptor.addChild(root_3, stream_function.nextTree());
				if ( !(stream_Identifier.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_Identifier.hasNext() ) {
					adaptor.addChild(root_3, stream_Identifier.nextNode());
				}
				stream_Identifier.reset();

				adaptor.addChild(root_3, stream_tableAlias.nextTree());
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lateralView"


	public static class tableAlias_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableAlias"
	// Hive.g:1648:1: tableAlias : Identifier -> ^( TOK_TABALIAS Identifier ) ;
	public final HiveParser.tableAlias_return tableAlias() throws RecognitionException {
		HiveParser.tableAlias_return retval = new HiveParser.tableAlias_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier761=null;

		CommonTree Identifier761_tree=null;
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

		msgs.push("table alias"); 
		try {
			// Hive.g:1651:5: ( Identifier -> ^( TOK_TABALIAS Identifier ) )
			// Hive.g:1652:5: Identifier
			{
			Identifier761=(Token)match(input,Identifier,FOLLOW_Identifier_in_tableAlias12069);  
			stream_Identifier.add(Identifier761);

			// AST REWRITE
			// elements: Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1652:16: -> ^( TOK_TABALIAS Identifier )
			{
				// Hive.g:1652:19: ^( TOK_TABALIAS Identifier )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABALIAS, "TOK_TABALIAS"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableAlias"


	public static class fromSource_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fromSource"
	// Hive.g:1655:1: fromSource : ( tableSource | subQuerySource ) ( lateralView ^)* ;
	public final HiveParser.fromSource_return fromSource() throws RecognitionException {
		HiveParser.fromSource_return retval = new HiveParser.fromSource_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope tableSource762 =null;
		ParserRuleReturnScope subQuerySource763 =null;
		ParserRuleReturnScope lateralView764 =null;


		 msgs.push("from source"); 
		try {
			// Hive.g:1658:5: ( ( tableSource | subQuerySource ) ( lateralView ^)* )
			// Hive.g:1659:5: ( tableSource | subQuerySource ) ( lateralView ^)*
			{
			root_0 = (CommonTree)adaptor.nil();


			// Hive.g:1659:5: ( tableSource | subQuerySource )
			int alt230=2;
			int LA230_0 = input.LA(1);
			if ( (LA230_0==Identifier) ) {
				alt230=1;
			}
			else if ( (LA230_0==LPAREN) ) {
				alt230=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 230, 0, input);
				throw nvae;
			}

			switch (alt230) {
				case 1 :
					// Hive.g:1659:6: tableSource
					{
					pushFollow(FOLLOW_tableSource_in_fromSource12109);
					tableSource762=tableSource();
					state._fsp--;

					adaptor.addChild(root_0, tableSource762.getTree());

					}
					break;
				case 2 :
					// Hive.g:1659:20: subQuerySource
					{
					pushFollow(FOLLOW_subQuerySource_in_fromSource12113);
					subQuerySource763=subQuerySource();
					state._fsp--;

					adaptor.addChild(root_0, subQuerySource763.getTree());

					}
					break;

			}

			// Hive.g:1659:36: ( lateralView ^)*
			loop231:
			while (true) {
				int alt231=2;
				int LA231_0 = input.LA(1);
				if ( (LA231_0==KW_LATERAL) ) {
					alt231=1;
				}

				switch (alt231) {
				case 1 :
					// Hive.g:1659:37: lateralView ^
					{
					pushFollow(FOLLOW_lateralView_in_fromSource12117);
					lateralView764=lateralView();
					state._fsp--;

					root_0 = (CommonTree)adaptor.becomeRoot(lateralView764.getTree(), root_0);
					}
					break;

				default :
					break loop231;
				}
			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fromSource"


	public static class tableBucketSample_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableBucketSample"
	// Hive.g:1662:1: tableBucketSample : KW_TABLESAMPLE LPAREN KW_BUCKET (numerator= Number ) KW_OUT KW_OF (denominator= Number ) ( KW_ON expr+= expression ( COMMA expr+= expression )* )? RPAREN -> ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* ) ;
	public final HiveParser.tableBucketSample_return tableBucketSample() throws RecognitionException {
		HiveParser.tableBucketSample_return retval = new HiveParser.tableBucketSample_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token numerator=null;
		Token denominator=null;
		Token KW_TABLESAMPLE765=null;
		Token LPAREN766=null;
		Token KW_BUCKET767=null;
		Token KW_OUT768=null;
		Token KW_OF769=null;
		Token KW_ON770=null;
		Token COMMA771=null;
		Token RPAREN772=null;
		List<Object> list_expr=null;
		RuleReturnScope expr = null;
		CommonTree numerator_tree=null;
		CommonTree denominator_tree=null;
		CommonTree KW_TABLESAMPLE765_tree=null;
		CommonTree LPAREN766_tree=null;
		CommonTree KW_BUCKET767_tree=null;
		CommonTree KW_OUT768_tree=null;
		CommonTree KW_OF769_tree=null;
		CommonTree KW_ON770_tree=null;
		CommonTree COMMA771_tree=null;
		CommonTree RPAREN772_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_OUT=new RewriteRuleTokenStream(adaptor,"token KW_OUT");
		RewriteRuleTokenStream stream_KW_OF=new RewriteRuleTokenStream(adaptor,"token KW_OF");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_BUCKET=new RewriteRuleTokenStream(adaptor,"token KW_BUCKET");
		RewriteRuleTokenStream stream_KW_TABLESAMPLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLESAMPLE");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		 msgs.push("table bucket sample specification"); 
		try {
			// Hive.g:1665:5: ( KW_TABLESAMPLE LPAREN KW_BUCKET (numerator= Number ) KW_OUT KW_OF (denominator= Number ) ( KW_ON expr+= expression ( COMMA expr+= expression )* )? RPAREN -> ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* ) )
			// Hive.g:1666:5: KW_TABLESAMPLE LPAREN KW_BUCKET (numerator= Number ) KW_OUT KW_OF (denominator= Number ) ( KW_ON expr+= expression ( COMMA expr+= expression )* )? RPAREN
			{
			KW_TABLESAMPLE765=(Token)match(input,KW_TABLESAMPLE,FOLLOW_KW_TABLESAMPLE_in_tableBucketSample12151);  
			stream_KW_TABLESAMPLE.add(KW_TABLESAMPLE765);

			LPAREN766=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBucketSample12153);  
			stream_LPAREN.add(LPAREN766);

			KW_BUCKET767=(Token)match(input,KW_BUCKET,FOLLOW_KW_BUCKET_in_tableBucketSample12155);  
			stream_KW_BUCKET.add(KW_BUCKET767);

			// Hive.g:1666:37: (numerator= Number )
			// Hive.g:1666:38: numerator= Number
			{
			numerator=(Token)match(input,Number,FOLLOW_Number_in_tableBucketSample12160);  
			stream_Number.add(numerator);

			}

			KW_OUT768=(Token)match(input,KW_OUT,FOLLOW_KW_OUT_in_tableBucketSample12163);  
			stream_KW_OUT.add(KW_OUT768);

			KW_OF769=(Token)match(input,KW_OF,FOLLOW_KW_OF_in_tableBucketSample12165);  
			stream_KW_OF.add(KW_OF769);

			// Hive.g:1666:69: (denominator= Number )
			// Hive.g:1666:70: denominator= Number
			{
			denominator=(Token)match(input,Number,FOLLOW_Number_in_tableBucketSample12170);  
			stream_Number.add(denominator);

			}

			// Hive.g:1666:90: ( KW_ON expr+= expression ( COMMA expr+= expression )* )?
			int alt233=2;
			int LA233_0 = input.LA(1);
			if ( (LA233_0==KW_ON) ) {
				alt233=1;
			}
			switch (alt233) {
				case 1 :
					// Hive.g:1666:91: KW_ON expr+= expression ( COMMA expr+= expression )*
					{
					KW_ON770=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_tableBucketSample12174);  
					stream_KW_ON.add(KW_ON770);

					pushFollow(FOLLOW_expression_in_tableBucketSample12178);
					expr=expression();
					state._fsp--;

					stream_expression.add(expr.getTree());
					if (list_expr==null) list_expr=new ArrayList<Object>();
					list_expr.add(expr.getTree());
					// Hive.g:1666:114: ( COMMA expr+= expression )*
					loop232:
					while (true) {
						int alt232=2;
						int LA232_0 = input.LA(1);
						if ( (LA232_0==COMMA) ) {
							alt232=1;
						}

						switch (alt232) {
						case 1 :
							// Hive.g:1666:115: COMMA expr+= expression
							{
							COMMA771=(Token)match(input,COMMA,FOLLOW_COMMA_in_tableBucketSample12181);  
							stream_COMMA.add(COMMA771);

							pushFollow(FOLLOW_expression_in_tableBucketSample12185);
							expr=expression();
							state._fsp--;

							stream_expression.add(expr.getTree());
							if (list_expr==null) list_expr=new ArrayList<Object>();
							list_expr.add(expr.getTree());
							}
							break;

						default :
							break loop232;
						}
					}

					}
					break;

			}

			RPAREN772=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBucketSample12191);  
			stream_RPAREN.add(RPAREN772);

			// AST REWRITE
			// elements: denominator, numerator, expr
			// token labels: numerator, denominator
			// rule labels: retval
			// token list labels: 
			// rule list labels: expr
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_numerator=new RewriteRuleTokenStream(adaptor,"token numerator",numerator);
			RewriteRuleTokenStream stream_denominator=new RewriteRuleTokenStream(adaptor,"token denominator",denominator);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"token expr",list_expr);
			root_0 = (CommonTree)adaptor.nil();
			// 1666:149: -> ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* )
			{
				// Hive.g:1666:152: ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEBUCKETSAMPLE, "TOK_TABLEBUCKETSAMPLE"), root_1);
				adaptor.addChild(root_1, stream_numerator.nextNode());
				adaptor.addChild(root_1, stream_denominator.nextNode());
				// Hive.g:1666:201: ( $expr)*
				while ( stream_expr.hasNext() ) {
					adaptor.addChild(root_1, stream_expr.nextTree());
				}
				stream_expr.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableBucketSample"


	public static class splitSample_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "splitSample"
	// Hive.g:1669:1: splitSample : KW_TABLESAMPLE LPAREN (numerator= Number ) KW_PERCENT RPAREN -> ^( TOK_TABLESPLITSAMPLE $numerator) ;
	public final HiveParser.splitSample_return splitSample() throws RecognitionException {
		HiveParser.splitSample_return retval = new HiveParser.splitSample_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token numerator=null;
		Token KW_TABLESAMPLE773=null;
		Token LPAREN774=null;
		Token KW_PERCENT775=null;
		Token RPAREN776=null;

		CommonTree numerator_tree=null;
		CommonTree KW_TABLESAMPLE773_tree=null;
		CommonTree LPAREN774_tree=null;
		CommonTree KW_PERCENT775_tree=null;
		CommonTree RPAREN776_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_TABLESAMPLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLESAMPLE");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_PERCENT=new RewriteRuleTokenStream(adaptor,"token KW_PERCENT");

		 msgs.push("table split sample specification"); 
		try {
			// Hive.g:1672:5: ( KW_TABLESAMPLE LPAREN (numerator= Number ) KW_PERCENT RPAREN -> ^( TOK_TABLESPLITSAMPLE $numerator) )
			// Hive.g:1673:5: KW_TABLESAMPLE LPAREN (numerator= Number ) KW_PERCENT RPAREN
			{
			KW_TABLESAMPLE773=(Token)match(input,KW_TABLESAMPLE,FOLLOW_KW_TABLESAMPLE_in_splitSample12238);  
			stream_KW_TABLESAMPLE.add(KW_TABLESAMPLE773);

			LPAREN774=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_splitSample12240);  
			stream_LPAREN.add(LPAREN774);

			// Hive.g:1673:28: (numerator= Number )
			// Hive.g:1673:29: numerator= Number
			{
			numerator=(Token)match(input,Number,FOLLOW_Number_in_splitSample12246);  
			stream_Number.add(numerator);

			}

			KW_PERCENT775=(Token)match(input,KW_PERCENT,FOLLOW_KW_PERCENT_in_splitSample12249);  
			stream_KW_PERCENT.add(KW_PERCENT775);

			RPAREN776=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_splitSample12251);  
			stream_RPAREN.add(RPAREN776);

			// AST REWRITE
			// elements: numerator
			// token labels: numerator
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_numerator=new RewriteRuleTokenStream(adaptor,"token numerator",numerator);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1673:65: -> ^( TOK_TABLESPLITSAMPLE $numerator)
			{
				// Hive.g:1673:68: ^( TOK_TABLESPLITSAMPLE $numerator)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLESPLITSAMPLE, "TOK_TABLESPLITSAMPLE"), root_1);
				adaptor.addChild(root_1, stream_numerator.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "splitSample"


	public static class tableSample_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableSample"
	// Hive.g:1676:1: tableSample : ( tableBucketSample | splitSample );
	public final HiveParser.tableSample_return tableSample() throws RecognitionException {
		HiveParser.tableSample_return retval = new HiveParser.tableSample_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope tableBucketSample777 =null;
		ParserRuleReturnScope splitSample778 =null;


		 msgs.push("table sample specification"); 
		try {
			// Hive.g:1679:5: ( tableBucketSample | splitSample )
			int alt234=2;
			int LA234_0 = input.LA(1);
			if ( (LA234_0==KW_TABLESAMPLE) ) {
				int LA234_1 = input.LA(2);
				if ( (LA234_1==LPAREN) ) {
					int LA234_2 = input.LA(3);
					if ( (LA234_2==KW_BUCKET) ) {
						alt234=1;
					}
					else if ( (LA234_2==Number) ) {
						alt234=2;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 234, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 234, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 234, 0, input);
				throw nvae;
			}

			switch (alt234) {
				case 1 :
					// Hive.g:1680:5: tableBucketSample
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_tableBucketSample_in_tableSample12291);
					tableBucketSample777=tableBucketSample();
					state._fsp--;

					adaptor.addChild(root_0, tableBucketSample777.getTree());

					}
					break;
				case 2 :
					// Hive.g:1681:5: splitSample
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_splitSample_in_tableSample12299);
					splitSample778=splitSample();
					state._fsp--;

					adaptor.addChild(root_0, splitSample778.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableSample"


	public static class tableSource_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableSource"
	// Hive.g:1684:1: tableSource : tabname= tableName (ts= tableSample )? (alias= Identifier )? -> ^( TOK_TABREF $tabname ( $ts)? ( $alias)? ) ;
	public final HiveParser.tableSource_return tableSource() throws RecognitionException {
		HiveParser.tableSource_return retval = new HiveParser.tableSource_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token alias=null;
		ParserRuleReturnScope tabname =null;
		ParserRuleReturnScope ts =null;

		CommonTree alias_tree=null;
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_tableSample=new RewriteRuleSubtreeStream(adaptor,"rule tableSample");

		 msgs.push("table source"); 
		try {
			// Hive.g:1687:5: (tabname= tableName (ts= tableSample )? (alias= Identifier )? -> ^( TOK_TABREF $tabname ( $ts)? ( $alias)? ) )
			// Hive.g:1687:7: tabname= tableName (ts= tableSample )? (alias= Identifier )?
			{
			pushFollow(FOLLOW_tableName_in_tableSource12328);
			tabname=tableName();
			state._fsp--;

			stream_tableName.add(tabname.getTree());
			// Hive.g:1687:25: (ts= tableSample )?
			int alt235=2;
			int LA235_0 = input.LA(1);
			if ( (LA235_0==KW_TABLESAMPLE) ) {
				alt235=1;
			}
			switch (alt235) {
				case 1 :
					// Hive.g:1687:26: ts= tableSample
					{
					pushFollow(FOLLOW_tableSample_in_tableSource12333);
					ts=tableSample();
					state._fsp--;

					stream_tableSample.add(ts.getTree());
					}
					break;

			}

			// Hive.g:1687:43: (alias= Identifier )?
			int alt236=2;
			int LA236_0 = input.LA(1);
			if ( (LA236_0==Identifier) ) {
				int LA236_1 = input.LA(2);
				if ( (LA236_1==EOF||LA236_1==Identifier||LA236_1==KW_CLUSTER||LA236_1==KW_DISTRIBUTE||LA236_1==KW_FULL||(LA236_1 >= KW_GROUP && LA236_1 <= KW_HAVING)||LA236_1==KW_INSERT||(LA236_1 >= KW_LATERAL && LA236_1 <= KW_LEFT)||LA236_1==KW_LIMIT||LA236_1==KW_MAP||LA236_1==KW_ON||LA236_1==KW_ORDER||LA236_1==KW_REDUCE||LA236_1==KW_RIGHT||LA236_1==KW_SELECT||LA236_1==KW_SORT||LA236_1==KW_UNION||LA236_1==KW_WHERE||LA236_1==LPAREN||LA236_1==RPAREN) ) {
					alt236=1;
				}
				else if ( (LA236_1==KW_JOIN) ) {
					int LA236_25 = input.LA(3);
					if ( (!(((input.LT(1).getText().equalsIgnoreCase("inner"))))) ) {
						alt236=1;
					}
				}
			}
			switch (alt236) {
				case 1 :
					// Hive.g:1687:44: alias= Identifier
					{
					alias=(Token)match(input,Identifier,FOLLOW_Identifier_in_tableSource12340);  
					stream_Identifier.add(alias);

					}
					break;

			}

			// AST REWRITE
			// elements: alias, ts, tabname
			// token labels: alias
			// rule labels: retval, ts, tabname
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_alias=new RewriteRuleTokenStream(adaptor,"token alias",alias);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_ts=new RewriteRuleSubtreeStream(adaptor,"rule ts",ts!=null?ts.getTree():null);
			RewriteRuleSubtreeStream stream_tabname=new RewriteRuleSubtreeStream(adaptor,"rule tabname",tabname!=null?tabname.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1688:5: -> ^( TOK_TABREF $tabname ( $ts)? ( $alias)? )
			{
				// Hive.g:1688:8: ^( TOK_TABREF $tabname ( $ts)? ( $alias)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABREF, "TOK_TABREF"), root_1);
				adaptor.addChild(root_1, stream_tabname.nextTree());
				// Hive.g:1688:31: ( $ts)?
				if ( stream_ts.hasNext() ) {
					adaptor.addChild(root_1, stream_ts.nextTree());
				}
				stream_ts.reset();

				// Hive.g:1688:36: ( $alias)?
				if ( stream_alias.hasNext() ) {
					adaptor.addChild(root_1, stream_alias.nextNode());
				}
				stream_alias.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableSource"


	public static class tableName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableName"
	// Hive.g:1691:1: tableName : (db= Identifier DOT )? tab= Identifier -> ^( TOK_TABNAME ( $db)? $tab) ;
	public final HiveParser.tableName_return tableName() throws RecognitionException {
		HiveParser.tableName_return retval = new HiveParser.tableName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token db=null;
		Token tab=null;
		Token DOT779=null;

		CommonTree db_tree=null;
		CommonTree tab_tree=null;
		CommonTree DOT779_tree=null;
		RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

		 msgs.push("table name"); 
		try {
			// Hive.g:1694:5: ( (db= Identifier DOT )? tab= Identifier -> ^( TOK_TABNAME ( $db)? $tab) )
			// Hive.g:1694:7: (db= Identifier DOT )? tab= Identifier
			{
			// Hive.g:1694:7: (db= Identifier DOT )?
			int alt237=2;
			int LA237_0 = input.LA(1);
			if ( (LA237_0==Identifier) ) {
				int LA237_1 = input.LA(2);
				if ( (LA237_1==DOT) ) {
					int LA237_2 = input.LA(3);
					if ( (LA237_2==Identifier) ) {
						alt237=1;
					}
				}
			}
			switch (alt237) {
				case 1 :
					// Hive.g:1694:8: db= Identifier DOT
					{
					db=(Token)match(input,Identifier,FOLLOW_Identifier_in_tableName12393);  
					stream_Identifier.add(db);

					DOT779=(Token)match(input,DOT,FOLLOW_DOT_in_tableName12395);  
					stream_DOT.add(DOT779);

					}
					break;

			}

			tab=(Token)match(input,Identifier,FOLLOW_Identifier_in_tableName12401);  
			stream_Identifier.add(tab);

			// AST REWRITE
			// elements: db, tab
			// token labels: db, tab
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
			RewriteRuleTokenStream stream_tab=new RewriteRuleTokenStream(adaptor,"token tab",tab);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1695:5: -> ^( TOK_TABNAME ( $db)? $tab)
			{
				// Hive.g:1695:8: ^( TOK_TABNAME ( $db)? $tab)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABNAME, "TOK_TABNAME"), root_1);
				// Hive.g:1695:23: ( $db)?
				if ( stream_db.hasNext() ) {
					adaptor.addChild(root_1, stream_db.nextNode());
				}
				stream_db.reset();

				adaptor.addChild(root_1, stream_tab.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableName"


	public static class viewName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "viewName"
	// Hive.g:1698:1: viewName : (db= Identifier DOT )? view= Identifier -> ^( TOK_TABNAME ( $db)? $view) ;
	public final HiveParser.viewName_return viewName() throws RecognitionException {
		HiveParser.viewName_return retval = new HiveParser.viewName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token db=null;
		Token view=null;
		Token DOT780=null;

		CommonTree db_tree=null;
		CommonTree view_tree=null;
		CommonTree DOT780_tree=null;
		RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

		 msgs.push("view name"); 
		try {
			// Hive.g:1701:5: ( (db= Identifier DOT )? view= Identifier -> ^( TOK_TABNAME ( $db)? $view) )
			// Hive.g:1702:5: (db= Identifier DOT )? view= Identifier
			{
			// Hive.g:1702:5: (db= Identifier DOT )?
			int alt238=2;
			int LA238_0 = input.LA(1);
			if ( (LA238_0==Identifier) ) {
				int LA238_1 = input.LA(2);
				if ( (LA238_1==DOT) ) {
					alt238=1;
				}
			}
			switch (alt238) {
				case 1 :
					// Hive.g:1702:6: db= Identifier DOT
					{
					db=(Token)match(input,Identifier,FOLLOW_Identifier_in_viewName12452);  
					stream_Identifier.add(db);

					DOT780=(Token)match(input,DOT,FOLLOW_DOT_in_viewName12454);  
					stream_DOT.add(DOT780);

					}
					break;

			}

			view=(Token)match(input,Identifier,FOLLOW_Identifier_in_viewName12460);  
			stream_Identifier.add(view);

			// AST REWRITE
			// elements: view, db
			// token labels: db, view
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
			RewriteRuleTokenStream stream_view=new RewriteRuleTokenStream(adaptor,"token view",view);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1703:5: -> ^( TOK_TABNAME ( $db)? $view)
			{
				// Hive.g:1703:8: ^( TOK_TABNAME ( $db)? $view)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABNAME, "TOK_TABNAME"), root_1);
				// Hive.g:1703:23: ( $db)?
				if ( stream_db.hasNext() ) {
					adaptor.addChild(root_1, stream_db.nextNode());
				}
				stream_db.reset();

				adaptor.addChild(root_1, stream_view.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "viewName"


	public static class subQuerySource_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "subQuerySource"
	// Hive.g:1706:1: subQuerySource : LPAREN queryStatementExpression RPAREN Identifier -> ^( TOK_SUBQUERY queryStatementExpression Identifier ) ;
	public final HiveParser.subQuerySource_return subQuerySource() throws RecognitionException {
		HiveParser.subQuerySource_return retval = new HiveParser.subQuerySource_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN781=null;
		Token RPAREN783=null;
		Token Identifier784=null;
		ParserRuleReturnScope queryStatementExpression782 =null;

		CommonTree LPAREN781_tree=null;
		CommonTree RPAREN783_tree=null;
		CommonTree Identifier784_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");

		 msgs.push("subquery source"); 
		try {
			// Hive.g:1709:5: ( LPAREN queryStatementExpression RPAREN Identifier -> ^( TOK_SUBQUERY queryStatementExpression Identifier ) )
			// Hive.g:1710:5: LPAREN queryStatementExpression RPAREN Identifier
			{
			LPAREN781=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQuerySource12508);  
			stream_LPAREN.add(LPAREN781);

			pushFollow(FOLLOW_queryStatementExpression_in_subQuerySource12510);
			queryStatementExpression782=queryStatementExpression();
			state._fsp--;

			stream_queryStatementExpression.add(queryStatementExpression782.getTree());
			RPAREN783=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQuerySource12512);  
			stream_RPAREN.add(RPAREN783);

			Identifier784=(Token)match(input,Identifier,FOLLOW_Identifier_in_subQuerySource12514);  
			stream_Identifier.add(Identifier784);

			// AST REWRITE
			// elements: queryStatementExpression, Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1710:55: -> ^( TOK_SUBQUERY queryStatementExpression Identifier )
			{
				// Hive.g:1710:58: ^( TOK_SUBQUERY queryStatementExpression Identifier )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_1);
				adaptor.addChild(root_1, stream_queryStatementExpression.nextTree());
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subQuerySource"


	public static class whereClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "whereClause"
	// Hive.g:1715:1: whereClause : KW_WHERE searchCondition -> ^( TOK_WHERE searchCondition ) ;
	public final HiveParser.whereClause_return whereClause() throws RecognitionException {
		HiveParser.whereClause_return retval = new HiveParser.whereClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_WHERE785=null;
		ParserRuleReturnScope searchCondition786 =null;

		CommonTree KW_WHERE785_tree=null;
		RewriteRuleTokenStream stream_KW_WHERE=new RewriteRuleTokenStream(adaptor,"token KW_WHERE");
		RewriteRuleSubtreeStream stream_searchCondition=new RewriteRuleSubtreeStream(adaptor,"rule searchCondition");

		 msgs.push("where clause"); 
		try {
			// Hive.g:1718:5: ( KW_WHERE searchCondition -> ^( TOK_WHERE searchCondition ) )
			// Hive.g:1719:5: KW_WHERE searchCondition
			{
			KW_WHERE785=(Token)match(input,KW_WHERE,FOLLOW_KW_WHERE_in_whereClause12557);  
			stream_KW_WHERE.add(KW_WHERE785);

			pushFollow(FOLLOW_searchCondition_in_whereClause12559);
			searchCondition786=searchCondition();
			state._fsp--;

			stream_searchCondition.add(searchCondition786.getTree());
			// AST REWRITE
			// elements: searchCondition
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1719:30: -> ^( TOK_WHERE searchCondition )
			{
				// Hive.g:1719:33: ^( TOK_WHERE searchCondition )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_WHERE, "TOK_WHERE"), root_1);
				adaptor.addChild(root_1, stream_searchCondition.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "whereClause"


	public static class searchCondition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "searchCondition"
	// Hive.g:1722:1: searchCondition : expression ;
	public final HiveParser.searchCondition_return searchCondition() throws RecognitionException {
		HiveParser.searchCondition_return retval = new HiveParser.searchCondition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope expression787 =null;


		 msgs.push("search condition"); 
		try {
			// Hive.g:1725:5: ( expression )
			// Hive.g:1726:5: expression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_expression_in_searchCondition12598);
			expression787=expression();
			state._fsp--;

			adaptor.addChild(root_0, expression787.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "searchCondition"


	public static class groupByClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "groupByClause"
	// Hive.g:1732:1: groupByClause : KW_GROUP KW_BY groupByExpression ( COMMA groupByExpression )* -> ^( TOK_GROUPBY ( groupByExpression )+ ) ;
	public final HiveParser.groupByClause_return groupByClause() throws RecognitionException {
		HiveParser.groupByClause_return retval = new HiveParser.groupByClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_GROUP788=null;
		Token KW_BY789=null;
		Token COMMA791=null;
		ParserRuleReturnScope groupByExpression790 =null;
		ParserRuleReturnScope groupByExpression792 =null;

		CommonTree KW_GROUP788_tree=null;
		CommonTree KW_BY789_tree=null;
		CommonTree COMMA791_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_GROUP=new RewriteRuleTokenStream(adaptor,"token KW_GROUP");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleSubtreeStream stream_groupByExpression=new RewriteRuleSubtreeStream(adaptor,"rule groupByExpression");

		 msgs.push("group by clause"); 
		try {
			// Hive.g:1735:5: ( KW_GROUP KW_BY groupByExpression ( COMMA groupByExpression )* -> ^( TOK_GROUPBY ( groupByExpression )+ ) )
			// Hive.g:1736:5: KW_GROUP KW_BY groupByExpression ( COMMA groupByExpression )*
			{
			KW_GROUP788=(Token)match(input,KW_GROUP,FOLLOW_KW_GROUP_in_groupByClause12632);  
			stream_KW_GROUP.add(KW_GROUP788);

			KW_BY789=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_groupByClause12634);  
			stream_KW_BY.add(KW_BY789);

			pushFollow(FOLLOW_groupByExpression_in_groupByClause12640);
			groupByExpression790=groupByExpression();
			state._fsp--;

			stream_groupByExpression.add(groupByExpression790.getTree());
			// Hive.g:1738:5: ( COMMA groupByExpression )*
			loop239:
			while (true) {
				int alt239=2;
				int LA239_0 = input.LA(1);
				if ( (LA239_0==COMMA) ) {
					alt239=1;
				}

				switch (alt239) {
				case 1 :
					// Hive.g:1738:7: COMMA groupByExpression
					{
					COMMA791=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByClause12648);  
					stream_COMMA.add(COMMA791);

					pushFollow(FOLLOW_groupByExpression_in_groupByClause12650);
					groupByExpression792=groupByExpression();
					state._fsp--;

					stream_groupByExpression.add(groupByExpression792.getTree());
					}
					break;

				default :
					break loop239;
				}
			}

			// AST REWRITE
			// elements: groupByExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1739:5: -> ^( TOK_GROUPBY ( groupByExpression )+ )
			{
				// Hive.g:1739:8: ^( TOK_GROUPBY ( groupByExpression )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GROUPBY, "TOK_GROUPBY"), root_1);
				if ( !(stream_groupByExpression.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_groupByExpression.hasNext() ) {
					adaptor.addChild(root_1, stream_groupByExpression.nextTree());
				}
				stream_groupByExpression.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "groupByClause"


	public static class groupByExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "groupByExpression"
	// Hive.g:1742:1: groupByExpression : expression ;
	public final HiveParser.groupByExpression_return groupByExpression() throws RecognitionException {
		HiveParser.groupByExpression_return retval = new HiveParser.groupByExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope expression793 =null;


		 msgs.push("group by expression"); 
		try {
			// Hive.g:1745:5: ( expression )
			// Hive.g:1746:5: expression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_expression_in_groupByExpression12697);
			expression793=expression();
			state._fsp--;

			adaptor.addChild(root_0, expression793.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "groupByExpression"


	public static class havingClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "havingClause"
	// Hive.g:1749:1: havingClause : KW_HAVING havingCondition -> ^( TOK_HAVING havingCondition ) ;
	public final HiveParser.havingClause_return havingClause() throws RecognitionException {
		HiveParser.havingClause_return retval = new HiveParser.havingClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_HAVING794=null;
		ParserRuleReturnScope havingCondition795 =null;

		CommonTree KW_HAVING794_tree=null;
		RewriteRuleTokenStream stream_KW_HAVING=new RewriteRuleTokenStream(adaptor,"token KW_HAVING");
		RewriteRuleSubtreeStream stream_havingCondition=new RewriteRuleSubtreeStream(adaptor,"rule havingCondition");

		 msgs.push("having clause"); 
		try {
			// Hive.g:1752:5: ( KW_HAVING havingCondition -> ^( TOK_HAVING havingCondition ) )
			// Hive.g:1753:5: KW_HAVING havingCondition
			{
			KW_HAVING794=(Token)match(input,KW_HAVING,FOLLOW_KW_HAVING_in_havingClause12728);  
			stream_KW_HAVING.add(KW_HAVING794);

			pushFollow(FOLLOW_havingCondition_in_havingClause12730);
			havingCondition795=havingCondition();
			state._fsp--;

			stream_havingCondition.add(havingCondition795.getTree());
			// AST REWRITE
			// elements: havingCondition
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1753:31: -> ^( TOK_HAVING havingCondition )
			{
				// Hive.g:1753:34: ^( TOK_HAVING havingCondition )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_HAVING, "TOK_HAVING"), root_1);
				adaptor.addChild(root_1, stream_havingCondition.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "havingClause"


	public static class havingCondition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "havingCondition"
	// Hive.g:1756:1: havingCondition : expression ;
	public final HiveParser.havingCondition_return havingCondition() throws RecognitionException {
		HiveParser.havingCondition_return retval = new HiveParser.havingCondition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope expression796 =null;


		 msgs.push("having condition"); 
		try {
			// Hive.g:1759:5: ( expression )
			// Hive.g:1760:5: expression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_expression_in_havingCondition12769);
			expression796=expression();
			state._fsp--;

			adaptor.addChild(root_0, expression796.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "havingCondition"


	public static class orderByClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "orderByClause"
	// Hive.g:1764:1: orderByClause : KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_ORDERBY ( columnRefOrder )+ ) ;
	public final HiveParser.orderByClause_return orderByClause() throws RecognitionException {
		HiveParser.orderByClause_return retval = new HiveParser.orderByClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ORDER797=null;
		Token KW_BY798=null;
		Token COMMA800=null;
		ParserRuleReturnScope columnRefOrder799 =null;
		ParserRuleReturnScope columnRefOrder801 =null;

		CommonTree KW_ORDER797_tree=null;
		CommonTree KW_BY798_tree=null;
		CommonTree COMMA800_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_ORDER=new RewriteRuleTokenStream(adaptor,"token KW_ORDER");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleSubtreeStream stream_columnRefOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnRefOrder");

		 msgs.push("order by clause"); 
		try {
			// Hive.g:1767:5: ( KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_ORDERBY ( columnRefOrder )+ ) )
			// Hive.g:1768:5: KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )*
			{
			KW_ORDER797=(Token)match(input,KW_ORDER,FOLLOW_KW_ORDER_in_orderByClause12801);  
			stream_KW_ORDER.add(KW_ORDER797);

			KW_BY798=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_orderByClause12803);  
			stream_KW_BY.add(KW_BY798);

			pushFollow(FOLLOW_columnRefOrder_in_orderByClause12809);
			columnRefOrder799=columnRefOrder();
			state._fsp--;

			stream_columnRefOrder.add(columnRefOrder799.getTree());
			// Hive.g:1770:5: ( COMMA columnRefOrder )*
			loop240:
			while (true) {
				int alt240=2;
				int LA240_0 = input.LA(1);
				if ( (LA240_0==COMMA) ) {
					alt240=1;
				}

				switch (alt240) {
				case 1 :
					// Hive.g:1770:7: COMMA columnRefOrder
					{
					COMMA800=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByClause12817);  
					stream_COMMA.add(COMMA800);

					pushFollow(FOLLOW_columnRefOrder_in_orderByClause12819);
					columnRefOrder801=columnRefOrder();
					state._fsp--;

					stream_columnRefOrder.add(columnRefOrder801.getTree());
					}
					break;

				default :
					break loop240;
				}
			}

			// AST REWRITE
			// elements: columnRefOrder
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1770:30: -> ^( TOK_ORDERBY ( columnRefOrder )+ )
			{
				// Hive.g:1770:33: ^( TOK_ORDERBY ( columnRefOrder )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ORDERBY, "TOK_ORDERBY"), root_1);
				if ( !(stream_columnRefOrder.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnRefOrder.hasNext() ) {
					adaptor.addChild(root_1, stream_columnRefOrder.nextTree());
				}
				stream_columnRefOrder.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "orderByClause"


	public static class clusterByClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "clusterByClause"
	// Hive.g:1773:1: clusterByClause : KW_CLUSTER KW_BY expression ( COMMA expression )* -> ^( TOK_CLUSTERBY ( expression )+ ) ;
	public final HiveParser.clusterByClause_return clusterByClause() throws RecognitionException {
		HiveParser.clusterByClause_return retval = new HiveParser.clusterByClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CLUSTER802=null;
		Token KW_BY803=null;
		Token COMMA805=null;
		ParserRuleReturnScope expression804 =null;
		ParserRuleReturnScope expression806 =null;

		CommonTree KW_CLUSTER802_tree=null;
		CommonTree KW_BY803_tree=null;
		CommonTree COMMA805_tree=null;
		RewriteRuleTokenStream stream_KW_CLUSTER=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTER");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		 msgs.push("cluster by clause"); 
		try {
			// Hive.g:1776:5: ( KW_CLUSTER KW_BY expression ( COMMA expression )* -> ^( TOK_CLUSTERBY ( expression )+ ) )
			// Hive.g:1777:5: KW_CLUSTER KW_BY expression ( COMMA expression )*
			{
			KW_CLUSTER802=(Token)match(input,KW_CLUSTER,FOLLOW_KW_CLUSTER_in_clusterByClause12861);  
			stream_KW_CLUSTER.add(KW_CLUSTER802);

			KW_BY803=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_clusterByClause12863);  
			stream_KW_BY.add(KW_BY803);

			pushFollow(FOLLOW_expression_in_clusterByClause12869);
			expression804=expression();
			state._fsp--;

			stream_expression.add(expression804.getTree());
			// Hive.g:1779:5: ( COMMA expression )*
			loop241:
			while (true) {
				int alt241=2;
				int LA241_0 = input.LA(1);
				if ( (LA241_0==COMMA) ) {
					alt241=1;
				}

				switch (alt241) {
				case 1 :
					// Hive.g:1779:7: COMMA expression
					{
					COMMA805=(Token)match(input,COMMA,FOLLOW_COMMA_in_clusterByClause12877);  
					stream_COMMA.add(COMMA805);

					pushFollow(FOLLOW_expression_in_clusterByClause12879);
					expression806=expression();
					state._fsp--;

					stream_expression.add(expression806.getTree());
					}
					break;

				default :
					break loop241;
				}
			}

			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1779:27: -> ^( TOK_CLUSTERBY ( expression )+ )
			{
				// Hive.g:1779:30: ^( TOK_CLUSTERBY ( expression )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CLUSTERBY, "TOK_CLUSTERBY"), root_1);
				if ( !(stream_expression.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.hasNext() ) {
					adaptor.addChild(root_1, stream_expression.nextTree());
				}
				stream_expression.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "clusterByClause"


	public static class distributeByClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "distributeByClause"
	// Hive.g:1782:1: distributeByClause : KW_DISTRIBUTE KW_BY expression ( COMMA expression )* -> ^( TOK_DISTRIBUTEBY ( expression )+ ) ;
	public final HiveParser.distributeByClause_return distributeByClause() throws RecognitionException {
		HiveParser.distributeByClause_return retval = new HiveParser.distributeByClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DISTRIBUTE807=null;
		Token KW_BY808=null;
		Token COMMA810=null;
		ParserRuleReturnScope expression809 =null;
		ParserRuleReturnScope expression811 =null;

		CommonTree KW_DISTRIBUTE807_tree=null;
		CommonTree KW_BY808_tree=null;
		CommonTree COMMA810_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_DISTRIBUTE=new RewriteRuleTokenStream(adaptor,"token KW_DISTRIBUTE");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		 msgs.push("distribute by clause"); 
		try {
			// Hive.g:1785:5: ( KW_DISTRIBUTE KW_BY expression ( COMMA expression )* -> ^( TOK_DISTRIBUTEBY ( expression )+ ) )
			// Hive.g:1786:5: KW_DISTRIBUTE KW_BY expression ( COMMA expression )*
			{
			KW_DISTRIBUTE807=(Token)match(input,KW_DISTRIBUTE,FOLLOW_KW_DISTRIBUTE_in_distributeByClause12922);  
			stream_KW_DISTRIBUTE.add(KW_DISTRIBUTE807);

			KW_BY808=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_distributeByClause12924);  
			stream_KW_BY.add(KW_BY808);

			pushFollow(FOLLOW_expression_in_distributeByClause12930);
			expression809=expression();
			state._fsp--;

			stream_expression.add(expression809.getTree());
			// Hive.g:1787:16: ( COMMA expression )*
			loop242:
			while (true) {
				int alt242=2;
				int LA242_0 = input.LA(1);
				if ( (LA242_0==COMMA) ) {
					alt242=1;
				}

				switch (alt242) {
				case 1 :
					// Hive.g:1787:17: COMMA expression
					{
					COMMA810=(Token)match(input,COMMA,FOLLOW_COMMA_in_distributeByClause12933);  
					stream_COMMA.add(COMMA810);

					pushFollow(FOLLOW_expression_in_distributeByClause12935);
					expression811=expression();
					state._fsp--;

					stream_expression.add(expression811.getTree());
					}
					break;

				default :
					break loop242;
				}
			}

			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1787:36: -> ^( TOK_DISTRIBUTEBY ( expression )+ )
			{
				// Hive.g:1787:39: ^( TOK_DISTRIBUTEBY ( expression )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DISTRIBUTEBY, "TOK_DISTRIBUTEBY"), root_1);
				if ( !(stream_expression.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.hasNext() ) {
					adaptor.addChild(root_1, stream_expression.nextTree());
				}
				stream_expression.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "distributeByClause"


	public static class sortByClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "sortByClause"
	// Hive.g:1790:1: sortByClause : KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_SORTBY ( columnRefOrder )+ ) ;
	public final HiveParser.sortByClause_return sortByClause() throws RecognitionException {
		HiveParser.sortByClause_return retval = new HiveParser.sortByClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SORT812=null;
		Token KW_BY813=null;
		Token COMMA815=null;
		ParserRuleReturnScope columnRefOrder814 =null;
		ParserRuleReturnScope columnRefOrder816 =null;

		CommonTree KW_SORT812_tree=null;
		CommonTree KW_BY813_tree=null;
		CommonTree COMMA815_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_SORT=new RewriteRuleTokenStream(adaptor,"token KW_SORT");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleSubtreeStream stream_columnRefOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnRefOrder");

		 msgs.push("sort by clause"); 
		try {
			// Hive.g:1793:5: ( KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_SORTBY ( columnRefOrder )+ ) )
			// Hive.g:1794:5: KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )*
			{
			KW_SORT812=(Token)match(input,KW_SORT,FOLLOW_KW_SORT_in_sortByClause12977);  
			stream_KW_SORT.add(KW_SORT812);

			KW_BY813=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_sortByClause12979);  
			stream_KW_BY.add(KW_BY813);

			pushFollow(FOLLOW_columnRefOrder_in_sortByClause12985);
			columnRefOrder814=columnRefOrder();
			state._fsp--;

			stream_columnRefOrder.add(columnRefOrder814.getTree());
			// Hive.g:1796:5: ( COMMA columnRefOrder )*
			loop243:
			while (true) {
				int alt243=2;
				int LA243_0 = input.LA(1);
				if ( (LA243_0==COMMA) ) {
					alt243=1;
				}

				switch (alt243) {
				case 1 :
					// Hive.g:1796:7: COMMA columnRefOrder
					{
					COMMA815=(Token)match(input,COMMA,FOLLOW_COMMA_in_sortByClause12993);  
					stream_COMMA.add(COMMA815);

					pushFollow(FOLLOW_columnRefOrder_in_sortByClause12995);
					columnRefOrder816=columnRefOrder();
					state._fsp--;

					stream_columnRefOrder.add(columnRefOrder816.getTree());
					}
					break;

				default :
					break loop243;
				}
			}

			// AST REWRITE
			// elements: columnRefOrder
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1796:30: -> ^( TOK_SORTBY ( columnRefOrder )+ )
			{
				// Hive.g:1796:33: ^( TOK_SORTBY ( columnRefOrder )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SORTBY, "TOK_SORTBY"), root_1);
				if ( !(stream_columnRefOrder.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnRefOrder.hasNext() ) {
					adaptor.addChild(root_1, stream_columnRefOrder.nextTree());
				}
				stream_columnRefOrder.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sortByClause"


	public static class function_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "function"
	// Hive.g:1800:1: function : functionName LPAREN ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? ) RPAREN -> {$star != null}? ^( TOK_FUNCTIONSTAR functionName ) -> {$dist == null}? ^( TOK_FUNCTION functionName ( ( expression )+ )? ) -> ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? ) ;
	public final HiveParser.function_return function() throws RecognitionException {
		HiveParser.function_return retval = new HiveParser.function_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token star=null;
		Token dist=null;
		Token LPAREN818=null;
		Token COMMA820=null;
		Token RPAREN822=null;
		ParserRuleReturnScope functionName817 =null;
		ParserRuleReturnScope expression819 =null;
		ParserRuleReturnScope expression821 =null;

		CommonTree star_tree=null;
		CommonTree dist_tree=null;
		CommonTree LPAREN818_tree=null;
		CommonTree COMMA820_tree=null;
		CommonTree RPAREN822_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_DISTINCT=new RewriteRuleTokenStream(adaptor,"token KW_DISTINCT");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_functionName=new RewriteRuleSubtreeStream(adaptor,"rule functionName");

		 msgs.push("function specification"); 
		try {
			// Hive.g:1803:5: ( functionName LPAREN ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? ) RPAREN -> {$star != null}? ^( TOK_FUNCTIONSTAR functionName ) -> {$dist == null}? ^( TOK_FUNCTION functionName ( ( expression )+ )? ) -> ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? ) )
			// Hive.g:1804:5: functionName LPAREN ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? ) RPAREN
			{
			pushFollow(FOLLOW_functionName_in_function13038);
			functionName817=functionName();
			state._fsp--;

			stream_functionName.add(functionName817.getTree());
			LPAREN818=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function13044);  
			stream_LPAREN.add(LPAREN818);

			// Hive.g:1806:7: ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? )
			int alt247=2;
			int LA247_0 = input.LA(1);
			if ( (LA247_0==STAR) ) {
				alt247=1;
			}
			else if ( (LA247_0==BigintLiteral||LA247_0==CharSetName||LA247_0==Identifier||LA247_0==KW_ARRAY||(LA247_0 >= KW_CASE && LA247_0 <= KW_CAST)||LA247_0==KW_DISTINCT||LA247_0==KW_FALSE||LA247_0==KW_IF||LA247_0==KW_MAP||LA247_0==KW_NOT||LA247_0==KW_NULL||LA247_0==KW_STRUCT||LA247_0==KW_TRUE||LA247_0==KW_UNIONTYPE||LA247_0==LPAREN||LA247_0==MINUS||(LA247_0 >= Number && LA247_0 <= PLUS)||LA247_0==RPAREN||(LA247_0 >= SmallintLiteral && LA247_0 <= TILDE)||LA247_0==TinyintLiteral) ) {
				alt247=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 247, 0, input);
				throw nvae;
			}

			switch (alt247) {
				case 1 :
					// Hive.g:1807:9: (star= STAR )
					{
					// Hive.g:1807:9: (star= STAR )
					// Hive.g:1807:10: star= STAR
					{
					star=(Token)match(input,STAR,FOLLOW_STAR_in_function13065);  
					stream_STAR.add(star);

					}

					}
					break;
				case 2 :
					// Hive.g:1808:11: (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )?
					{
					// Hive.g:1808:11: (dist= KW_DISTINCT )?
					int alt244=2;
					int LA244_0 = input.LA(1);
					if ( (LA244_0==KW_DISTINCT) ) {
						alt244=1;
					}
					switch (alt244) {
						case 1 :
							// Hive.g:1808:12: dist= KW_DISTINCT
							{
							dist=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_function13081);  
							stream_KW_DISTINCT.add(dist);

							}
							break;

					}

					// Hive.g:1808:31: ( expression ( COMMA expression )* )?
					int alt246=2;
					int LA246_0 = input.LA(1);
					if ( (LA246_0==BigintLiteral||LA246_0==CharSetName||LA246_0==Identifier||LA246_0==KW_ARRAY||(LA246_0 >= KW_CASE && LA246_0 <= KW_CAST)||LA246_0==KW_FALSE||LA246_0==KW_IF||LA246_0==KW_MAP||LA246_0==KW_NOT||LA246_0==KW_NULL||LA246_0==KW_STRUCT||LA246_0==KW_TRUE||LA246_0==KW_UNIONTYPE||LA246_0==LPAREN||LA246_0==MINUS||(LA246_0 >= Number && LA246_0 <= PLUS)||(LA246_0 >= SmallintLiteral && LA246_0 <= TILDE)||LA246_0==TinyintLiteral) ) {
						alt246=1;
					}
					switch (alt246) {
						case 1 :
							// Hive.g:1808:32: expression ( COMMA expression )*
							{
							pushFollow(FOLLOW_expression_in_function13086);
							expression819=expression();
							state._fsp--;

							stream_expression.add(expression819.getTree());
							// Hive.g:1808:43: ( COMMA expression )*
							loop245:
							while (true) {
								int alt245=2;
								int LA245_0 = input.LA(1);
								if ( (LA245_0==COMMA) ) {
									alt245=1;
								}

								switch (alt245) {
								case 1 :
									// Hive.g:1808:44: COMMA expression
									{
									COMMA820=(Token)match(input,COMMA,FOLLOW_COMMA_in_function13089);  
									stream_COMMA.add(COMMA820);

									pushFollow(FOLLOW_expression_in_function13091);
									expression821=expression();
									state._fsp--;

									stream_expression.add(expression821.getTree());
									}
									break;

								default :
									break loop245;
								}
							}

							}
							break;

					}

					}
					break;

			}

			RPAREN822=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function13109);  
			stream_RPAREN.add(RPAREN822);

			// AST REWRITE
			// elements: functionName, expression, functionName, expression, functionName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1810:12: -> {$star != null}? ^( TOK_FUNCTIONSTAR functionName )
			if (star != null) {
				// Hive.g:1810:32: ^( TOK_FUNCTIONSTAR functionName )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FUNCTIONSTAR, "TOK_FUNCTIONSTAR"), root_1);
				adaptor.addChild(root_1, stream_functionName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1811:12: -> {$dist == null}? ^( TOK_FUNCTION functionName ( ( expression )+ )? )
			if (dist == null) {
				// Hive.g:1811:32: ^( TOK_FUNCTION functionName ( ( expression )+ )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionName.nextTree());
				// Hive.g:1811:60: ( ( expression )+ )?
				if ( stream_expression.hasNext() ) {
					if ( !(stream_expression.hasNext()) ) {
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.hasNext() ) {
						adaptor.addChild(root_1, stream_expression.nextTree());
					}
					stream_expression.reset();

				}
				stream_expression.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1812:29: -> ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? )
			{
				// Hive.g:1812:32: ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FUNCTIONDI, "TOK_FUNCTIONDI"), root_1);
				adaptor.addChild(root_1, stream_functionName.nextTree());
				// Hive.g:1812:62: ( ( expression )+ )?
				if ( stream_expression.hasNext() ) {
					if ( !(stream_expression.hasNext()) ) {
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.hasNext() ) {
						adaptor.addChild(root_1, stream_expression.nextTree());
					}
					stream_expression.reset();

				}
				stream_expression.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function"


	public static class functionName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "functionName"
	// Hive.g:1815:1: functionName : ( Identifier | KW_IF | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE );
	public final HiveParser.functionName_return functionName() throws RecognitionException {
		HiveParser.functionName_return retval = new HiveParser.functionName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set823=null;

		CommonTree set823_tree=null;

		 msgs.push("function name"); 
		try {
			// Hive.g:1818:5: ( Identifier | KW_IF | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE )
			// Hive.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set823=input.LT(1);
			if ( input.LA(1)==Identifier||input.LA(1)==KW_ARRAY||input.LA(1)==KW_IF||input.LA(1)==KW_MAP||input.LA(1)==KW_STRUCT||input.LA(1)==KW_UNIONTYPE ) {
				input.consume();
				adaptor.addChild(root_0, (CommonTree)adaptor.create(set823));
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "functionName"


	public static class castExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "castExpression"
	// Hive.g:1822:1: castExpression : KW_CAST LPAREN expression KW_AS primitiveType RPAREN -> ^( TOK_FUNCTION primitiveType expression ) ;
	public final HiveParser.castExpression_return castExpression() throws RecognitionException {
		HiveParser.castExpression_return retval = new HiveParser.castExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CAST824=null;
		Token LPAREN825=null;
		Token KW_AS827=null;
		Token RPAREN829=null;
		ParserRuleReturnScope expression826 =null;
		ParserRuleReturnScope primitiveType828 =null;

		CommonTree KW_CAST824_tree=null;
		CommonTree LPAREN825_tree=null;
		CommonTree KW_AS827_tree=null;
		CommonTree RPAREN829_tree=null;
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_CAST=new RewriteRuleTokenStream(adaptor,"token KW_CAST");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");

		 msgs.push("cast expression"); 
		try {
			// Hive.g:1825:5: ( KW_CAST LPAREN expression KW_AS primitiveType RPAREN -> ^( TOK_FUNCTION primitiveType expression ) )
			// Hive.g:1826:5: KW_CAST LPAREN expression KW_AS primitiveType RPAREN
			{
			KW_CAST824=(Token)match(input,KW_CAST,FOLLOW_KW_CAST_in_castExpression13271);  
			stream_KW_CAST.add(KW_CAST824);

			LPAREN825=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_castExpression13277);  
			stream_LPAREN.add(LPAREN825);

			pushFollow(FOLLOW_expression_in_castExpression13289);
			expression826=expression();
			state._fsp--;

			stream_expression.add(expression826.getTree());
			KW_AS827=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_castExpression13301);  
			stream_KW_AS.add(KW_AS827);

			pushFollow(FOLLOW_primitiveType_in_castExpression13313);
			primitiveType828=primitiveType();
			state._fsp--;

			stream_primitiveType.add(primitiveType828.getTree());
			RPAREN829=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_castExpression13319);  
			stream_RPAREN.add(RPAREN829);

			// AST REWRITE
			// elements: expression, primitiveType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1831:12: -> ^( TOK_FUNCTION primitiveType expression )
			{
				// Hive.g:1831:15: ^( TOK_FUNCTION primitiveType expression )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);
				adaptor.addChild(root_1, stream_primitiveType.nextTree());
				adaptor.addChild(root_1, stream_expression.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "castExpression"


	public static class caseExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "caseExpression"
	// Hive.g:1834:1: caseExpression : KW_CASE expression ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_CASE ( expression )* ) ;
	public final HiveParser.caseExpression_return caseExpression() throws RecognitionException {
		HiveParser.caseExpression_return retval = new HiveParser.caseExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CASE830=null;
		Token KW_WHEN832=null;
		Token KW_THEN834=null;
		Token KW_ELSE836=null;
		Token KW_END838=null;
		ParserRuleReturnScope expression831 =null;
		ParserRuleReturnScope expression833 =null;
		ParserRuleReturnScope expression835 =null;
		ParserRuleReturnScope expression837 =null;

		CommonTree KW_CASE830_tree=null;
		CommonTree KW_WHEN832_tree=null;
		CommonTree KW_THEN834_tree=null;
		CommonTree KW_ELSE836_tree=null;
		CommonTree KW_END838_tree=null;
		RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
		RewriteRuleTokenStream stream_KW_CASE=new RewriteRuleTokenStream(adaptor,"token KW_CASE");
		RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
		RewriteRuleTokenStream stream_KW_END=new RewriteRuleTokenStream(adaptor,"token KW_END");
		RewriteRuleTokenStream stream_KW_ELSE=new RewriteRuleTokenStream(adaptor,"token KW_ELSE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		 msgs.push("case expression"); 
		try {
			// Hive.g:1837:5: ( KW_CASE expression ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_CASE ( expression )* ) )
			// Hive.g:1838:5: KW_CASE expression ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END
			{
			KW_CASE830=(Token)match(input,KW_CASE,FOLLOW_KW_CASE_in_caseExpression13360);  
			stream_KW_CASE.add(KW_CASE830);

			pushFollow(FOLLOW_expression_in_caseExpression13362);
			expression831=expression();
			state._fsp--;

			stream_expression.add(expression831.getTree());
			// Hive.g:1839:5: ( KW_WHEN expression KW_THEN expression )+
			int cnt248=0;
			loop248:
			while (true) {
				int alt248=2;
				int LA248_0 = input.LA(1);
				if ( (LA248_0==KW_WHEN) ) {
					alt248=1;
				}

				switch (alt248) {
				case 1 :
					// Hive.g:1839:6: KW_WHEN expression KW_THEN expression
					{
					KW_WHEN832=(Token)match(input,KW_WHEN,FOLLOW_KW_WHEN_in_caseExpression13369);  
					stream_KW_WHEN.add(KW_WHEN832);

					pushFollow(FOLLOW_expression_in_caseExpression13371);
					expression833=expression();
					state._fsp--;

					stream_expression.add(expression833.getTree());
					KW_THEN834=(Token)match(input,KW_THEN,FOLLOW_KW_THEN_in_caseExpression13373);  
					stream_KW_THEN.add(KW_THEN834);

					pushFollow(FOLLOW_expression_in_caseExpression13375);
					expression835=expression();
					state._fsp--;

					stream_expression.add(expression835.getTree());
					}
					break;

				default :
					if ( cnt248 >= 1 ) break loop248;
					EarlyExitException eee = new EarlyExitException(248, input);
					throw eee;
				}
				cnt248++;
			}

			// Hive.g:1840:5: ( KW_ELSE expression )?
			int alt249=2;
			int LA249_0 = input.LA(1);
			if ( (LA249_0==KW_ELSE) ) {
				alt249=1;
			}
			switch (alt249) {
				case 1 :
					// Hive.g:1840:6: KW_ELSE expression
					{
					KW_ELSE836=(Token)match(input,KW_ELSE,FOLLOW_KW_ELSE_in_caseExpression13384);  
					stream_KW_ELSE.add(KW_ELSE836);

					pushFollow(FOLLOW_expression_in_caseExpression13386);
					expression837=expression();
					state._fsp--;

					stream_expression.add(expression837.getTree());
					}
					break;

			}

			KW_END838=(Token)match(input,KW_END,FOLLOW_KW_END_in_caseExpression13394);  
			stream_KW_END.add(KW_END838);

			// AST REWRITE
			// elements: expression, KW_CASE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1841:12: -> ^( TOK_FUNCTION KW_CASE ( expression )* )
			{
				// Hive.g:1841:15: ^( TOK_FUNCTION KW_CASE ( expression )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);
				adaptor.addChild(root_1, stream_KW_CASE.nextNode());
				// Hive.g:1841:38: ( expression )*
				while ( stream_expression.hasNext() ) {
					adaptor.addChild(root_1, stream_expression.nextTree());
				}
				stream_expression.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "caseExpression"


	public static class whenExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "whenExpression"
	// Hive.g:1844:1: whenExpression : KW_CASE ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_WHEN ( expression )* ) ;
	public final HiveParser.whenExpression_return whenExpression() throws RecognitionException {
		HiveParser.whenExpression_return retval = new HiveParser.whenExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CASE839=null;
		Token KW_WHEN840=null;
		Token KW_THEN842=null;
		Token KW_ELSE844=null;
		Token KW_END846=null;
		ParserRuleReturnScope expression841 =null;
		ParserRuleReturnScope expression843 =null;
		ParserRuleReturnScope expression845 =null;

		CommonTree KW_CASE839_tree=null;
		CommonTree KW_WHEN840_tree=null;
		CommonTree KW_THEN842_tree=null;
		CommonTree KW_ELSE844_tree=null;
		CommonTree KW_END846_tree=null;
		RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
		RewriteRuleTokenStream stream_KW_CASE=new RewriteRuleTokenStream(adaptor,"token KW_CASE");
		RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
		RewriteRuleTokenStream stream_KW_END=new RewriteRuleTokenStream(adaptor,"token KW_END");
		RewriteRuleTokenStream stream_KW_ELSE=new RewriteRuleTokenStream(adaptor,"token KW_ELSE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		 msgs.push("case expression"); 
		try {
			// Hive.g:1847:5: ( KW_CASE ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_WHEN ( expression )* ) )
			// Hive.g:1848:5: KW_CASE ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END
			{
			KW_CASE839=(Token)match(input,KW_CASE,FOLLOW_KW_CASE_in_whenExpression13436);  
			stream_KW_CASE.add(KW_CASE839);

			// Hive.g:1849:6: ( KW_WHEN expression KW_THEN expression )+
			int cnt250=0;
			loop250:
			while (true) {
				int alt250=2;
				int LA250_0 = input.LA(1);
				if ( (LA250_0==KW_WHEN) ) {
					alt250=1;
				}

				switch (alt250) {
				case 1 :
					// Hive.g:1849:8: KW_WHEN expression KW_THEN expression
					{
					KW_WHEN840=(Token)match(input,KW_WHEN,FOLLOW_KW_WHEN_in_whenExpression13445);  
					stream_KW_WHEN.add(KW_WHEN840);

					pushFollow(FOLLOW_expression_in_whenExpression13447);
					expression841=expression();
					state._fsp--;

					stream_expression.add(expression841.getTree());
					KW_THEN842=(Token)match(input,KW_THEN,FOLLOW_KW_THEN_in_whenExpression13449);  
					stream_KW_THEN.add(KW_THEN842);

					pushFollow(FOLLOW_expression_in_whenExpression13451);
					expression843=expression();
					state._fsp--;

					stream_expression.add(expression843.getTree());
					}
					break;

				default :
					if ( cnt250 >= 1 ) break loop250;
					EarlyExitException eee = new EarlyExitException(250, input);
					throw eee;
				}
				cnt250++;
			}

			// Hive.g:1850:5: ( KW_ELSE expression )?
			int alt251=2;
			int LA251_0 = input.LA(1);
			if ( (LA251_0==KW_ELSE) ) {
				alt251=1;
			}
			switch (alt251) {
				case 1 :
					// Hive.g:1850:6: KW_ELSE expression
					{
					KW_ELSE844=(Token)match(input,KW_ELSE,FOLLOW_KW_ELSE_in_whenExpression13460);  
					stream_KW_ELSE.add(KW_ELSE844);

					pushFollow(FOLLOW_expression_in_whenExpression13462);
					expression845=expression();
					state._fsp--;

					stream_expression.add(expression845.getTree());
					}
					break;

			}

			KW_END846=(Token)match(input,KW_END,FOLLOW_KW_END_in_whenExpression13470);  
			stream_KW_END.add(KW_END846);

			// AST REWRITE
			// elements: KW_WHEN, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1851:12: -> ^( TOK_FUNCTION KW_WHEN ( expression )* )
			{
				// Hive.g:1851:15: ^( TOK_FUNCTION KW_WHEN ( expression )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);
				adaptor.addChild(root_1, stream_KW_WHEN.nextNode());
				// Hive.g:1851:38: ( expression )*
				while ( stream_expression.hasNext() ) {
					adaptor.addChild(root_1, stream_expression.nextTree());
				}
				stream_expression.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "whenExpression"


	public static class constant_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "constant"
	// Hive.g:1854:1: constant : ( Number | StringLiteral | stringLiteralSequence | BigintLiteral | SmallintLiteral | TinyintLiteral | charSetStringLiteral | booleanValue );
	public final HiveParser.constant_return constant() throws RecognitionException {
		HiveParser.constant_return retval = new HiveParser.constant_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Number847=null;
		Token StringLiteral848=null;
		Token BigintLiteral850=null;
		Token SmallintLiteral851=null;
		Token TinyintLiteral852=null;
		ParserRuleReturnScope stringLiteralSequence849 =null;
		ParserRuleReturnScope charSetStringLiteral853 =null;
		ParserRuleReturnScope booleanValue854 =null;

		CommonTree Number847_tree=null;
		CommonTree StringLiteral848_tree=null;
		CommonTree BigintLiteral850_tree=null;
		CommonTree SmallintLiteral851_tree=null;
		CommonTree TinyintLiteral852_tree=null;

		 msgs.push("constant"); 
		try {
			// Hive.g:1857:5: ( Number | StringLiteral | stringLiteralSequence | BigintLiteral | SmallintLiteral | TinyintLiteral | charSetStringLiteral | booleanValue )
			int alt252=8;
			alt252 = dfa252.predict(input);
			switch (alt252) {
				case 1 :
					// Hive.g:1858:5: Number
					{
					root_0 = (CommonTree)adaptor.nil();


					Number847=(Token)match(input,Number,FOLLOW_Number_in_constant13512); 
					Number847_tree = (CommonTree)adaptor.create(Number847);
					adaptor.addChild(root_0, Number847_tree);

					}
					break;
				case 2 :
					// Hive.g:1859:7: StringLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					StringLiteral848=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_constant13520); 
					StringLiteral848_tree = (CommonTree)adaptor.create(StringLiteral848);
					adaptor.addChild(root_0, StringLiteral848_tree);

					}
					break;
				case 3 :
					// Hive.g:1860:7: stringLiteralSequence
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_stringLiteralSequence_in_constant13528);
					stringLiteralSequence849=stringLiteralSequence();
					state._fsp--;

					adaptor.addChild(root_0, stringLiteralSequence849.getTree());

					}
					break;
				case 4 :
					// Hive.g:1861:7: BigintLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					BigintLiteral850=(Token)match(input,BigintLiteral,FOLLOW_BigintLiteral_in_constant13536); 
					BigintLiteral850_tree = (CommonTree)adaptor.create(BigintLiteral850);
					adaptor.addChild(root_0, BigintLiteral850_tree);

					}
					break;
				case 5 :
					// Hive.g:1862:7: SmallintLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					SmallintLiteral851=(Token)match(input,SmallintLiteral,FOLLOW_SmallintLiteral_in_constant13544); 
					SmallintLiteral851_tree = (CommonTree)adaptor.create(SmallintLiteral851);
					adaptor.addChild(root_0, SmallintLiteral851_tree);

					}
					break;
				case 6 :
					// Hive.g:1863:7: TinyintLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					TinyintLiteral852=(Token)match(input,TinyintLiteral,FOLLOW_TinyintLiteral_in_constant13552); 
					TinyintLiteral852_tree = (CommonTree)adaptor.create(TinyintLiteral852);
					adaptor.addChild(root_0, TinyintLiteral852_tree);

					}
					break;
				case 7 :
					// Hive.g:1864:7: charSetStringLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_charSetStringLiteral_in_constant13560);
					charSetStringLiteral853=charSetStringLiteral();
					state._fsp--;

					adaptor.addChild(root_0, charSetStringLiteral853.getTree());

					}
					break;
				case 8 :
					// Hive.g:1865:7: booleanValue
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_booleanValue_in_constant13568);
					booleanValue854=booleanValue();
					state._fsp--;

					adaptor.addChild(root_0, booleanValue854.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constant"


	public static class stringLiteralSequence_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "stringLiteralSequence"
	// Hive.g:1868:1: stringLiteralSequence : StringLiteral ( StringLiteral )+ -> ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ ) ;
	public final HiveParser.stringLiteralSequence_return stringLiteralSequence() throws RecognitionException {
		HiveParser.stringLiteralSequence_return retval = new HiveParser.stringLiteralSequence_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token StringLiteral855=null;
		Token StringLiteral856=null;

		CommonTree StringLiteral855_tree=null;
		CommonTree StringLiteral856_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

		try {
			// Hive.g:1869:5: ( StringLiteral ( StringLiteral )+ -> ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ ) )
			// Hive.g:1870:5: StringLiteral ( StringLiteral )+
			{
			StringLiteral855=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_stringLiteralSequence13589);  
			stream_StringLiteral.add(StringLiteral855);

			// Hive.g:1870:19: ( StringLiteral )+
			int cnt253=0;
			loop253:
			while (true) {
				int alt253=2;
				int LA253_0 = input.LA(1);
				if ( (LA253_0==StringLiteral) ) {
					alt253=1;
				}

				switch (alt253) {
				case 1 :
					// Hive.g:1870:19: StringLiteral
					{
					StringLiteral856=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_stringLiteralSequence13591);  
					stream_StringLiteral.add(StringLiteral856);

					}
					break;

				default :
					if ( cnt253 >= 1 ) break loop253;
					EarlyExitException eee = new EarlyExitException(253, input);
					throw eee;
				}
				cnt253++;
			}

			// AST REWRITE
			// elements: StringLiteral, StringLiteral
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1870:34: -> ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ )
			{
				// Hive.g:1870:37: ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_STRINGLITERALSEQUENCE, "TOK_STRINGLITERALSEQUENCE"), root_1);
				adaptor.addChild(root_1, stream_StringLiteral.nextNode());
				if ( !(stream_StringLiteral.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_StringLiteral.hasNext() ) {
					adaptor.addChild(root_1, stream_StringLiteral.nextNode());
				}
				stream_StringLiteral.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "stringLiteralSequence"


	public static class charSetStringLiteral_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "charSetStringLiteral"
	// Hive.g:1873:1: charSetStringLiteral : csName= CharSetName csLiteral= CharSetLiteral -> ^( TOK_CHARSETLITERAL $csName $csLiteral) ;
	public final HiveParser.charSetStringLiteral_return charSetStringLiteral() throws RecognitionException {
		HiveParser.charSetStringLiteral_return retval = new HiveParser.charSetStringLiteral_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token csName=null;
		Token csLiteral=null;

		CommonTree csName_tree=null;
		CommonTree csLiteral_tree=null;
		RewriteRuleTokenStream stream_CharSetLiteral=new RewriteRuleTokenStream(adaptor,"token CharSetLiteral");
		RewriteRuleTokenStream stream_CharSetName=new RewriteRuleTokenStream(adaptor,"token CharSetName");

		 msgs.push("character string literal"); 
		try {
			// Hive.g:1876:5: (csName= CharSetName csLiteral= CharSetLiteral -> ^( TOK_CHARSETLITERAL $csName $csLiteral) )
			// Hive.g:1877:5: csName= CharSetName csLiteral= CharSetLiteral
			{
			csName=(Token)match(input,CharSetName,FOLLOW_CharSetName_in_charSetStringLiteral13636);  
			stream_CharSetName.add(csName);

			csLiteral=(Token)match(input,CharSetLiteral,FOLLOW_CharSetLiteral_in_charSetStringLiteral13640);  
			stream_CharSetLiteral.add(csLiteral);

			// AST REWRITE
			// elements: csName, csLiteral
			// token labels: csName, csLiteral
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_csName=new RewriteRuleTokenStream(adaptor,"token csName",csName);
			RewriteRuleTokenStream stream_csLiteral=new RewriteRuleTokenStream(adaptor,"token csLiteral",csLiteral);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1877:49: -> ^( TOK_CHARSETLITERAL $csName $csLiteral)
			{
				// Hive.g:1877:52: ^( TOK_CHARSETLITERAL $csName $csLiteral)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CHARSETLITERAL, "TOK_CHARSETLITERAL"), root_1);
				adaptor.addChild(root_1, stream_csName.nextNode());
				adaptor.addChild(root_1, stream_csLiteral.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "charSetStringLiteral"


	public static class expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "expression"
	// Hive.g:1880:1: expression : precedenceOrExpression ;
	public final HiveParser.expression_return expression() throws RecognitionException {
		HiveParser.expression_return retval = new HiveParser.expression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope precedenceOrExpression857 =null;


		 msgs.push("expression specification"); 
		try {
			// Hive.g:1883:5: ( precedenceOrExpression )
			// Hive.g:1884:5: precedenceOrExpression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_precedenceOrExpression_in_expression13683);
			precedenceOrExpression857=precedenceOrExpression();
			state._fsp--;

			adaptor.addChild(root_0, precedenceOrExpression857.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class atomExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "atomExpression"
	// Hive.g:1887:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN ! expression RPAREN !);
	public final HiveParser.atomExpression_return atomExpression() throws RecognitionException {
		HiveParser.atomExpression_return retval = new HiveParser.atomExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_NULL858=null;
		Token LPAREN865=null;
		Token RPAREN867=null;
		ParserRuleReturnScope constant859 =null;
		ParserRuleReturnScope function860 =null;
		ParserRuleReturnScope castExpression861 =null;
		ParserRuleReturnScope caseExpression862 =null;
		ParserRuleReturnScope whenExpression863 =null;
		ParserRuleReturnScope tableOrColumn864 =null;
		ParserRuleReturnScope expression866 =null;

		CommonTree KW_NULL858_tree=null;
		CommonTree LPAREN865_tree=null;
		CommonTree RPAREN867_tree=null;
		RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");

		try {
			// Hive.g:1888:5: ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN ! expression RPAREN !)
			int alt254=8;
			alt254 = dfa254.predict(input);
			switch (alt254) {
				case 1 :
					// Hive.g:1889:5: KW_NULL
					{
					KW_NULL858=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_atomExpression13704);  
					stream_KW_NULL.add(KW_NULL858);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1889:13: -> TOK_NULL
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_NULL, "TOK_NULL"));
					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1890:7: constant
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_constant_in_atomExpression13716);
					constant859=constant();
					state._fsp--;

					adaptor.addChild(root_0, constant859.getTree());

					}
					break;
				case 3 :
					// Hive.g:1891:7: function
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_function_in_atomExpression13724);
					function860=function();
					state._fsp--;

					adaptor.addChild(root_0, function860.getTree());

					}
					break;
				case 4 :
					// Hive.g:1892:7: castExpression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_castExpression_in_atomExpression13732);
					castExpression861=castExpression();
					state._fsp--;

					adaptor.addChild(root_0, castExpression861.getTree());

					}
					break;
				case 5 :
					// Hive.g:1893:7: caseExpression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_caseExpression_in_atomExpression13740);
					caseExpression862=caseExpression();
					state._fsp--;

					adaptor.addChild(root_0, caseExpression862.getTree());

					}
					break;
				case 6 :
					// Hive.g:1894:7: whenExpression
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_whenExpression_in_atomExpression13748);
					whenExpression863=whenExpression();
					state._fsp--;

					adaptor.addChild(root_0, whenExpression863.getTree());

					}
					break;
				case 7 :
					// Hive.g:1895:7: tableOrColumn
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_tableOrColumn_in_atomExpression13756);
					tableOrColumn864=tableOrColumn();
					state._fsp--;

					adaptor.addChild(root_0, tableOrColumn864.getTree());

					}
					break;
				case 8 :
					// Hive.g:1896:7: LPAREN ! expression RPAREN !
					{
					root_0 = (CommonTree)adaptor.nil();


					LPAREN865=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_atomExpression13764); 
					pushFollow(FOLLOW_expression_in_atomExpression13767);
					expression866=expression();
					state._fsp--;

					adaptor.addChild(root_0, expression866.getTree());

					RPAREN867=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_atomExpression13769); 
					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "atomExpression"


	public static class precedenceFieldExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceFieldExpression"
	// Hive.g:1900:1: precedenceFieldExpression : atomExpression ( ( LSQUARE ^ expression RSQUARE !) | ( DOT ^ Identifier ) )* ;
	public final HiveParser.precedenceFieldExpression_return precedenceFieldExpression() throws RecognitionException {
		HiveParser.precedenceFieldExpression_return retval = new HiveParser.precedenceFieldExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LSQUARE869=null;
		Token RSQUARE871=null;
		Token DOT872=null;
		Token Identifier873=null;
		ParserRuleReturnScope atomExpression868 =null;
		ParserRuleReturnScope expression870 =null;

		CommonTree LSQUARE869_tree=null;
		CommonTree RSQUARE871_tree=null;
		CommonTree DOT872_tree=null;
		CommonTree Identifier873_tree=null;

		try {
			// Hive.g:1901:5: ( atomExpression ( ( LSQUARE ^ expression RSQUARE !) | ( DOT ^ Identifier ) )* )
			// Hive.g:1902:5: atomExpression ( ( LSQUARE ^ expression RSQUARE !) | ( DOT ^ Identifier ) )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_atomExpression_in_precedenceFieldExpression13792);
			atomExpression868=atomExpression();
			state._fsp--;

			adaptor.addChild(root_0, atomExpression868.getTree());

			// Hive.g:1902:20: ( ( LSQUARE ^ expression RSQUARE !) | ( DOT ^ Identifier ) )*
			loop255:
			while (true) {
				int alt255=3;
				int LA255_0 = input.LA(1);
				if ( (LA255_0==LSQUARE) ) {
					alt255=1;
				}
				else if ( (LA255_0==DOT) ) {
					alt255=2;
				}

				switch (alt255) {
				case 1 :
					// Hive.g:1902:21: ( LSQUARE ^ expression RSQUARE !)
					{
					// Hive.g:1902:21: ( LSQUARE ^ expression RSQUARE !)
					// Hive.g:1902:22: LSQUARE ^ expression RSQUARE !
					{
					LSQUARE869=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_precedenceFieldExpression13796); 
					LSQUARE869_tree = (CommonTree)adaptor.create(LSQUARE869);
					root_0 = (CommonTree)adaptor.becomeRoot(LSQUARE869_tree, root_0);

					pushFollow(FOLLOW_expression_in_precedenceFieldExpression13799);
					expression870=expression();
					state._fsp--;

					adaptor.addChild(root_0, expression870.getTree());

					RSQUARE871=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_precedenceFieldExpression13801); 
					}

					}
					break;
				case 2 :
					// Hive.g:1902:54: ( DOT ^ Identifier )
					{
					// Hive.g:1902:54: ( DOT ^ Identifier )
					// Hive.g:1902:55: DOT ^ Identifier
					{
					DOT872=(Token)match(input,DOT,FOLLOW_DOT_in_precedenceFieldExpression13808); 
					DOT872_tree = (CommonTree)adaptor.create(DOT872);
					root_0 = (CommonTree)adaptor.becomeRoot(DOT872_tree, root_0);

					Identifier873=(Token)match(input,Identifier,FOLLOW_Identifier_in_precedenceFieldExpression13811); 
					Identifier873_tree = (CommonTree)adaptor.create(Identifier873);
					adaptor.addChild(root_0, Identifier873_tree);

					}

					}
					break;

				default :
					break loop255;
				}
			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceFieldExpression"


	public static class precedenceUnaryOperator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceUnaryOperator"
	// Hive.g:1905:1: precedenceUnaryOperator : ( PLUS | MINUS | TILDE );
	public final HiveParser.precedenceUnaryOperator_return precedenceUnaryOperator() throws RecognitionException {
		HiveParser.precedenceUnaryOperator_return retval = new HiveParser.precedenceUnaryOperator_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set874=null;

		CommonTree set874_tree=null;

		try {
			// Hive.g:1906:5: ( PLUS | MINUS | TILDE )
			// Hive.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set874=input.LT(1);
			if ( input.LA(1)==MINUS||input.LA(1)==PLUS||input.LA(1)==TILDE ) {
				input.consume();
				adaptor.addChild(root_0, (CommonTree)adaptor.create(set874));
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceUnaryOperator"


	public static class nullCondition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "nullCondition"
	// Hive.g:1910:1: nullCondition : ( KW_NULL -> ^( TOK_ISNULL ) | KW_NOT KW_NULL -> ^( TOK_ISNOTNULL ) );
	public final HiveParser.nullCondition_return nullCondition() throws RecognitionException {
		HiveParser.nullCondition_return retval = new HiveParser.nullCondition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_NULL875=null;
		Token KW_NOT876=null;
		Token KW_NULL877=null;

		CommonTree KW_NULL875_tree=null;
		CommonTree KW_NOT876_tree=null;
		CommonTree KW_NULL877_tree=null;
		RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");

		try {
			// Hive.g:1911:5: ( KW_NULL -> ^( TOK_ISNULL ) | KW_NOT KW_NULL -> ^( TOK_ISNOTNULL ) )
			int alt256=2;
			int LA256_0 = input.LA(1);
			if ( (LA256_0==KW_NULL) ) {
				alt256=1;
			}
			else if ( (LA256_0==KW_NOT) ) {
				alt256=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 256, 0, input);
				throw nvae;
			}

			switch (alt256) {
				case 1 :
					// Hive.g:1912:5: KW_NULL
					{
					KW_NULL875=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_nullCondition13864);  
					stream_KW_NULL.add(KW_NULL875);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1912:13: -> ^( TOK_ISNULL )
					{
						// Hive.g:1912:16: ^( TOK_ISNULL )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ISNULL, "TOK_ISNULL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:1913:7: KW_NOT KW_NULL
					{
					KW_NOT876=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_nullCondition13878);  
					stream_KW_NOT.add(KW_NOT876);

					KW_NULL877=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_nullCondition13880);  
					stream_KW_NULL.add(KW_NULL877);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1913:22: -> ^( TOK_ISNOTNULL )
					{
						// Hive.g:1913:25: ^( TOK_ISNOTNULL )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ISNOTNULL, "TOK_ISNOTNULL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "nullCondition"


	public static class precedenceUnaryPrefixExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceUnaryPrefixExpression"
	// Hive.g:1916:1: precedenceUnaryPrefixExpression : ( precedenceUnaryOperator ^)* precedenceFieldExpression ;
	public final HiveParser.precedenceUnaryPrefixExpression_return precedenceUnaryPrefixExpression() throws RecognitionException {
		HiveParser.precedenceUnaryPrefixExpression_return retval = new HiveParser.precedenceUnaryPrefixExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope precedenceUnaryOperator878 =null;
		ParserRuleReturnScope precedenceFieldExpression879 =null;


		try {
			// Hive.g:1917:5: ( ( precedenceUnaryOperator ^)* precedenceFieldExpression )
			// Hive.g:1918:5: ( precedenceUnaryOperator ^)* precedenceFieldExpression
			{
			root_0 = (CommonTree)adaptor.nil();


			// Hive.g:1918:5: ( precedenceUnaryOperator ^)*
			loop257:
			while (true) {
				int alt257=2;
				int LA257_0 = input.LA(1);
				if ( (LA257_0==MINUS||LA257_0==PLUS||LA257_0==TILDE) ) {
					alt257=1;
				}

				switch (alt257) {
				case 1 :
					// Hive.g:1918:6: precedenceUnaryOperator ^
					{
					pushFollow(FOLLOW_precedenceUnaryOperator_in_precedenceUnaryPrefixExpression13908);
					precedenceUnaryOperator878=precedenceUnaryOperator();
					state._fsp--;

					root_0 = (CommonTree)adaptor.becomeRoot(precedenceUnaryOperator878.getTree(), root_0);
					}
					break;

				default :
					break loop257;
				}
			}

			pushFollow(FOLLOW_precedenceFieldExpression_in_precedenceUnaryPrefixExpression13913);
			precedenceFieldExpression879=precedenceFieldExpression();
			state._fsp--;

			adaptor.addChild(root_0, precedenceFieldExpression879.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceUnaryPrefixExpression"


	public static class precedenceUnarySuffixExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceUnarySuffixExpression"
	// Hive.g:1921:1: precedenceUnarySuffixExpression : precedenceUnaryPrefixExpression (a= KW_IS nullCondition )? -> {$a != null}? ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression ) -> precedenceUnaryPrefixExpression ;
	public final HiveParser.precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression() throws RecognitionException {
		HiveParser.precedenceUnarySuffixExpression_return retval = new HiveParser.precedenceUnarySuffixExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token a=null;
		ParserRuleReturnScope precedenceUnaryPrefixExpression880 =null;
		ParserRuleReturnScope nullCondition881 =null;

		CommonTree a_tree=null;
		RewriteRuleTokenStream stream_KW_IS=new RewriteRuleTokenStream(adaptor,"token KW_IS");
		RewriteRuleSubtreeStream stream_precedenceUnaryPrefixExpression=new RewriteRuleSubtreeStream(adaptor,"rule precedenceUnaryPrefixExpression");
		RewriteRuleSubtreeStream stream_nullCondition=new RewriteRuleSubtreeStream(adaptor,"rule nullCondition");

		try {
			// Hive.g:1922:5: ( precedenceUnaryPrefixExpression (a= KW_IS nullCondition )? -> {$a != null}? ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression ) -> precedenceUnaryPrefixExpression )
			// Hive.g:1922:7: precedenceUnaryPrefixExpression (a= KW_IS nullCondition )?
			{
			pushFollow(FOLLOW_precedenceUnaryPrefixExpression_in_precedenceUnarySuffixExpression13930);
			precedenceUnaryPrefixExpression880=precedenceUnaryPrefixExpression();
			state._fsp--;

			stream_precedenceUnaryPrefixExpression.add(precedenceUnaryPrefixExpression880.getTree());
			// Hive.g:1922:39: (a= KW_IS nullCondition )?
			int alt258=2;
			int LA258_0 = input.LA(1);
			if ( (LA258_0==KW_IS) ) {
				alt258=1;
			}
			switch (alt258) {
				case 1 :
					// Hive.g:1922:40: a= KW_IS nullCondition
					{
					a=(Token)match(input,KW_IS,FOLLOW_KW_IS_in_precedenceUnarySuffixExpression13935);  
					stream_KW_IS.add(a);

					pushFollow(FOLLOW_nullCondition_in_precedenceUnarySuffixExpression13937);
					nullCondition881=nullCondition();
					state._fsp--;

					stream_nullCondition.add(nullCondition881.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: precedenceUnaryPrefixExpression, precedenceUnaryPrefixExpression, nullCondition
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1923:5: -> {$a != null}? ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression )
			if (a != null) {
				// Hive.g:1923:22: ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);
				adaptor.addChild(root_1, stream_nullCondition.nextTree());
				adaptor.addChild(root_1, stream_precedenceUnaryPrefixExpression.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1924:5: -> precedenceUnaryPrefixExpression
			{
				adaptor.addChild(root_0, stream_precedenceUnaryPrefixExpression.nextTree());
			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceUnarySuffixExpression"


	public static class precedenceBitwiseXorOperator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceBitwiseXorOperator"
	// Hive.g:1928:1: precedenceBitwiseXorOperator : BITWISEXOR ;
	public final HiveParser.precedenceBitwiseXorOperator_return precedenceBitwiseXorOperator() throws RecognitionException {
		HiveParser.precedenceBitwiseXorOperator_return retval = new HiveParser.precedenceBitwiseXorOperator_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BITWISEXOR882=null;

		CommonTree BITWISEXOR882_tree=null;

		try {
			// Hive.g:1929:5: ( BITWISEXOR )
			// Hive.g:1930:5: BITWISEXOR
			{
			root_0 = (CommonTree)adaptor.nil();


			BITWISEXOR882=(Token)match(input,BITWISEXOR,FOLLOW_BITWISEXOR_in_precedenceBitwiseXorOperator13985); 
			BITWISEXOR882_tree = (CommonTree)adaptor.create(BITWISEXOR882);
			adaptor.addChild(root_0, BITWISEXOR882_tree);

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceBitwiseXorOperator"


	public static class precedenceBitwiseXorExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceBitwiseXorExpression"
	// Hive.g:1933:1: precedenceBitwiseXorExpression : precedenceUnarySuffixExpression ( precedenceBitwiseXorOperator ^ precedenceUnarySuffixExpression )* ;
	public final HiveParser.precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression() throws RecognitionException {
		HiveParser.precedenceBitwiseXorExpression_return retval = new HiveParser.precedenceBitwiseXorExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope precedenceUnarySuffixExpression883 =null;
		ParserRuleReturnScope precedenceBitwiseXorOperator884 =null;
		ParserRuleReturnScope precedenceUnarySuffixExpression885 =null;


		try {
			// Hive.g:1934:5: ( precedenceUnarySuffixExpression ( precedenceBitwiseXorOperator ^ precedenceUnarySuffixExpression )* )
			// Hive.g:1935:5: precedenceUnarySuffixExpression ( precedenceBitwiseXorOperator ^ precedenceUnarySuffixExpression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression14006);
			precedenceUnarySuffixExpression883=precedenceUnarySuffixExpression();
			state._fsp--;

			adaptor.addChild(root_0, precedenceUnarySuffixExpression883.getTree());

			// Hive.g:1935:37: ( precedenceBitwiseXorOperator ^ precedenceUnarySuffixExpression )*
			loop259:
			while (true) {
				int alt259=2;
				int LA259_0 = input.LA(1);
				if ( (LA259_0==BITWISEXOR) ) {
					alt259=1;
				}

				switch (alt259) {
				case 1 :
					// Hive.g:1935:38: precedenceBitwiseXorOperator ^ precedenceUnarySuffixExpression
					{
					pushFollow(FOLLOW_precedenceBitwiseXorOperator_in_precedenceBitwiseXorExpression14009);
					precedenceBitwiseXorOperator884=precedenceBitwiseXorOperator();
					state._fsp--;

					root_0 = (CommonTree)adaptor.becomeRoot(precedenceBitwiseXorOperator884.getTree(), root_0);
					pushFollow(FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression14012);
					precedenceUnarySuffixExpression885=precedenceUnarySuffixExpression();
					state._fsp--;

					adaptor.addChild(root_0, precedenceUnarySuffixExpression885.getTree());

					}
					break;

				default :
					break loop259;
				}
			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceBitwiseXorExpression"


	public static class precedenceStarOperator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceStarOperator"
	// Hive.g:1939:1: precedenceStarOperator : ( STAR | DIVIDE | MOD | DIV );
	public final HiveParser.precedenceStarOperator_return precedenceStarOperator() throws RecognitionException {
		HiveParser.precedenceStarOperator_return retval = new HiveParser.precedenceStarOperator_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set886=null;

		CommonTree set886_tree=null;

		try {
			// Hive.g:1940:5: ( STAR | DIVIDE | MOD | DIV )
			// Hive.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set886=input.LT(1);
			if ( (input.LA(1) >= DIV && input.LA(1) <= DIVIDE)||input.LA(1)==MOD||input.LA(1)==STAR ) {
				input.consume();
				adaptor.addChild(root_0, (CommonTree)adaptor.create(set886));
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceStarOperator"


	public static class precedenceStarExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceStarExpression"
	// Hive.g:1944:1: precedenceStarExpression : precedenceBitwiseXorExpression ( precedenceStarOperator ^ precedenceBitwiseXorExpression )* ;
	public final HiveParser.precedenceStarExpression_return precedenceStarExpression() throws RecognitionException {
		HiveParser.precedenceStarExpression_return retval = new HiveParser.precedenceStarExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope precedenceBitwiseXorExpression887 =null;
		ParserRuleReturnScope precedenceStarOperator888 =null;
		ParserRuleReturnScope precedenceBitwiseXorExpression889 =null;


		try {
			// Hive.g:1945:5: ( precedenceBitwiseXorExpression ( precedenceStarOperator ^ precedenceBitwiseXorExpression )* )
			// Hive.g:1946:5: precedenceBitwiseXorExpression ( precedenceStarOperator ^ precedenceBitwiseXorExpression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression14069);
			precedenceBitwiseXorExpression887=precedenceBitwiseXorExpression();
			state._fsp--;

			adaptor.addChild(root_0, precedenceBitwiseXorExpression887.getTree());

			// Hive.g:1946:36: ( precedenceStarOperator ^ precedenceBitwiseXorExpression )*
			loop260:
			while (true) {
				int alt260=2;
				int LA260_0 = input.LA(1);
				if ( ((LA260_0 >= DIV && LA260_0 <= DIVIDE)||LA260_0==MOD||LA260_0==STAR) ) {
					alt260=1;
				}

				switch (alt260) {
				case 1 :
					// Hive.g:1946:37: precedenceStarOperator ^ precedenceBitwiseXorExpression
					{
					pushFollow(FOLLOW_precedenceStarOperator_in_precedenceStarExpression14072);
					precedenceStarOperator888=precedenceStarOperator();
					state._fsp--;

					root_0 = (CommonTree)adaptor.becomeRoot(precedenceStarOperator888.getTree(), root_0);
					pushFollow(FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression14075);
					precedenceBitwiseXorExpression889=precedenceBitwiseXorExpression();
					state._fsp--;

					adaptor.addChild(root_0, precedenceBitwiseXorExpression889.getTree());

					}
					break;

				default :
					break loop260;
				}
			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceStarExpression"


	public static class precedencePlusOperator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedencePlusOperator"
	// Hive.g:1950:1: precedencePlusOperator : ( PLUS | MINUS );
	public final HiveParser.precedencePlusOperator_return precedencePlusOperator() throws RecognitionException {
		HiveParser.precedencePlusOperator_return retval = new HiveParser.precedencePlusOperator_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set890=null;

		CommonTree set890_tree=null;

		try {
			// Hive.g:1951:5: ( PLUS | MINUS )
			// Hive.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set890=input.LT(1);
			if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
				input.consume();
				adaptor.addChild(root_0, (CommonTree)adaptor.create(set890));
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedencePlusOperator"


	public static class precedencePlusExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedencePlusExpression"
	// Hive.g:1955:1: precedencePlusExpression : precedenceStarExpression ( precedencePlusOperator ^ precedenceStarExpression )* ;
	public final HiveParser.precedencePlusExpression_return precedencePlusExpression() throws RecognitionException {
		HiveParser.precedencePlusExpression_return retval = new HiveParser.precedencePlusExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope precedenceStarExpression891 =null;
		ParserRuleReturnScope precedencePlusOperator892 =null;
		ParserRuleReturnScope precedenceStarExpression893 =null;


		try {
			// Hive.g:1956:5: ( precedenceStarExpression ( precedencePlusOperator ^ precedenceStarExpression )* )
			// Hive.g:1957:5: precedenceStarExpression ( precedencePlusOperator ^ precedenceStarExpression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_precedenceStarExpression_in_precedencePlusExpression14124);
			precedenceStarExpression891=precedenceStarExpression();
			state._fsp--;

			adaptor.addChild(root_0, precedenceStarExpression891.getTree());

			// Hive.g:1957:30: ( precedencePlusOperator ^ precedenceStarExpression )*
			loop261:
			while (true) {
				int alt261=2;
				int LA261_0 = input.LA(1);
				if ( (LA261_0==MINUS||LA261_0==PLUS) ) {
					alt261=1;
				}

				switch (alt261) {
				case 1 :
					// Hive.g:1957:31: precedencePlusOperator ^ precedenceStarExpression
					{
					pushFollow(FOLLOW_precedencePlusOperator_in_precedencePlusExpression14127);
					precedencePlusOperator892=precedencePlusOperator();
					state._fsp--;

					root_0 = (CommonTree)adaptor.becomeRoot(precedencePlusOperator892.getTree(), root_0);
					pushFollow(FOLLOW_precedenceStarExpression_in_precedencePlusExpression14130);
					precedenceStarExpression893=precedenceStarExpression();
					state._fsp--;

					adaptor.addChild(root_0, precedenceStarExpression893.getTree());

					}
					break;

				default :
					break loop261;
				}
			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedencePlusExpression"


	public static class precedenceAmpersandOperator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceAmpersandOperator"
	// Hive.g:1961:1: precedenceAmpersandOperator : AMPERSAND ;
	public final HiveParser.precedenceAmpersandOperator_return precedenceAmpersandOperator() throws RecognitionException {
		HiveParser.precedenceAmpersandOperator_return retval = new HiveParser.precedenceAmpersandOperator_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token AMPERSAND894=null;

		CommonTree AMPERSAND894_tree=null;

		try {
			// Hive.g:1962:5: ( AMPERSAND )
			// Hive.g:1963:5: AMPERSAND
			{
			root_0 = (CommonTree)adaptor.nil();


			AMPERSAND894=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_precedenceAmpersandOperator14154); 
			AMPERSAND894_tree = (CommonTree)adaptor.create(AMPERSAND894);
			adaptor.addChild(root_0, AMPERSAND894_tree);

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceAmpersandOperator"


	public static class precedenceAmpersandExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceAmpersandExpression"
	// Hive.g:1966:1: precedenceAmpersandExpression : precedencePlusExpression ( precedenceAmpersandOperator ^ precedencePlusExpression )* ;
	public final HiveParser.precedenceAmpersandExpression_return precedenceAmpersandExpression() throws RecognitionException {
		HiveParser.precedenceAmpersandExpression_return retval = new HiveParser.precedenceAmpersandExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope precedencePlusExpression895 =null;
		ParserRuleReturnScope precedenceAmpersandOperator896 =null;
		ParserRuleReturnScope precedencePlusExpression897 =null;


		try {
			// Hive.g:1967:5: ( precedencePlusExpression ( precedenceAmpersandOperator ^ precedencePlusExpression )* )
			// Hive.g:1968:5: precedencePlusExpression ( precedenceAmpersandOperator ^ precedencePlusExpression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression14175);
			precedencePlusExpression895=precedencePlusExpression();
			state._fsp--;

			adaptor.addChild(root_0, precedencePlusExpression895.getTree());

			// Hive.g:1968:30: ( precedenceAmpersandOperator ^ precedencePlusExpression )*
			loop262:
			while (true) {
				int alt262=2;
				int LA262_0 = input.LA(1);
				if ( (LA262_0==AMPERSAND) ) {
					alt262=1;
				}

				switch (alt262) {
				case 1 :
					// Hive.g:1968:31: precedenceAmpersandOperator ^ precedencePlusExpression
					{
					pushFollow(FOLLOW_precedenceAmpersandOperator_in_precedenceAmpersandExpression14178);
					precedenceAmpersandOperator896=precedenceAmpersandOperator();
					state._fsp--;

					root_0 = (CommonTree)adaptor.becomeRoot(precedenceAmpersandOperator896.getTree(), root_0);
					pushFollow(FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression14181);
					precedencePlusExpression897=precedencePlusExpression();
					state._fsp--;

					adaptor.addChild(root_0, precedencePlusExpression897.getTree());

					}
					break;

				default :
					break loop262;
				}
			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceAmpersandExpression"


	public static class precedenceBitwiseOrOperator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceBitwiseOrOperator"
	// Hive.g:1972:1: precedenceBitwiseOrOperator : BITWISEOR ;
	public final HiveParser.precedenceBitwiseOrOperator_return precedenceBitwiseOrOperator() throws RecognitionException {
		HiveParser.precedenceBitwiseOrOperator_return retval = new HiveParser.precedenceBitwiseOrOperator_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BITWISEOR898=null;

		CommonTree BITWISEOR898_tree=null;

		try {
			// Hive.g:1973:5: ( BITWISEOR )
			// Hive.g:1974:5: BITWISEOR
			{
			root_0 = (CommonTree)adaptor.nil();


			BITWISEOR898=(Token)match(input,BITWISEOR,FOLLOW_BITWISEOR_in_precedenceBitwiseOrOperator14205); 
			BITWISEOR898_tree = (CommonTree)adaptor.create(BITWISEOR898);
			adaptor.addChild(root_0, BITWISEOR898_tree);

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceBitwiseOrOperator"


	public static class precedenceBitwiseOrExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceBitwiseOrExpression"
	// Hive.g:1977:1: precedenceBitwiseOrExpression : precedenceAmpersandExpression ( precedenceBitwiseOrOperator ^ precedenceAmpersandExpression )* ;
	public final HiveParser.precedenceBitwiseOrExpression_return precedenceBitwiseOrExpression() throws RecognitionException {
		HiveParser.precedenceBitwiseOrExpression_return retval = new HiveParser.precedenceBitwiseOrExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope precedenceAmpersandExpression899 =null;
		ParserRuleReturnScope precedenceBitwiseOrOperator900 =null;
		ParserRuleReturnScope precedenceAmpersandExpression901 =null;


		try {
			// Hive.g:1978:5: ( precedenceAmpersandExpression ( precedenceBitwiseOrOperator ^ precedenceAmpersandExpression )* )
			// Hive.g:1979:5: precedenceAmpersandExpression ( precedenceBitwiseOrOperator ^ precedenceAmpersandExpression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression14226);
			precedenceAmpersandExpression899=precedenceAmpersandExpression();
			state._fsp--;

			adaptor.addChild(root_0, precedenceAmpersandExpression899.getTree());

			// Hive.g:1979:35: ( precedenceBitwiseOrOperator ^ precedenceAmpersandExpression )*
			loop263:
			while (true) {
				int alt263=2;
				int LA263_0 = input.LA(1);
				if ( (LA263_0==BITWISEOR) ) {
					alt263=1;
				}

				switch (alt263) {
				case 1 :
					// Hive.g:1979:36: precedenceBitwiseOrOperator ^ precedenceAmpersandExpression
					{
					pushFollow(FOLLOW_precedenceBitwiseOrOperator_in_precedenceBitwiseOrExpression14229);
					precedenceBitwiseOrOperator900=precedenceBitwiseOrOperator();
					state._fsp--;

					root_0 = (CommonTree)adaptor.becomeRoot(precedenceBitwiseOrOperator900.getTree(), root_0);
					pushFollow(FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression14232);
					precedenceAmpersandExpression901=precedenceAmpersandExpression();
					state._fsp--;

					adaptor.addChild(root_0, precedenceAmpersandExpression901.getTree());

					}
					break;

				default :
					break loop263;
				}
			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceBitwiseOrExpression"


	public static class precedenceEqualNegatableOperator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceEqualNegatableOperator"
	// Hive.g:1984:1: precedenceEqualNegatableOperator : ( KW_LIKE | KW_RLIKE | KW_REGEXP );
	public final HiveParser.precedenceEqualNegatableOperator_return precedenceEqualNegatableOperator() throws RecognitionException {
		HiveParser.precedenceEqualNegatableOperator_return retval = new HiveParser.precedenceEqualNegatableOperator_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set902=null;

		CommonTree set902_tree=null;

		try {
			// Hive.g:1985:5: ( KW_LIKE | KW_RLIKE | KW_REGEXP )
			// Hive.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set902=input.LT(1);
			if ( input.LA(1)==KW_LIKE||input.LA(1)==KW_REGEXP||input.LA(1)==KW_RLIKE ) {
				input.consume();
				adaptor.addChild(root_0, (CommonTree)adaptor.create(set902));
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceEqualNegatableOperator"


	public static class precedenceEqualOperator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceEqualOperator"
	// Hive.g:1989:1: precedenceEqualOperator : ( precedenceEqualNegatableOperator | EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN );
	public final HiveParser.precedenceEqualOperator_return precedenceEqualOperator() throws RecognitionException {
		HiveParser.precedenceEqualOperator_return retval = new HiveParser.precedenceEqualOperator_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token EQUAL904=null;
		Token NOTEQUAL905=null;
		Token LESSTHANOREQUALTO906=null;
		Token LESSTHAN907=null;
		Token GREATERTHANOREQUALTO908=null;
		Token GREATERTHAN909=null;
		ParserRuleReturnScope precedenceEqualNegatableOperator903 =null;

		CommonTree EQUAL904_tree=null;
		CommonTree NOTEQUAL905_tree=null;
		CommonTree LESSTHANOREQUALTO906_tree=null;
		CommonTree LESSTHAN907_tree=null;
		CommonTree GREATERTHANOREQUALTO908_tree=null;
		CommonTree GREATERTHAN909_tree=null;

		try {
			// Hive.g:1990:5: ( precedenceEqualNegatableOperator | EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN )
			int alt264=7;
			switch ( input.LA(1) ) {
			case KW_LIKE:
			case KW_REGEXP:
			case KW_RLIKE:
				{
				alt264=1;
				}
				break;
			case EQUAL:
				{
				alt264=2;
				}
				break;
			case NOTEQUAL:
				{
				alt264=3;
				}
				break;
			case LESSTHANOREQUALTO:
				{
				alt264=4;
				}
				break;
			case LESSTHAN:
				{
				alt264=5;
				}
				break;
			case GREATERTHANOREQUALTO:
				{
				alt264=6;
				}
				break;
			case GREATERTHAN:
				{
				alt264=7;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 264, 0, input);
				throw nvae;
			}
			switch (alt264) {
				case 1 :
					// Hive.g:1991:5: precedenceEqualNegatableOperator
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualOperator14286);
					precedenceEqualNegatableOperator903=precedenceEqualNegatableOperator();
					state._fsp--;

					adaptor.addChild(root_0, precedenceEqualNegatableOperator903.getTree());

					}
					break;
				case 2 :
					// Hive.g:1991:40: EQUAL
					{
					root_0 = (CommonTree)adaptor.nil();


					EQUAL904=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_precedenceEqualOperator14290); 
					EQUAL904_tree = (CommonTree)adaptor.create(EQUAL904);
					adaptor.addChild(root_0, EQUAL904_tree);

					}
					break;
				case 3 :
					// Hive.g:1991:48: NOTEQUAL
					{
					root_0 = (CommonTree)adaptor.nil();


					NOTEQUAL905=(Token)match(input,NOTEQUAL,FOLLOW_NOTEQUAL_in_precedenceEqualOperator14294); 
					NOTEQUAL905_tree = (CommonTree)adaptor.create(NOTEQUAL905);
					adaptor.addChild(root_0, NOTEQUAL905_tree);

					}
					break;
				case 4 :
					// Hive.g:1991:59: LESSTHANOREQUALTO
					{
					root_0 = (CommonTree)adaptor.nil();


					LESSTHANOREQUALTO906=(Token)match(input,LESSTHANOREQUALTO,FOLLOW_LESSTHANOREQUALTO_in_precedenceEqualOperator14298); 
					LESSTHANOREQUALTO906_tree = (CommonTree)adaptor.create(LESSTHANOREQUALTO906);
					adaptor.addChild(root_0, LESSTHANOREQUALTO906_tree);

					}
					break;
				case 5 :
					// Hive.g:1991:79: LESSTHAN
					{
					root_0 = (CommonTree)adaptor.nil();


					LESSTHAN907=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_precedenceEqualOperator14302); 
					LESSTHAN907_tree = (CommonTree)adaptor.create(LESSTHAN907);
					adaptor.addChild(root_0, LESSTHAN907_tree);

					}
					break;
				case 6 :
					// Hive.g:1991:90: GREATERTHANOREQUALTO
					{
					root_0 = (CommonTree)adaptor.nil();


					GREATERTHANOREQUALTO908=(Token)match(input,GREATERTHANOREQUALTO,FOLLOW_GREATERTHANOREQUALTO_in_precedenceEqualOperator14306); 
					GREATERTHANOREQUALTO908_tree = (CommonTree)adaptor.create(GREATERTHANOREQUALTO908);
					adaptor.addChild(root_0, GREATERTHANOREQUALTO908_tree);

					}
					break;
				case 7 :
					// Hive.g:1991:113: GREATERTHAN
					{
					root_0 = (CommonTree)adaptor.nil();


					GREATERTHAN909=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_precedenceEqualOperator14310); 
					GREATERTHAN909_tree = (CommonTree)adaptor.create(GREATERTHAN909);
					adaptor.addChild(root_0, GREATERTHAN909_tree);

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceEqualOperator"


	public static class precedenceEqualExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceEqualExpression"
	// Hive.g:1994:1: precedenceEqualExpression : (left= precedenceBitwiseOrExpression -> $left) ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) )* ;
	public final HiveParser.precedenceEqualExpression_return precedenceEqualExpression() throws RecognitionException {
		HiveParser.precedenceEqualExpression_return retval = new HiveParser.precedenceEqualExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_NOT910=null;
		Token KW_NOT913=null;
		Token KW_IN914=null;
		Token KW_IN916=null;
		ParserRuleReturnScope left =null;
		ParserRuleReturnScope notExpr =null;
		ParserRuleReturnScope equalExpr =null;
		ParserRuleReturnScope precedenceEqualNegatableOperator911 =null;
		ParserRuleReturnScope precedenceEqualOperator912 =null;
		ParserRuleReturnScope expressions915 =null;
		ParserRuleReturnScope expressions917 =null;

		CommonTree KW_NOT910_tree=null;
		CommonTree KW_NOT913_tree=null;
		CommonTree KW_IN914_tree=null;
		CommonTree KW_IN916_tree=null;
		RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleSubtreeStream stream_precedenceEqualNegatableOperator=new RewriteRuleSubtreeStream(adaptor,"rule precedenceEqualNegatableOperator");
		RewriteRuleSubtreeStream stream_precedenceEqualOperator=new RewriteRuleSubtreeStream(adaptor,"rule precedenceEqualOperator");
		RewriteRuleSubtreeStream stream_precedenceBitwiseOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule precedenceBitwiseOrExpression");
		RewriteRuleSubtreeStream stream_expressions=new RewriteRuleSubtreeStream(adaptor,"rule expressions");

		try {
			// Hive.g:1995:5: ( (left= precedenceBitwiseOrExpression -> $left) ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) )* )
			// Hive.g:1996:5: (left= precedenceBitwiseOrExpression -> $left) ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) )*
			{
			// Hive.g:1996:5: (left= precedenceBitwiseOrExpression -> $left)
			// Hive.g:1996:6: left= precedenceBitwiseOrExpression
			{
			pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14334);
			left=precedenceBitwiseOrExpression();
			state._fsp--;

			stream_precedenceBitwiseOrExpression.add(left.getTree());
			// AST REWRITE
			// elements: left
			// token labels: 
			// rule labels: retval, left
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1996:41: -> $left
			{
				adaptor.addChild(root_0, stream_left.nextTree());
			}


			retval.tree = root_0;

			}

			// Hive.g:1997:5: ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) )*
			loop265:
			while (true) {
				int alt265=5;
				switch ( input.LA(1) ) {
				case KW_NOT:
					{
					int LA265_36 = input.LA(2);
					if ( (LA265_36==KW_IN) ) {
						alt265=3;
					}
					else if ( (LA265_36==KW_LIKE||LA265_36==KW_REGEXP||LA265_36==KW_RLIKE) ) {
						alt265=1;
					}

					}
					break;
				case EQUAL:
				case GREATERTHAN:
				case GREATERTHANOREQUALTO:
				case KW_LIKE:
				case KW_REGEXP:
				case KW_RLIKE:
				case LESSTHAN:
				case LESSTHANOREQUALTO:
				case NOTEQUAL:
					{
					alt265=2;
					}
					break;
				case KW_IN:
					{
					alt265=4;
					}
					break;
				}
				switch (alt265) {
				case 1 :
					// Hive.g:1998:8: ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression )
					{
					// Hive.g:1998:8: ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression )
					// Hive.g:1998:9: KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression
					{
					KW_NOT910=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceEqualExpression14356);  
					stream_KW_NOT.add(KW_NOT910);

					pushFollow(FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualExpression14358);
					precedenceEqualNegatableOperator911=precedenceEqualNegatableOperator();
					state._fsp--;

					stream_precedenceEqualNegatableOperator.add(precedenceEqualNegatableOperator911.getTree());
					pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14362);
					notExpr=precedenceBitwiseOrExpression();
					state._fsp--;

					stream_precedenceBitwiseOrExpression.add(notExpr.getTree());
					}

					// AST REWRITE
					// elements: precedenceEqualNegatableOperator, precedenceEqualExpression, notExpr, KW_NOT
					// token labels: 
					// rule labels: retval, notExpr
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_notExpr=new RewriteRuleSubtreeStream(adaptor,"rule notExpr",notExpr!=null?notExpr.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1999:8: -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) )
					{
						// Hive.g:1999:11: ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_KW_NOT.nextNode(), root_1);
						// Hive.g:1999:20: ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr)
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot(stream_precedenceEqualNegatableOperator.nextNode(), root_2);
						adaptor.addChild(root_2, stream_retval.nextTree());
						adaptor.addChild(root_2, stream_notExpr.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// Hive.g:2000:7: ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression )
					{
					// Hive.g:2000:7: ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression )
					// Hive.g:2000:8: precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression
					{
					pushFollow(FOLLOW_precedenceEqualOperator_in_precedenceEqualExpression14395);
					precedenceEqualOperator912=precedenceEqualOperator();
					state._fsp--;

					stream_precedenceEqualOperator.add(precedenceEqualOperator912.getTree());
					pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14399);
					equalExpr=precedenceBitwiseOrExpression();
					state._fsp--;

					stream_precedenceBitwiseOrExpression.add(equalExpr.getTree());
					}

					// AST REWRITE
					// elements: equalExpr, precedenceEqualOperator, precedenceEqualExpression
					// token labels: 
					// rule labels: equalExpr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_equalExpr=new RewriteRuleSubtreeStream(adaptor,"rule equalExpr",equalExpr!=null?equalExpr.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2001:8: -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr)
					{
						// Hive.g:2001:11: ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_precedenceEqualOperator.nextNode(), root_1);
						adaptor.addChild(root_1, stream_retval.nextTree());
						adaptor.addChild(root_1, stream_equalExpr.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// Hive.g:2002:7: ( KW_NOT KW_IN expressions )
					{
					// Hive.g:2002:7: ( KW_NOT KW_IN expressions )
					// Hive.g:2002:8: KW_NOT KW_IN expressions
					{
					KW_NOT913=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceEqualExpression14428);  
					stream_KW_NOT.add(KW_NOT913);

					KW_IN914=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_precedenceEqualExpression14430);  
					stream_KW_IN.add(KW_IN914);

					pushFollow(FOLLOW_expressions_in_precedenceEqualExpression14432);
					expressions915=expressions();
					state._fsp--;

					stream_expressions.add(expressions915.getTree());
					}

					// AST REWRITE
					// elements: precedenceEqualExpression, KW_NOT, expressions, KW_IN
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2003:8: -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) )
					{
						// Hive.g:2003:11: ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_KW_NOT.nextNode(), root_1);
						// Hive.g:2003:20: ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions )
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_2);
						adaptor.addChild(root_2, stream_KW_IN.nextNode());
						adaptor.addChild(root_2, stream_retval.nextTree());
						adaptor.addChild(root_2, stream_expressions.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 4 :
					// Hive.g:2004:7: ( KW_IN expressions )
					{
					// Hive.g:2004:7: ( KW_IN expressions )
					// Hive.g:2004:8: KW_IN expressions
					{
					KW_IN916=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_precedenceEqualExpression14466);  
					stream_KW_IN.add(KW_IN916);

					pushFollow(FOLLOW_expressions_in_precedenceEqualExpression14468);
					expressions917=expressions();
					state._fsp--;

					stream_expressions.add(expressions917.getTree());
					}

					// AST REWRITE
					// elements: KW_IN, precedenceEqualExpression, expressions
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2005:8: -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions )
					{
						// Hive.g:2005:11: ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);
						adaptor.addChild(root_1, stream_KW_IN.nextNode());
						adaptor.addChild(root_1, stream_retval.nextTree());
						adaptor.addChild(root_1, stream_expressions.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

				default :
					break loop265;
				}
			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceEqualExpression"


	public static class expressions_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "expressions"
	// Hive.g:2009:1: expressions : LPAREN expression ( COMMA expression )* RPAREN -> ( expression )* ;
	public final HiveParser.expressions_return expressions() throws RecognitionException {
		HiveParser.expressions_return retval = new HiveParser.expressions_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN918=null;
		Token COMMA920=null;
		Token RPAREN922=null;
		ParserRuleReturnScope expression919 =null;
		ParserRuleReturnScope expression921 =null;

		CommonTree LPAREN918_tree=null;
		CommonTree COMMA920_tree=null;
		CommonTree RPAREN922_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		try {
			// Hive.g:2010:5: ( LPAREN expression ( COMMA expression )* RPAREN -> ( expression )* )
			// Hive.g:2011:5: LPAREN expression ( COMMA expression )* RPAREN
			{
			LPAREN918=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressions14517);  
			stream_LPAREN.add(LPAREN918);

			pushFollow(FOLLOW_expression_in_expressions14519);
			expression919=expression();
			state._fsp--;

			stream_expression.add(expression919.getTree());
			// Hive.g:2011:23: ( COMMA expression )*
			loop266:
			while (true) {
				int alt266=2;
				int LA266_0 = input.LA(1);
				if ( (LA266_0==COMMA) ) {
					alt266=1;
				}

				switch (alt266) {
				case 1 :
					// Hive.g:2011:24: COMMA expression
					{
					COMMA920=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressions14522);  
					stream_COMMA.add(COMMA920);

					pushFollow(FOLLOW_expression_in_expressions14524);
					expression921=expression();
					state._fsp--;

					stream_expression.add(expression921.getTree());
					}
					break;

				default :
					break loop266;
				}
			}

			RPAREN922=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressions14528);  
			stream_RPAREN.add(RPAREN922);

			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2011:50: -> ( expression )*
			{
				// Hive.g:2011:53: ( expression )*
				while ( stream_expression.hasNext() ) {
					adaptor.addChild(root_0, stream_expression.nextTree());
				}
				stream_expression.reset();

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expressions"


	public static class precedenceNotOperator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceNotOperator"
	// Hive.g:2014:1: precedenceNotOperator : KW_NOT ;
	public final HiveParser.precedenceNotOperator_return precedenceNotOperator() throws RecognitionException {
		HiveParser.precedenceNotOperator_return retval = new HiveParser.precedenceNotOperator_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_NOT923=null;

		CommonTree KW_NOT923_tree=null;

		try {
			// Hive.g:2015:5: ( KW_NOT )
			// Hive.g:2016:5: KW_NOT
			{
			root_0 = (CommonTree)adaptor.nil();


			KW_NOT923=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceNotOperator14554); 
			KW_NOT923_tree = (CommonTree)adaptor.create(KW_NOT923);
			adaptor.addChild(root_0, KW_NOT923_tree);

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceNotOperator"


	public static class precedenceNotExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceNotExpression"
	// Hive.g:2019:1: precedenceNotExpression : ( precedenceNotOperator ^)* precedenceEqualExpression ;
	public final HiveParser.precedenceNotExpression_return precedenceNotExpression() throws RecognitionException {
		HiveParser.precedenceNotExpression_return retval = new HiveParser.precedenceNotExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope precedenceNotOperator924 =null;
		ParserRuleReturnScope precedenceEqualExpression925 =null;


		try {
			// Hive.g:2020:5: ( ( precedenceNotOperator ^)* precedenceEqualExpression )
			// Hive.g:2021:5: ( precedenceNotOperator ^)* precedenceEqualExpression
			{
			root_0 = (CommonTree)adaptor.nil();


			// Hive.g:2021:5: ( precedenceNotOperator ^)*
			loop267:
			while (true) {
				int alt267=2;
				int LA267_0 = input.LA(1);
				if ( (LA267_0==KW_NOT) ) {
					alt267=1;
				}

				switch (alt267) {
				case 1 :
					// Hive.g:2021:6: precedenceNotOperator ^
					{
					pushFollow(FOLLOW_precedenceNotOperator_in_precedenceNotExpression14576);
					precedenceNotOperator924=precedenceNotOperator();
					state._fsp--;

					root_0 = (CommonTree)adaptor.becomeRoot(precedenceNotOperator924.getTree(), root_0);
					}
					break;

				default :
					break loop267;
				}
			}

			pushFollow(FOLLOW_precedenceEqualExpression_in_precedenceNotExpression14581);
			precedenceEqualExpression925=precedenceEqualExpression();
			state._fsp--;

			adaptor.addChild(root_0, precedenceEqualExpression925.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceNotExpression"


	public static class precedenceAndOperator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceAndOperator"
	// Hive.g:2025:1: precedenceAndOperator : KW_AND ;
	public final HiveParser.precedenceAndOperator_return precedenceAndOperator() throws RecognitionException {
		HiveParser.precedenceAndOperator_return retval = new HiveParser.precedenceAndOperator_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_AND926=null;

		CommonTree KW_AND926_tree=null;

		try {
			// Hive.g:2026:5: ( KW_AND )
			// Hive.g:2027:5: KW_AND
			{
			root_0 = (CommonTree)adaptor.nil();


			KW_AND926=(Token)match(input,KW_AND,FOLLOW_KW_AND_in_precedenceAndOperator14603); 
			KW_AND926_tree = (CommonTree)adaptor.create(KW_AND926);
			adaptor.addChild(root_0, KW_AND926_tree);

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceAndOperator"


	public static class precedenceAndExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceAndExpression"
	// Hive.g:2030:1: precedenceAndExpression : precedenceNotExpression ( precedenceAndOperator ^ precedenceNotExpression )* ;
	public final HiveParser.precedenceAndExpression_return precedenceAndExpression() throws RecognitionException {
		HiveParser.precedenceAndExpression_return retval = new HiveParser.precedenceAndExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope precedenceNotExpression927 =null;
		ParserRuleReturnScope precedenceAndOperator928 =null;
		ParserRuleReturnScope precedenceNotExpression929 =null;


		try {
			// Hive.g:2031:5: ( precedenceNotExpression ( precedenceAndOperator ^ precedenceNotExpression )* )
			// Hive.g:2032:5: precedenceNotExpression ( precedenceAndOperator ^ precedenceNotExpression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_precedenceNotExpression_in_precedenceAndExpression14624);
			precedenceNotExpression927=precedenceNotExpression();
			state._fsp--;

			adaptor.addChild(root_0, precedenceNotExpression927.getTree());

			// Hive.g:2032:29: ( precedenceAndOperator ^ precedenceNotExpression )*
			loop268:
			while (true) {
				int alt268=2;
				int LA268_0 = input.LA(1);
				if ( (LA268_0==KW_AND) ) {
					alt268=1;
				}

				switch (alt268) {
				case 1 :
					// Hive.g:2032:30: precedenceAndOperator ^ precedenceNotExpression
					{
					pushFollow(FOLLOW_precedenceAndOperator_in_precedenceAndExpression14627);
					precedenceAndOperator928=precedenceAndOperator();
					state._fsp--;

					root_0 = (CommonTree)adaptor.becomeRoot(precedenceAndOperator928.getTree(), root_0);
					pushFollow(FOLLOW_precedenceNotExpression_in_precedenceAndExpression14630);
					precedenceNotExpression929=precedenceNotExpression();
					state._fsp--;

					adaptor.addChild(root_0, precedenceNotExpression929.getTree());

					}
					break;

				default :
					break loop268;
				}
			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceAndExpression"


	public static class precedenceOrOperator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceOrOperator"
	// Hive.g:2036:1: precedenceOrOperator : KW_OR ;
	public final HiveParser.precedenceOrOperator_return precedenceOrOperator() throws RecognitionException {
		HiveParser.precedenceOrOperator_return retval = new HiveParser.precedenceOrOperator_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_OR930=null;

		CommonTree KW_OR930_tree=null;

		try {
			// Hive.g:2037:5: ( KW_OR )
			// Hive.g:2038:5: KW_OR
			{
			root_0 = (CommonTree)adaptor.nil();


			KW_OR930=(Token)match(input,KW_OR,FOLLOW_KW_OR_in_precedenceOrOperator14654); 
			KW_OR930_tree = (CommonTree)adaptor.create(KW_OR930);
			adaptor.addChild(root_0, KW_OR930_tree);

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceOrOperator"


	public static class precedenceOrExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "precedenceOrExpression"
	// Hive.g:2041:1: precedenceOrExpression : precedenceAndExpression ( precedenceOrOperator ^ precedenceAndExpression )* ;
	public final HiveParser.precedenceOrExpression_return precedenceOrExpression() throws RecognitionException {
		HiveParser.precedenceOrExpression_return retval = new HiveParser.precedenceOrExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope precedenceAndExpression931 =null;
		ParserRuleReturnScope precedenceOrOperator932 =null;
		ParserRuleReturnScope precedenceAndExpression933 =null;


		try {
			// Hive.g:2042:5: ( precedenceAndExpression ( precedenceOrOperator ^ precedenceAndExpression )* )
			// Hive.g:2043:5: precedenceAndExpression ( precedenceOrOperator ^ precedenceAndExpression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_precedenceAndExpression_in_precedenceOrExpression14675);
			precedenceAndExpression931=precedenceAndExpression();
			state._fsp--;

			adaptor.addChild(root_0, precedenceAndExpression931.getTree());

			// Hive.g:2043:29: ( precedenceOrOperator ^ precedenceAndExpression )*
			loop269:
			while (true) {
				int alt269=2;
				int LA269_0 = input.LA(1);
				if ( (LA269_0==KW_OR) ) {
					alt269=1;
				}

				switch (alt269) {
				case 1 :
					// Hive.g:2043:30: precedenceOrOperator ^ precedenceAndExpression
					{
					pushFollow(FOLLOW_precedenceOrOperator_in_precedenceOrExpression14678);
					precedenceOrOperator932=precedenceOrOperator();
					state._fsp--;

					root_0 = (CommonTree)adaptor.becomeRoot(precedenceOrOperator932.getTree(), root_0);
					pushFollow(FOLLOW_precedenceAndExpression_in_precedenceOrExpression14681);
					precedenceAndExpression933=precedenceAndExpression();
					state._fsp--;

					adaptor.addChild(root_0, precedenceAndExpression933.getTree());

					}
					break;

				default :
					break loop269;
				}
			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "precedenceOrExpression"


	public static class booleanValue_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "booleanValue"
	// Hive.g:2047:1: booleanValue : ( KW_TRUE ^| KW_FALSE ^);
	public final HiveParser.booleanValue_return booleanValue() throws RecognitionException {
		HiveParser.booleanValue_return retval = new HiveParser.booleanValue_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_TRUE934=null;
		Token KW_FALSE935=null;

		CommonTree KW_TRUE934_tree=null;
		CommonTree KW_FALSE935_tree=null;

		try {
			// Hive.g:2048:5: ( KW_TRUE ^| KW_FALSE ^)
			int alt270=2;
			int LA270_0 = input.LA(1);
			if ( (LA270_0==KW_TRUE) ) {
				alt270=1;
			}
			else if ( (LA270_0==KW_FALSE) ) {
				alt270=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 270, 0, input);
				throw nvae;
			}

			switch (alt270) {
				case 1 :
					// Hive.g:2049:5: KW_TRUE ^
					{
					root_0 = (CommonTree)adaptor.nil();


					KW_TRUE934=(Token)match(input,KW_TRUE,FOLLOW_KW_TRUE_in_booleanValue14705); 
					KW_TRUE934_tree = (CommonTree)adaptor.create(KW_TRUE934);
					root_0 = (CommonTree)adaptor.becomeRoot(KW_TRUE934_tree, root_0);

					}
					break;
				case 2 :
					// Hive.g:2049:16: KW_FALSE ^
					{
					root_0 = (CommonTree)adaptor.nil();


					KW_FALSE935=(Token)match(input,KW_FALSE,FOLLOW_KW_FALSE_in_booleanValue14710); 
					KW_FALSE935_tree = (CommonTree)adaptor.create(KW_FALSE935);
					root_0 = (CommonTree)adaptor.becomeRoot(KW_FALSE935_tree, root_0);

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "booleanValue"


	public static class tableOrPartition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableOrPartition"
	// Hive.g:2052:1: tableOrPartition : tableName ( partitionSpec )? -> ^( TOK_TAB tableName ( partitionSpec )? ) ;
	public final HiveParser.tableOrPartition_return tableOrPartition() throws RecognitionException {
		HiveParser.tableOrPartition_return retval = new HiveParser.tableOrPartition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope tableName936 =null;
		ParserRuleReturnScope partitionSpec937 =null;

		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		try {
			// Hive.g:2053:4: ( tableName ( partitionSpec )? -> ^( TOK_TAB tableName ( partitionSpec )? ) )
			// Hive.g:2054:4: tableName ( partitionSpec )?
			{
			pushFollow(FOLLOW_tableName_in_tableOrPartition14730);
			tableName936=tableName();
			state._fsp--;

			stream_tableName.add(tableName936.getTree());
			// Hive.g:2054:14: ( partitionSpec )?
			int alt271=2;
			int LA271_0 = input.LA(1);
			if ( (LA271_0==KW_PARTITION) ) {
				alt271=1;
			}
			switch (alt271) {
				case 1 :
					// Hive.g:2054:14: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_tableOrPartition14732);
					partitionSpec937=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec937.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableName, partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2054:29: -> ^( TOK_TAB tableName ( partitionSpec )? )
			{
				// Hive.g:2054:32: ^( TOK_TAB tableName ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TAB, "TOK_TAB"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// Hive.g:2054:52: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableOrPartition"


	public static class partitionSpec_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "partitionSpec"
	// Hive.g:2057:1: partitionSpec : KW_PARTITION LPAREN partitionVal ( COMMA partitionVal )* RPAREN -> ^( TOK_PARTSPEC ( partitionVal )+ ) ;
	public final HiveParser.partitionSpec_return partitionSpec() throws RecognitionException {
		HiveParser.partitionSpec_return retval = new HiveParser.partitionSpec_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_PARTITION938=null;
		Token LPAREN939=null;
		Token COMMA941=null;
		Token RPAREN943=null;
		ParserRuleReturnScope partitionVal940 =null;
		ParserRuleReturnScope partitionVal942 =null;

		CommonTree KW_PARTITION938_tree=null;
		CommonTree LPAREN939_tree=null;
		CommonTree COMMA941_tree=null;
		CommonTree RPAREN943_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_PARTITION=new RewriteRuleTokenStream(adaptor,"token KW_PARTITION");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_partitionVal=new RewriteRuleSubtreeStream(adaptor,"rule partitionVal");

		try {
			// Hive.g:2058:5: ( KW_PARTITION LPAREN partitionVal ( COMMA partitionVal )* RPAREN -> ^( TOK_PARTSPEC ( partitionVal )+ ) )
			// Hive.g:2059:5: KW_PARTITION LPAREN partitionVal ( COMMA partitionVal )* RPAREN
			{
			KW_PARTITION938=(Token)match(input,KW_PARTITION,FOLLOW_KW_PARTITION_in_partitionSpec14764);  
			stream_KW_PARTITION.add(KW_PARTITION938);

			LPAREN939=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partitionSpec14771);  
			stream_LPAREN.add(LPAREN939);

			pushFollow(FOLLOW_partitionVal_in_partitionSpec14773);
			partitionVal940=partitionVal();
			state._fsp--;

			stream_partitionVal.add(partitionVal940.getTree());
			// Hive.g:2060:26: ( COMMA partitionVal )*
			loop272:
			while (true) {
				int alt272=2;
				int LA272_0 = input.LA(1);
				if ( (LA272_0==COMMA) ) {
					alt272=1;
				}

				switch (alt272) {
				case 1 :
					// Hive.g:2060:27: COMMA partitionVal
					{
					COMMA941=(Token)match(input,COMMA,FOLLOW_COMMA_in_partitionSpec14776);  
					stream_COMMA.add(COMMA941);

					pushFollow(FOLLOW_partitionVal_in_partitionSpec14779);
					partitionVal942=partitionVal();
					state._fsp--;

					stream_partitionVal.add(partitionVal942.getTree());
					}
					break;

				default :
					break loop272;
				}
			}

			RPAREN943=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partitionSpec14784);  
			stream_RPAREN.add(RPAREN943);

			// AST REWRITE
			// elements: partitionVal
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2060:57: -> ^( TOK_PARTSPEC ( partitionVal )+ )
			{
				// Hive.g:2060:60: ^( TOK_PARTSPEC ( partitionVal )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PARTSPEC, "TOK_PARTSPEC"), root_1);
				if ( !(stream_partitionVal.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_partitionVal.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionVal.nextTree());
				}
				stream_partitionVal.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partitionSpec"


	public static class partitionVal_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "partitionVal"
	// Hive.g:2063:1: partitionVal : Identifier ( EQUAL constant )? -> ^( TOK_PARTVAL Identifier ( constant )? ) ;
	public final HiveParser.partitionVal_return partitionVal() throws RecognitionException {
		HiveParser.partitionVal_return retval = new HiveParser.partitionVal_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier944=null;
		Token EQUAL945=null;
		ParserRuleReturnScope constant946 =null;

		CommonTree Identifier944_tree=null;
		CommonTree EQUAL945_tree=null;
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");

		try {
			// Hive.g:2064:5: ( Identifier ( EQUAL constant )? -> ^( TOK_PARTVAL Identifier ( constant )? ) )
			// Hive.g:2065:5: Identifier ( EQUAL constant )?
			{
			Identifier944=(Token)match(input,Identifier,FOLLOW_Identifier_in_partitionVal14815);  
			stream_Identifier.add(Identifier944);

			// Hive.g:2065:16: ( EQUAL constant )?
			int alt273=2;
			int LA273_0 = input.LA(1);
			if ( (LA273_0==EQUAL) ) {
				alt273=1;
			}
			switch (alt273) {
				case 1 :
					// Hive.g:2065:17: EQUAL constant
					{
					EQUAL945=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_partitionVal14818);  
					stream_EQUAL.add(EQUAL945);

					pushFollow(FOLLOW_constant_in_partitionVal14820);
					constant946=constant();
					state._fsp--;

					stream_constant.add(constant946.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: constant, Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2065:34: -> ^( TOK_PARTVAL Identifier ( constant )? )
			{
				// Hive.g:2065:37: ^( TOK_PARTVAL Identifier ( constant )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PARTVAL, "TOK_PARTVAL"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// Hive.g:2065:62: ( constant )?
				if ( stream_constant.hasNext() ) {
					adaptor.addChild(root_1, stream_constant.nextTree());
				}
				stream_constant.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partitionVal"


	public static class sysFuncNames_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "sysFuncNames"
	// Hive.g:2068:1: sysFuncNames : ( KW_AND | KW_OR | KW_NOT | KW_LIKE | KW_IF | KW_CASE | KW_WHEN | KW_TINYINT | KW_SMALLINT | KW_INT | KW_BIGINT | KW_FLOAT | KW_DOUBLE | KW_BOOLEAN | KW_STRING | KW_BINARY | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE | EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN | DIVIDE | PLUS | MINUS | STAR | MOD | DIV | AMPERSAND | TILDE | BITWISEOR | BITWISEXOR | KW_RLIKE | KW_REGEXP | KW_IN );
	public final HiveParser.sysFuncNames_return sysFuncNames() throws RecognitionException {
		HiveParser.sysFuncNames_return retval = new HiveParser.sysFuncNames_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set947=null;

		CommonTree set947_tree=null;

		try {
			// Hive.g:2069:5: ( KW_AND | KW_OR | KW_NOT | KW_LIKE | KW_IF | KW_CASE | KW_WHEN | KW_TINYINT | KW_SMALLINT | KW_INT | KW_BIGINT | KW_FLOAT | KW_DOUBLE | KW_BOOLEAN | KW_STRING | KW_BINARY | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE | EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN | DIVIDE | PLUS | MINUS | STAR | MOD | DIV | AMPERSAND | TILDE | BITWISEOR | BITWISEXOR | KW_RLIKE | KW_REGEXP | KW_IN )
			// Hive.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set947=input.LT(1);
			if ( (input.LA(1) >= AMPERSAND && input.LA(1) <= BITWISEXOR)||(input.LA(1) >= DIV && input.LA(1) <= DIVIDE)||input.LA(1)==EQUAL||(input.LA(1) >= GREATERTHAN && input.LA(1) <= GREATERTHANOREQUALTO)||input.LA(1)==KW_AND||input.LA(1)==KW_ARRAY||(input.LA(1) >= KW_BIGINT && input.LA(1) <= KW_BOOLEAN)||input.LA(1)==KW_CASE||input.LA(1)==KW_DOUBLE||input.LA(1)==KW_FLOAT||input.LA(1)==KW_IF||input.LA(1)==KW_IN||input.LA(1)==KW_INT||input.LA(1)==KW_LIKE||input.LA(1)==KW_MAP||input.LA(1)==KW_NOT||input.LA(1)==KW_OR||input.LA(1)==KW_REGEXP||input.LA(1)==KW_RLIKE||input.LA(1)==KW_SMALLINT||(input.LA(1) >= KW_STRING && input.LA(1) <= KW_STRUCT)||input.LA(1)==KW_TINYINT||input.LA(1)==KW_UNIONTYPE||input.LA(1)==KW_WHEN||(input.LA(1) >= LESSTHAN && input.LA(1) <= LESSTHANOREQUALTO)||(input.LA(1) >= MINUS && input.LA(1) <= NOTEQUAL)||input.LA(1)==PLUS||input.LA(1)==STAR||input.LA(1)==TILDE ) {
				input.consume();
				adaptor.addChild(root_0, (CommonTree)adaptor.create(set947));
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sysFuncNames"


	public static class descFuncNames_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "descFuncNames"
	// Hive.g:2111:1: descFuncNames : ( sysFuncNames | StringLiteral | Identifier );
	public final HiveParser.descFuncNames_return descFuncNames() throws RecognitionException {
		HiveParser.descFuncNames_return retval = new HiveParser.descFuncNames_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token StringLiteral949=null;
		Token Identifier950=null;
		ParserRuleReturnScope sysFuncNames948 =null;

		CommonTree StringLiteral949_tree=null;
		CommonTree Identifier950_tree=null;

		try {
			// Hive.g:2112:5: ( sysFuncNames | StringLiteral | Identifier )
			int alt274=3;
			switch ( input.LA(1) ) {
			case AMPERSAND:
			case BITWISEOR:
			case BITWISEXOR:
			case DIV:
			case DIVIDE:
			case EQUAL:
			case GREATERTHAN:
			case GREATERTHANOREQUALTO:
			case KW_AND:
			case KW_ARRAY:
			case KW_BIGINT:
			case KW_BINARY:
			case KW_BOOLEAN:
			case KW_CASE:
			case KW_DOUBLE:
			case KW_FLOAT:
			case KW_IF:
			case KW_IN:
			case KW_INT:
			case KW_LIKE:
			case KW_MAP:
			case KW_NOT:
			case KW_OR:
			case KW_REGEXP:
			case KW_RLIKE:
			case KW_SMALLINT:
			case KW_STRING:
			case KW_STRUCT:
			case KW_TINYINT:
			case KW_UNIONTYPE:
			case KW_WHEN:
			case LESSTHAN:
			case LESSTHANOREQUALTO:
			case MINUS:
			case MOD:
			case NOTEQUAL:
			case PLUS:
			case STAR:
			case TILDE:
				{
				alt274=1;
				}
				break;
			case StringLiteral:
				{
				alt274=2;
				}
				break;
			case Identifier:
				{
				alt274=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 274, 0, input);
				throw nvae;
			}
			switch (alt274) {
				case 1 :
					// Hive.g:2113:7: sysFuncNames
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_sysFuncNames_in_descFuncNames15183);
					sysFuncNames948=sysFuncNames();
					state._fsp--;

					adaptor.addChild(root_0, sysFuncNames948.getTree());

					}
					break;
				case 2 :
					// Hive.g:2114:7: StringLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					StringLiteral949=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_descFuncNames15191); 
					StringLiteral949_tree = (CommonTree)adaptor.create(StringLiteral949);
					adaptor.addChild(root_0, StringLiteral949_tree);

					}
					break;
				case 3 :
					// Hive.g:2115:7: Identifier
					{
					root_0 = (CommonTree)adaptor.nil();


					Identifier950=(Token)match(input,Identifier,FOLLOW_Identifier_in_descFuncNames15199); 
					Identifier950_tree = (CommonTree)adaptor.create(Identifier950);
					adaptor.addChild(root_0, Identifier950_tree);

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "descFuncNames"


	public static class kwUser_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "kwUser"
	// Hive.g:2120:1: kwUser :{...}? Identifier ;
	public final HiveParser.kwUser_return kwUser() throws RecognitionException {
		HiveParser.kwUser_return retval = new HiveParser.kwUser_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier951=null;

		CommonTree Identifier951_tree=null;

		try {
			// Hive.g:2121:1: ({...}? Identifier )
			// Hive.g:2122:1: {...}? Identifier
			{
			root_0 = (CommonTree)adaptor.nil();


			if ( !((input.LT(1).getText().equalsIgnoreCase("user"))) ) {
				throw new FailedPredicateException(input, "kwUser", "input.LT(1).getText().equalsIgnoreCase(\"user\")");
			}
			Identifier951=(Token)match(input,Identifier,FOLLOW_Identifier_in_kwUser15216); 
			Identifier951_tree = (CommonTree)adaptor.create(Identifier951);
			adaptor.addChild(root_0, Identifier951_tree);

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "kwUser"


	public static class kwRole_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "kwRole"
	// Hive.g:2124:1: kwRole :{...}? Identifier ;
	public final HiveParser.kwRole_return kwRole() throws RecognitionException {
		HiveParser.kwRole_return retval = new HiveParser.kwRole_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier952=null;

		CommonTree Identifier952_tree=null;

		try {
			// Hive.g:2125:1: ({...}? Identifier )
			// Hive.g:2126:1: {...}? Identifier
			{
			root_0 = (CommonTree)adaptor.nil();


			if ( !((input.LT(1).getText().equalsIgnoreCase("role"))) ) {
				throw new FailedPredicateException(input, "kwRole", "input.LT(1).getText().equalsIgnoreCase(\"role\")");
			}
			Identifier952=(Token)match(input,Identifier,FOLLOW_Identifier_in_kwRole15226); 
			Identifier952_tree = (CommonTree)adaptor.create(Identifier952);
			adaptor.addChild(root_0, Identifier952_tree);

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "kwRole"


	public static class kwInner_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "kwInner"
	// Hive.g:2128:1: kwInner :{...}? Identifier ;
	public final HiveParser.kwInner_return kwInner() throws RecognitionException {
		HiveParser.kwInner_return retval = new HiveParser.kwInner_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token Identifier953=null;

		CommonTree Identifier953_tree=null;

		try {
			// Hive.g:2129:1: ({...}? Identifier )
			// Hive.g:2130:1: {...}? Identifier
			{
			root_0 = (CommonTree)adaptor.nil();


			if ( !((input.LT(1).getText().equalsIgnoreCase("inner"))) ) {
				throw new FailedPredicateException(input, "kwInner", "input.LT(1).getText().equalsIgnoreCase(\"inner\")");
			}
			Identifier953=(Token)match(input,Identifier,FOLLOW_Identifier_in_kwInner15236); 
			Identifier953_tree = (CommonTree)adaptor.create(Identifier953);
			adaptor.addChild(root_0, Identifier953_tree);

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "kwInner"

	// Delegated rules


	protected DFA9 dfa9 = new DFA9(this);
	protected DFA217 dfa217 = new DFA217(this);
	protected DFA252 dfa252 = new DFA252(this);
	protected DFA254 dfa254 = new DFA254(this);
	static final String DFA9_eotS =
		"\76\uffff";
	static final String DFA9_eofS =
		"\76\uffff";
	static final String DFA9_minS =
		"\1\33\1\27\1\uffff\1\27\3\uffff\1\27\4\uffff\2\27\60\uffff";
	static final String DFA9_maxS =
		"\1\u00dd\1\u00e2\1\uffff\1\u00e2\3\uffff\1\u00c7\4\uffff\2\u00dc\60\uffff";
	static final String DFA9_acceptS =
		"\2\uffff\1\2\1\uffff\1\6\1\7\2\uffff\1\11\1\20\1\21\1\22\2\uffff\1\14"+
		"\1\15\1\1\1\uffff\1\4\1\uffff\1\12\1\uffff\1\23\1\5\1\13\1\16\1\17\1\3"+
		"\1\uffff\1\24\1\10\4\uffff\1\27\5\uffff\1\30\1\25\10\uffff\1\31\1\26\10"+
		"\uffff\1\32";
	static final String DFA9_specialS =
		"\76\uffff}>";
	static final String[] DFA9_transitionS = {
			"\1\4\1\11\34\uffff\1\1\13\uffff\2\5\5\uffff\1\3\27\uffff\1\14\35\uffff"+
			"\1\12\6\uffff\1\10\44\uffff\1\15\14\uffff\1\7\36\uffff\1\13\2\uffff\1"+
			"\2",
			"\1\26\45\uffff\1\20\31\uffff\1\22\24\uffff\1\17\44\uffff\1\24\40\uffff"+
			"\1\20\23\uffff\1\22\3\uffff\1\16\27\uffff\1\24",
			"",
			"\1\35\45\uffff\1\33\56\uffff\1\31\105\uffff\1\33\23\uffff\1\27\3\uffff"+
			"\1\32\27\uffff\1\30",
			"",
			"",
			"",
			"\1\51\46\uffff\1\36\40\uffff\1\36\3\uffff\1\36\1\43\7\uffff\2\36\25"+
			"\uffff\1\36\26\uffff\1\36\30\uffff\1\36\22\uffff\2\36",
			"",
			"",
			"",
			"",
			"\1\63\2\uffff\2\52\35\uffff\1\52\22\uffff\1\52\37\uffff\1\52\25\uffff"+
			"\1\52\61\uffff\1\52\7\uffff\1\52\37\uffff\1\52",
			"\1\75\2\uffff\2\64\35\uffff\1\64\22\uffff\1\64\37\uffff\1\64\25\uffff"+
			"\1\64\61\uffff\1\64\7\uffff\1\64\37\uffff\1\64",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
	static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
	static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
	static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
	static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
	static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
	static final short[][] DFA9_transition;

	static {
		int numStates = DFA9_transitionS.length;
		DFA9_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
		}
	}

	protected class DFA9 extends DFA {

		public DFA9(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 9;
			this.eot = DFA9_eot;
			this.eof = DFA9_eof;
			this.min = DFA9_min;
			this.max = DFA9_max;
			this.accept = DFA9_accept;
			this.special = DFA9_special;
			this.transition = DFA9_transition;
		}
		@Override
		public String getDescription() {
			return "324:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );";
		}
	}

	static final String DFA217_eotS =
		"\76\uffff";
	static final String DFA217_eofS =
		"\14\uffff\1\1\61\uffff";
	static final String DFA217_minS =
		"\1\7\13\uffff\1\4\5\uffff\1\27\53\uffff";
	static final String DFA217_maxS =
		"\1\u01e3\13\uffff\1\u00f8\5\uffff\1\u00f8\53\uffff";
	static final String DFA217_acceptS =
		"\1\uffff\1\1\17\uffff\1\2\52\uffff\1\1\1\uffff";
	static final String DFA217_specialS =
		"\76\uffff}>";
	static final String[] DFA217_transitionS = {
			"\1\1\4\uffff\1\1\12\uffff\1\14\7\uffff\1\1\14\uffff\2\1\52\uffff\1\1"+
			"\20\uffff\1\1\33\uffff\1\1\4\uffff\1\1\1\uffff\1\1\70\uffff\1\1\16\uffff"+
			"\1\1\3\uffff\1\1\21\uffff\1\1\2\uffff\1\1\2\uffff\2\1\6\uffff\1\21\3"+
			"\1\u00e7\uffff\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\3\1\2\uffff\1\1\3\uffff\2\1\1\uffff\1\22\1\uffff\1\1\1\uffff\2\1\1"+
			"\uffff\1\1\5\uffff\1\1\2\uffff\1\1\16\uffff\1\1\32\uffff\1\1\25\uffff"+
			"\1\1\4\uffff\2\1\4\uffff\1\1\5\uffff\1\1\3\uffff\1\1\6\uffff\2\1\7\uffff"+
			"\1\1\4\uffff\1\1\6\uffff\2\1\24\uffff\3\1\6\uffff\2\1\2\uffff\1\1\11"+
			"\uffff\1\1\30\uffff\1\1\6\uffff\1\1\5\uffff\1\1\3\uffff\4\1\1\uffff\3"+
			"\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1",
			"",
			"",
			"",
			"",
			"",
			"\1\74\u00e0\uffff\1\21",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA217_eot = DFA.unpackEncodedString(DFA217_eotS);
	static final short[] DFA217_eof = DFA.unpackEncodedString(DFA217_eofS);
	static final char[] DFA217_min = DFA.unpackEncodedStringToUnsignedChars(DFA217_minS);
	static final char[] DFA217_max = DFA.unpackEncodedStringToUnsignedChars(DFA217_maxS);
	static final short[] DFA217_accept = DFA.unpackEncodedString(DFA217_acceptS);
	static final short[] DFA217_special = DFA.unpackEncodedString(DFA217_specialS);
	static final short[][] DFA217_transition;

	static {
		int numStates = DFA217_transitionS.length;
		DFA217_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA217_transition[i] = DFA.unpackEncodedString(DFA217_transitionS[i]);
		}
	}

	protected class DFA217 extends DFA {

		public DFA217(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 217;
			this.eot = DFA217_eot;
			this.eof = DFA217_eof;
			this.min = DFA217_min;
			this.max = DFA217_max;
			this.accept = DFA217_accept;
			this.special = DFA217_special;
			this.transition = DFA217_transition;
		}
		@Override
		public String getDescription() {
			return "1549:1: selectExpression : ( expression | tableAllColumns );";
		}
	}

	static final String DFA252_eotS =
		"\76\uffff";
	static final String DFA252_eofS =
		"\2\uffff\1\11\73\uffff";
	static final String DFA252_minS =
		"\1\7\1\uffff\1\4\73\uffff";
	static final String DFA252_maxS =
		"\1\u01e3\1\uffff\1\u00fa\73\uffff";
	static final String DFA252_acceptS =
		"\1\uffff\1\1\1\uffff\1\4\1\5\1\6\1\7\1\10\1\uffff\1\2\63\uffff\1\3";
	static final String DFA252_specialS =
		"\76\uffff}>";
	static final String[] DFA252_transitionS = {
			"\1\3\4\uffff\1\6\113\uffff\1\7\173\uffff\1\7\33\uffff\1\1\10\uffff\1"+
			"\4\1\2\u00e8\uffff\1\5",
			"",
			"\3\11\2\uffff\1\11\3\uffff\2\11\1\uffff\1\11\1\uffff\1\11\1\uffff\2"+
			"\11\1\uffff\1\11\5\uffff\1\11\2\uffff\2\11\15\uffff\1\11\25\uffff\1\11"+
			"\4\uffff\1\11\3\uffff\1\11\1\uffff\1\11\17\uffff\2\11\3\uffff\2\11\4"+
			"\uffff\1\11\5\uffff\1\11\3\uffff\1\11\1\uffff\1\11\3\uffff\3\11\7\uffff"+
			"\1\11\4\uffff\1\11\6\uffff\2\11\24\uffff\3\11\5\uffff\3\11\2\uffff\1"+
			"\11\11\uffff\1\11\16\uffff\1\11\11\uffff\1\11\6\uffff\1\11\4\uffff\2"+
			"\11\3\uffff\2\11\1\uffff\1\11\1\uffff\3\11\1\uffff\1\11\2\uffff\2\11"+
			"\2\uffff\1\11\1\uffff\1\75",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA252_eot = DFA.unpackEncodedString(DFA252_eotS);
	static final short[] DFA252_eof = DFA.unpackEncodedString(DFA252_eofS);
	static final char[] DFA252_min = DFA.unpackEncodedStringToUnsignedChars(DFA252_minS);
	static final char[] DFA252_max = DFA.unpackEncodedStringToUnsignedChars(DFA252_maxS);
	static final short[] DFA252_accept = DFA.unpackEncodedString(DFA252_acceptS);
	static final short[] DFA252_special = DFA.unpackEncodedString(DFA252_specialS);
	static final short[][] DFA252_transition;

	static {
		int numStates = DFA252_transitionS.length;
		DFA252_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA252_transition[i] = DFA.unpackEncodedString(DFA252_transitionS[i]);
		}
	}

	protected class DFA252 extends DFA {

		public DFA252(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 252;
			this.eot = DFA252_eot;
			this.eof = DFA252_eof;
			this.min = DFA252_min;
			this.max = DFA252_max;
			this.accept = DFA252_accept;
			this.special = DFA252_special;
			this.transition = DFA252_transition;
		}
		@Override
		public String getDescription() {
			return "1854:1: constant : ( Number | StringLiteral | stringLiteralSequence | BigintLiteral | SmallintLiteral | TinyintLiteral | charSetStringLiteral | booleanValue );";
		}
	}

	static final String DFA254_eotS =
		"\125\uffff";
	static final String DFA254_eofS =
		"\12\uffff\1\20\112\uffff";
	static final String DFA254_minS =
		"\1\7\11\uffff\1\4\1\uffff\1\7\110\uffff";
	static final String DFA254_maxS =
		"\1\u01e3\11\uffff\1\u00f8\1\uffff\1\u01e3\110\uffff";
	static final String DFA254_acceptS =
		"\1\uffff\1\1\1\2\10\uffff\1\4\1\uffff\1\3\1\10\1\uffff\1\7\63\uffff\1"+
		"\5\17\uffff\1\6";
	static final String DFA254_specialS =
		"\125\uffff}>";
	static final String[] DFA254_transitionS = {
			"\1\2\4\uffff\1\2\12\uffff\1\12\7\uffff\1\15\14\uffff\1\14\1\13\52\uffff"+
			"\1\2\20\uffff\1\15\33\uffff\1\15\6\uffff\1\1\70\uffff\1\15\16\uffff\1"+
			"\2\3\uffff\1\15\21\uffff\1\16\5\uffff\1\2\10\uffff\2\2\u00e8\uffff\1"+
			"\2",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\3\20\2\uffff\1\20\3\uffff\2\20\1\uffff\1\20\1\uffff\1\20\1\uffff\2"+
			"\20\1\uffff\1\20\5\uffff\1\20\2\uffff\2\20\15\uffff\1\20\25\uffff\1\20"+
			"\4\uffff\1\20\3\uffff\1\20\1\uffff\1\20\17\uffff\2\20\3\uffff\2\20\4"+
			"\uffff\1\20\5\uffff\1\20\3\uffff\1\20\1\uffff\1\20\3\uffff\3\20\7\uffff"+
			"\1\20\4\uffff\1\20\6\uffff\2\20\24\uffff\3\20\5\uffff\3\20\2\uffff\1"+
			"\20\11\uffff\1\20\16\uffff\1\20\11\uffff\1\20\6\uffff\1\20\4\uffff\2"+
			"\20\3\uffff\2\20\1\15\1\20\1\uffff\3\20\1\uffff\1\20\2\uffff\2\20\2\uffff"+
			"\1\20",
			"",
			"\1\104\4\uffff\1\104\12\uffff\1\104\7\uffff\1\104\14\uffff\2\104\52"+
			"\uffff\1\104\20\uffff\1\104\33\uffff\1\104\4\uffff\1\104\1\uffff\1\104"+
			"\70\uffff\1\104\16\uffff\1\104\3\uffff\1\104\12\uffff\1\124\6\uffff\1"+
			"\104\2\uffff\1\104\2\uffff\2\104\7\uffff\3\104\u00e7\uffff\1\104",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA254_eot = DFA.unpackEncodedString(DFA254_eotS);
	static final short[] DFA254_eof = DFA.unpackEncodedString(DFA254_eofS);
	static final char[] DFA254_min = DFA.unpackEncodedStringToUnsignedChars(DFA254_minS);
	static final char[] DFA254_max = DFA.unpackEncodedStringToUnsignedChars(DFA254_maxS);
	static final short[] DFA254_accept = DFA.unpackEncodedString(DFA254_acceptS);
	static final short[] DFA254_special = DFA.unpackEncodedString(DFA254_specialS);
	static final short[][] DFA254_transition;

	static {
		int numStates = DFA254_transitionS.length;
		DFA254_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA254_transition[i] = DFA.unpackEncodedString(DFA254_transitionS[i]);
		}
	}

	protected class DFA254 extends DFA {

		public DFA254(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 254;
			this.eot = DFA254_eot;
			this.eof = DFA254_eof;
			this.min = DFA254_min;
			this.max = DFA254_max;
			this.accept = DFA254_accept;
			this.special = DFA254_special;
			this.transition = DFA254_transition;
		}
		@Override
		public String getDescription() {
			return "1887:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN ! expression RPAREN !);";
		}
	}

	public static final BitSet FOLLOW_explainStatement_in_statement766 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_statement768 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_execStatement_in_statement773 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_statement775 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXPLAIN_in_explainStatement796 = new BitSet(new long[]{0x0200000018000000L,0x8002041180601060L,0x0810410000000224L,0x0000000024000000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_explainStatement801 = new BitSet(new long[]{0x0200000018000000L,0x8002041100201060L,0x0810410000000224L,0x0000000024000000L});
	public static final BitSet FOLLOW_KW_FORMATTED_in_explainStatement805 = new BitSet(new long[]{0x0200000018000000L,0x8002041100201060L,0x0810410000000224L,0x0000000024000000L});
	public static final BitSet FOLLOW_execStatement_in_explainStatement809 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_queryStatementExpression_in_execStatement851 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_loadStatement_in_execStatement859 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportStatement_in_execStatement867 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importStatement_in_execStatement875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ddlStatement_in_execStatement883 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOAD_in_loadStatement910 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_KW_DATA_in_loadStatement912 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_LOCAL_in_loadStatement917 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_KW_INPATH_in_loadStatement921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_loadStatement926 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_KW_OVERWRITE_in_loadStatement932 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_INTO_in_loadStatement936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_loadStatement938 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableOrPartition_in_loadStatement943 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXPORT_in_exportStatement995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_exportStatement997 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableOrPartition_in_exportStatement1002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_KW_TO_in_exportStatement1005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_exportStatement1010 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IMPORT_in_importStatement1051 = new BitSet(new long[]{0x0000000000000000L,0x0000000100800000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_EXTERNAL_in_importStatement1057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_importStatement1061 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableOrPartition_in_importStatement1066 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_FROM_in_importStatement1071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_importStatement1076 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_tableLocation_in_importStatement1079 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createDatabaseStatement_in_ddlStatement1131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_switchDatabaseStatement_in_ddlStatement1139 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropDatabaseStatement_in_ddlStatement1147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createTableStatement_in_ddlStatement1155 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropTableStatement_in_ddlStatement1163 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatement_in_ddlStatement1171 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_descStatement_in_ddlStatement1179 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showStatement_in_ddlStatement1187 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_metastoreCheck_in_ddlStatement1195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createViewStatement_in_ddlStatement1203 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropViewStatement_in_ddlStatement1211 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createFunctionStatement_in_ddlStatement1219 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createIndexStatement_in_ddlStatement1227 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropIndexStatement_in_ddlStatement1235 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropFunctionStatement_in_ddlStatement1243 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_analyzeStatement_in_ddlStatement1251 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lockStatement_in_ddlStatement1259 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unlockStatement_in_ddlStatement1267 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createRoleStatement_in_ddlStatement1275 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropRoleStatement_in_ddlStatement1283 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_grantPrivileges_in_ddlStatement1291 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_revokePrivileges_in_ddlStatement1299 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showGrants_in_ddlStatement1307 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showRoleGrants_in_ddlStatement1315 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_grantRole_in_ddlStatement1323 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_revokeRole_in_ddlStatement1331 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IF_in_ifExists1358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_EXISTS_in_ifExists1360 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RESTRICT_in_restrictOrCascade1397 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CASCADE_in_restrictOrCascade1415 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IF_in_ifNotExists1452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_NOT_in_ifNotExists1454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_EXISTS_in_ifNotExists1456 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_OR_in_orReplace1493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_KW_REPLACE_in_orReplace1495 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createDatabaseStatement1533 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_createDatabaseStatement1536 = new BitSet(new long[]{0x0000000000800000L,0x0000020000000000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_createDatabaseStatement1538 = new BitSet(new long[]{0x0000000000800000L,0x0000020000000000L});
	public static final BitSet FOLLOW_ifNotExists_in_createDatabaseStatement1549 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_createDatabaseStatement1562 = new BitSet(new long[]{0x0020000000000002L,0x0000000000000000L,0x0000000000000002L,0x0000004000000000L});
	public static final BitSet FOLLOW_databaseComment_in_createDatabaseStatement1572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L,0x0000004000000000L});
	public static final BitSet FOLLOW_dbLocation_in_createDatabaseStatement1583 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_createDatabaseStatement1595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement1597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_dbProperties_in_createDatabaseStatement1601 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCATION_in_dbLocation1662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_dbLocation1666 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_dbProperties1708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_dbPropertiesList_in_dbProperties1710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_dbProperties1712 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList1753 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_dbPropertiesList1756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList1758 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_USE_in_switchDatabaseStatement1797 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_switchDatabaseStatement1799 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropDatabaseStatement1838 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_dropDatabaseStatement1841 = new BitSet(new long[]{0x0000000000800000L,0x0000020000000000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_dropDatabaseStatement1843 = new BitSet(new long[]{0x0000000000800000L,0x0000020000000000L});
	public static final BitSet FOLLOW_ifExists_in_dropDatabaseStatement1846 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_dropDatabaseStatement1849 = new BitSet(new long[]{0x0000080000000002L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_restrictOrCascade_in_dropDatabaseStatement1851 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_databaseComment1897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_databaseComment1901 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createTableStatement1941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_EXTERNAL_in_createTableStatement1946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_createTableStatement1950 = new BitSet(new long[]{0x0000000000800000L,0x0000020000000000L});
	public static final BitSet FOLLOW_ifNotExists_in_createTableStatement1952 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableName_in_createTableStatement1957 = new BitSet(new long[]{0x0021000100000002L,0x1000000000000000L,0x0002000002000002L,0x0000040000000204L});
	public static final BitSet FOLLOW_KW_LIKE_in_createTableStatement1970 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableName_in_createTableStatement1974 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_tableLocation_in_createTableStatement1985 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_createTableStatement1998 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnNameTypeList_in_createTableStatement2000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_createTableStatement2002 = new BitSet(new long[]{0x0021000100000002L,0x0000000000000000L,0x0002000002000002L,0x0000000000000204L});
	public static final BitSet FOLLOW_tableComment_in_createTableStatement2015 = new BitSet(new long[]{0x0001000100000002L,0x0000000000000000L,0x0002000002000002L,0x0000000000000204L});
	public static final BitSet FOLLOW_tablePartition_in_createTableStatement2027 = new BitSet(new long[]{0x0001000100000002L,0x0000000000000000L,0x0002000000000002L,0x0000000000000204L});
	public static final BitSet FOLLOW_tableBuckets_in_createTableStatement2039 = new BitSet(new long[]{0x0000000100000002L,0x0000000000000000L,0x0002000000000002L,0x0000000000000204L});
	public static final BitSet FOLLOW_tableRowFormat_in_createTableStatement2051 = new BitSet(new long[]{0x0000000100000002L,0x0000000000000000L,0x0000000000000002L,0x0000000000000204L});
	public static final BitSet FOLLOW_tableFileFormat_in_createTableStatement2063 = new BitSet(new long[]{0x0000000100000002L,0x0000000000000000L,0x0000000000000002L,0x0000000000000200L});
	public static final BitSet FOLLOW_tableLocation_in_createTableStatement2075 = new BitSet(new long[]{0x0000000100000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createTableStatement2087 = new BitSet(new long[]{0x0000000100000002L});
	public static final BitSet FOLLOW_KW_AS_in_createTableStatement2100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010010000000020L});
	public static final BitSet FOLLOW_selectStatement_in_createTableStatement2102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createIndexStatement2293 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_KW_INDEX_in_createIndexStatement2295 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_createIndexStatement2299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_ON_in_createIndexStatement2307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_createIndexStatement2309 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableName_in_createIndexStatement2313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_createIndexStatement2315 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnNameList_in_createIndexStatement2319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_createIndexStatement2321 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_KW_AS_in_createIndexStatement2329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_createIndexStatement2333 = new BitSet(new long[]{0x0020000000000002L,0x0000090000000000L,0x0002000000000002L,0x0000004000000204L});
	public static final BitSet FOLLOW_autoRebuild_in_createIndexStatement2341 = new BitSet(new long[]{0x0020000000000002L,0x0000090000000000L,0x0002000000000002L,0x0000000000000204L});
	public static final BitSet FOLLOW_indexPropertiesPrefixed_in_createIndexStatement2350 = new BitSet(new long[]{0x0020000000000002L,0x0000080000000000L,0x0002000000000002L,0x0000000000000204L});
	public static final BitSet FOLLOW_indexTblName_in_createIndexStatement2359 = new BitSet(new long[]{0x0020000000000002L,0x0000000000000000L,0x0002000000000002L,0x0000000000000204L});
	public static final BitSet FOLLOW_tableRowFormat_in_createIndexStatement2368 = new BitSet(new long[]{0x0020000000000002L,0x0000000000000000L,0x0000000000000002L,0x0000000000000204L});
	public static final BitSet FOLLOW_tableFileFormat_in_createIndexStatement2377 = new BitSet(new long[]{0x0020000000000002L,0x0000000000000000L,0x0000000000000002L,0x0000000000000200L});
	public static final BitSet FOLLOW_tableLocation_in_createIndexStatement2386 = new BitSet(new long[]{0x0020000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createIndexStatement2395 = new BitSet(new long[]{0x0020000000000002L});
	public static final BitSet FOLLOW_indexComment_in_createIndexStatement2404 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_indexComment2561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_indexComment2565 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_autoRebuild2606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_DEFERRED_in_autoRebuild2608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_REBUILD_in_autoRebuild2610 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IN_in_indexTblName2646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_indexTblName2648 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableName_in_indexTblName2652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed2699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_indexProperties_in_indexPropertiesPrefixed2702 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_indexProperties2735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_indexPropertiesList_in_indexProperties2737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_indexProperties2739 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList2780 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_indexPropertiesList2783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList2785 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_DROP_in_dropIndexStatement2823 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_KW_INDEX_in_dropIndexStatement2825 = new BitSet(new long[]{0x0000000000800000L,0x0000020000000000L});
	public static final BitSet FOLLOW_ifExists_in_dropIndexStatement2827 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_dropIndexStatement2832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_ON_in_dropIndexStatement2834 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableName_in_dropIndexStatement2838 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropTableStatement2883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_dropTableStatement2885 = new BitSet(new long[]{0x0000000000800000L,0x0000020000000000L});
	public static final BitSet FOLLOW_ifExists_in_dropTableStatement2887 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableName_in_dropTableStatement2890 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_alterStatement2928 = new BitSet(new long[]{0x2000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000400000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_alterStatement2953 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_alterTableStatementSuffix_in_alterStatement2956 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VIEW_in_alterStatement2980 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_alterViewStatementSuffix_in_alterStatement2983 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INDEX_in_alterStatement3007 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_alterIndexStatementSuffix_in_alterStatement3010 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATABASE_in_alterStatement3034 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_alterDatabaseStatementSuffix_in_alterStatement3037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix3074 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddCol_in_alterTableStatementSuffix3082 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRenameCol_in_alterTableStatementSuffix3090 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix3098 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix3106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix3114 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix3122 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix3130 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix3138 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterTblPartitionStatement_in_alterTableStatementSuffix3146 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixClusterbySortby_in_alterTableStatementSuffix3154 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix3181 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix3189 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix3213 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix3237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_alterIndexStatementSuffix3282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_ON_in_alterIndexStatementSuffix3291 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_alterIndexStatementSuffix3295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200002001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterIndexStatementSuffix3304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200002000000000L});
	public static final BitSet FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix3319 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterIndexStatementSuffix3353 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix3355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_indexProperties_in_alterIndexStatementSuffix3363 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix3415 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_alterDatabaseSuffixProperties3444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixProperties3446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties3448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_dbProperties_in_alterDatabaseSuffixProperties3450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRename3494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRename3496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRename3498 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRename3502 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixAddCol3545 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddCol3550 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol3556 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol3559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alterStatementSuffixAddCol3561 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol3563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alterStatementSuffixAddCol3565 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRenameCol3638 = new BitSet(new long[]{0x0000400000000000L});
	public static final BitSet FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol3640 = new BitSet(new long[]{0x0008000000800000L});
	public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol3642 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRenameCol3647 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRenameCol3651 = new BitSet(new long[]{0x8000007080000000L,0x0004000020000801L,0x2000000000000020L,0x000000000100C030L});
	public static final BitSet FOLLOW_colType_in_alterStatementSuffixRenameCol3653 = new BitSet(new long[]{0x0020000002000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol3656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol3660 = new BitSet(new long[]{0x0000000002000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol3664 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FIRST_in_alterStatementChangeColPosition3710 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_AFTER_in_alterStatementChangeColPosition3712 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_alterStatementChangeColPosition3716 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixAddPartitions3768 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions3770 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions3772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions3775 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000002L});
	public static final BitSet FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions3777 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions3781 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000002L});
	public static final BitSet FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions3783 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixTouch3836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch3838 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixTouch3841 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixArchive3887 = new BitSet(new long[]{0x0000000040000000L});
	public static final BitSet FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive3889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixArchive3892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixUnArchive3938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive3940 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive3943 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_LOCATION_in_partitionLocation3995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_partitionLocation3999 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixDropPartitions4035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions4037 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ifExists_in_alterStatementSuffixDropPartitions4039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixDropPartitions4042 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_alterStatementSuffixDropPartitions4045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixDropPartitions4047 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixProperties4096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixProperties4098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties4100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties4102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_alterViewSuffixProperties4146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterViewSuffixProperties4148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties4150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties4152 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties4196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties4200 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties4203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_tablePartitionPrefix4275 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_tablePartitionPrefix4277 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tablePartitionPrefix_in_alterTblPartitionStatement4315 = new BitSet(new long[]{0x0080000000000000L,0x0000000000008100L,0x0200040000000000L});
	public static final BitSet FOLLOW_alterTblPartitionStatementSuffix_in_alterTblPartitionStatement4317 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix4352 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix4358 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixProtectMode_in_alterTblPartitionStatementSuffix4364 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix4370 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4382 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixFileFormat4404 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat4406 = new BitSet(new long[]{0x0000000000800000L,0x0001000000000000L,0x0040000200000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_fileFormat_in_alterStatementSuffixFileFormat4408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixLocation4439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation4441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixLocation4445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterProtectMode_in_alterStatementSuffixProtectMode4481 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart4520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRenamePart4522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart4524 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles4562 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ENABLE_in_alterProtectMode4599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800004800L});
	public static final BitSet FOLLOW_alterProtectModeMode_in_alterProtectMode4601 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DISABLE_in_alterProtectMode4618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800004800L});
	public static final BitSet FOLLOW_alterProtectModeMode_in_alterProtectMode4620 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_OFFLINE_in_alterProtectModeMode4656 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NO_DROP_in_alterProtectModeMode4671 = new BitSet(new long[]{0x0000080000000002L});
	public static final BitSet FOLLOW_KW_CASCADE_in_alterProtectModeMode4673 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_READONLY_in_alterProtectModeMode4691 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby4723 = new BitSet(new long[]{0x0001000000000000L});
	public static final BitSet FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby4725 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby4744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby4746 = new BitSet(new long[]{0x0001000000000000L});
	public static final BitSet FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby4748 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SEQUENCEFILE_in_fileFormat4781 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TEXTFILE_in_fileFormat4796 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RCFILE_in_fileFormat4811 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INPUTFORMAT_in_fileFormat4826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat4830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_fileFormat4832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat4836 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
	public static final BitSet FOLLOW_KW_INPUTDRIVER_in_fileFormat4839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat4843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_fileFormat4845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat4849 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_fileFormat4887 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_tabTypeExpr4923 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_DOT_in_tabTypeExpr4926 = new BitSet(new long[]{0x0000000000800000L,0x0200000000002000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_set_in_tabTypeExpr4929 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_tabTypeExpr_in_partTypeExpr4972 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_partTypeExpr4974 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement5014 = new BitSet(new long[]{0x0000000000800000L,0x0000000080400000L});
	public static final BitSet FOLLOW_KW_DESC_in_descStatement5016 = new BitSet(new long[]{0x0000000000800000L,0x0000000080400000L});
	public static final BitSet FOLLOW_KW_FORMATTED_in_descStatement5022 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement5026 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_partTypeExpr_in_descStatement5033 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement5056 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_DESC_in_descStatement5058 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_descStatement5061 = new BitSet(new long[]{0x00001070A0B46070L,0x10040A0020400800L,0x2001020000020420L,0x0D02E30801008030L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement5063 = new BitSet(new long[]{0x00001070A0B46070L,0x10040A0020000800L,0x2001020000020420L,0x0D02E30801008030L});
	public static final BitSet FOLLOW_descFuncNames_in_descStatement5069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement5091 = new BitSet(new long[]{0x2000000000000000L});
	public static final BitSet FOLLOW_KW_DESC_in_descStatement5093 = new BitSet(new long[]{0x2000000000000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_descStatement5096 = new BitSet(new long[]{0x0000000000800000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement5098 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_descStatement5104 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ANALYZE_in_analyzeStatement5144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_analyzeStatement5146 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableOrPartition_in_analyzeStatement5151 = new BitSet(new long[]{0x0040000000000000L});
	public static final BitSet FOLLOW_KW_COMPUTE_in_analyzeStatement5154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STATISTICS_in_analyzeStatement5156 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement5192 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_KW_DATABASES_in_showStatement5195 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
	public static final BitSet FOLLOW_KW_SCHEMAS_in_showStatement5197 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement5201 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5203 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement5222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KW_TABLES_in_showStatement5224 = new BitSet(new long[]{0x0000000000800002L,0x1000080100000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement5228 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement5230 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_showStatement5235 = new BitSet(new long[]{0x0000000000800002L,0x1000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement5240 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5242 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5244 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement5272 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_KW_FUNCTIONS_in_showStatement5274 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5276 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement5295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_KW_PARTITIONS_in_showStatement5297 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_showStatement5299 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_showStatement5301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement5321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_showStatement5323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement5325 = new BitSet(new long[]{0x0000000000000000L,0x1000080100000000L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement5329 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement5331 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_showStatement5336 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement5340 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5342 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_showStatement5344 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement5372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_LOCKS_in_showStatement5374 = new BitSet(new long[]{0x0000000000800002L,0x0000000000400000L});
	public static final BitSet FOLLOW_partTypeExpr_in_showStatement5379 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement5386 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement5410 = new BitSet(new long[]{0x0000000000000000L,0x0000300080000000L});
	public static final BitSet FOLLOW_KW_FORMATTED_in_showStatement5415 = new BitSet(new long[]{0x0000000000000000L,0x0000300000000000L});
	public static final BitSet FOLLOW_KW_INDEX_in_showStatement5420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_INDEXES_in_showStatement5422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_ON_in_showStatement5425 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5427 = new BitSet(new long[]{0x0000000000000002L,0x0000080100000000L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement5431 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement5433 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_showStatement5438 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCK_in_lockStatement5487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_lockStatement5489 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableName_in_lockStatement5491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0400000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_lockStatement5493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0400000000000000L});
	public static final BitSet FOLLOW_lockMode_in_lockStatement5496 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNLOCK_in_unlockStatement5567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_unlockStatement5569 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableName_in_unlockStatement5571 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_unlockStatement5573 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createRoleStatement5613 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_kwRole_in_createRoleStatement5615 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_createRoleStatement5619 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropRoleStatement5659 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_kwRole_in_dropRoleStatement5661 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_dropRoleStatement5665 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GRANT_in_grantPrivileges5705 = new BitSet(new long[]{0x020000000C000000L,0x0000100000001000L,0x1010000000000004L,0x0000000010000000L});
	public static final BitSet FOLLOW_privilegeList_in_grantPrivileges5709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000010000L});
	public static final BitSet FOLLOW_privilegeObject_in_grantPrivileges5717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_KW_TO_in_grantPrivileges5726 = new BitSet(new long[]{0x0000000000800000L,0x0000002000000000L});
	public static final BitSet FOLLOW_principalSpecification_in_grantPrivileges5728 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_grantPrivileges5737 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_withOption_in_grantPrivileges5739 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REVOKE_in_revokePrivileges5789 = new BitSet(new long[]{0x020000000C000000L,0x0000100000001000L,0x1010000000000004L,0x0000000010000000L});
	public static final BitSet FOLLOW_privilegeList_in_revokePrivileges5791 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_privilegeObject_in_revokePrivileges5793 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_FROM_in_revokePrivileges5796 = new BitSet(new long[]{0x0000000000800000L,0x0000002000000000L});
	public static final BitSet FOLLOW_principalSpecification_in_revokePrivileges5798 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GRANT_in_grantRole5842 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_kwRole_in_grantRole5844 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_grantRole5846 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_COMMA_in_grantRole5849 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_grantRole5851 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_KW_TO_in_grantRole5855 = new BitSet(new long[]{0x0000000000800000L,0x0000002000000000L});
	public static final BitSet FOLLOW_principalSpecification_in_grantRole5857 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REVOKE_in_revokeRole5899 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_kwRole_in_revokeRole5901 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_revokeRole5903 = new BitSet(new long[]{0x0000000000000200L,0x0000000100000000L});
	public static final BitSet FOLLOW_COMMA_in_revokeRole5906 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_revokeRole5908 = new BitSet(new long[]{0x0000000000000200L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_FROM_in_revokeRole5912 = new BitSet(new long[]{0x0000000000800000L,0x0000002000000000L});
	public static final BitSet FOLLOW_principalSpecification_in_revokeRole5914 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showRoleGrants5956 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_kwRole_in_showRoleGrants5958 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_KW_GRANT_in_showRoleGrants5960 = new BitSet(new long[]{0x0000000000800000L,0x0000002000000000L});
	public static final BitSet FOLLOW_principalName_in_showRoleGrants5962 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showGrants6001 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_KW_GRANT_in_showGrants6003 = new BitSet(new long[]{0x0000000000800000L,0x0000002000000000L});
	public static final BitSet FOLLOW_principalName_in_showGrants6005 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_privilegeIncludeColObject_in_showGrants6007 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ON_in_privilegeIncludeColObject6050 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_privilegeIncludeColObject6055 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_privilegeIncludeColObject6057 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_privilegeIncludeColObject6060 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_privilegeIncludeColObject6063 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnNameList_in_privilegeIncludeColObject6067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_privilegeIncludeColObject6069 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_privilegeIncludeColObject6073 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ON_in_privilegeObject6124 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_privilegeObject6129 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_privilegeObject6131 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_privilegeObject6134 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_privilegeObject6136 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_privlegeDef_in_privilegeList6183 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_privilegeList6186 = new BitSet(new long[]{0x020000000C000000L,0x0000100000001000L,0x1010000000000004L,0x0000000010000000L});
	public static final BitSet FOLLOW_privlegeDef_in_privilegeList6188 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_privilegeType_in_privlegeDef6230 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_privlegeDef6233 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnNameList_in_privlegeDef6237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_privlegeDef6239 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALL_in_privilegeType6284 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_privilegeType6298 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_privilegeType6312 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_privilegeType6326 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_privilegeType6340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INDEX_in_privilegeType6354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCK_in_privilegeType6368 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SELECT_in_privilegeType6382 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_DATABASE_in_privilegeType6396 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_principalName_in_principalSpecification6429 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_principalSpecification6432 = new BitSet(new long[]{0x0000000000800000L,0x0000002000000000L});
	public static final BitSet FOLLOW_principalName_in_principalSpecification6434 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_kwUser_in_principalName6472 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_principalName6474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GROUP_in_principalName6490 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_principalName6492 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_kwRole_in_principalName6508 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_principalName6510 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GRANT_in_withOption6545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_KW_OPTION_in_withOption6547 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MSCK_in_metastoreCheck6584 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000080000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_REPAIR_in_metastoreCheck6589 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_metastoreCheck6594 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_metastoreCheck6598 = new BitSet(new long[]{0x0000000000000202L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck6600 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_metastoreCheck6604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck6606 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_CREATE_in_createFunctionStatement6660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_createFunctionStatement6662 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_createFunctionStatement6664 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_createFunctionStatement6666 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_KW_AS_in_createFunctionStatement6668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_createFunctionStatement6670 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropFunctionStatement6711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_dropFunctionStatement6713 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_dropFunctionStatement6715 = new BitSet(new long[]{0x0000000000800000L,0x0000020000000000L});
	public static final BitSet FOLLOW_ifExists_in_dropFunctionStatement6717 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_dropFunctionStatement6720 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createViewStatement6762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000400000000L});
	public static final BitSet FOLLOW_orReplace_in_createViewStatement6765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_createViewStatement6769 = new BitSet(new long[]{0x0000000000800000L,0x0000020000000000L});
	public static final BitSet FOLLOW_ifNotExists_in_createViewStatement6772 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableName_in_createViewStatement6778 = new BitSet(new long[]{0x0020000100000000L,0x0000000000000000L,0x0000000002000000L,0x0000040000000200L});
	public static final BitSet FOLLOW_LPAREN_in_createViewStatement6789 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnNameCommentList_in_createViewStatement6791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_createViewStatement6793 = new BitSet(new long[]{0x0020000100000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_tableComment_in_createViewStatement6797 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_viewPartition_in_createViewStatement6800 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createViewStatement6811 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_KW_AS_in_createViewStatement6822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010010000000020L});
	public static final BitSet FOLLOW_selectStatement_in_createViewStatement6832 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTITIONED_in_viewPartition6955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_ON_in_viewPartition6957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_viewPartition6959 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnNameList_in_viewPartition6961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_viewPartition6963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropViewStatement7002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_dropViewStatement7004 = new BitSet(new long[]{0x0000000000800000L,0x0000020000000000L});
	public static final BitSet FOLLOW_ifExists_in_dropViewStatement7006 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_viewName_in_dropViewStatement7009 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_tableComment7088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableComment7092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTITIONED_in_tablePartition7129 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tablePartition7131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_tablePartition7133 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnNameTypeList_in_tablePartition7135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tablePartition7137 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CLUSTERED_in_tableBuckets7182 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableBuckets7184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_tableBuckets7186 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnNameList_in_tableBuckets7190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableBuckets7192 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_KW_SORTED_in_tableBuckets7195 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableBuckets7197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_tableBuckets7199 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnNameOrderList_in_tableBuckets7203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableBuckets7205 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_INTO_in_tableBuckets7209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_Number_in_tableBuckets7213 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_KW_BUCKETS_in_tableBuckets7215 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatSerde_in_rowFormat7262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatDelimited_in_rowFormat7278 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RECORDREADER_in_recordReader7327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_recordReader7329 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RECORDWRITER_in_recordWriter7378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_recordWriter7380 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROW_in_rowFormatSerde7429 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatSerde7431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_SERDE_in_rowFormatSerde7433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_rowFormatSerde7437 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_rowFormatSerde7440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde7442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_tableProperties_in_rowFormatSerde7446 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROW_in_rowFormatDelimited7498 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatDelimited7500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_DELIMITED_in_rowFormatDelimited7502 = new BitSet(new long[]{0x0004000000000002L,0x4000000004000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited7504 = new BitSet(new long[]{0x0004000000000002L,0x4000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited7507 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited7510 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
	public static final BitSet FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited7513 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatDelimited_in_tableRowFormat7569 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatSerde_in_tableRowFormat7589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed7636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_tableProperties_in_tablePropertiesPrefixed7639 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_tableProperties7672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_tablePropertiesList_in_tableProperties7674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableProperties7676 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList7717 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_tablePropertiesList7720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList7722 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty7768 = new BitSet(new long[]{0x0000000000040000L});
	public static final BitSet FOLLOW_EQUAL_in_keyValueProperty7770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty7774 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier7819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier7821 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier7823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier7827 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
	public static final BitSet FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier7830 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier7832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier7836 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier7888 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier7890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier7892 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier7894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier7898 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier7944 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier7946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier7948 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier7950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier7954 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier8000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier8002 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier8004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier8008 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8054 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat8056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_SEQUENCEFILE_in_tableFileFormat8058 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8073 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat8075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_KW_TEXTFILE_in_tableFileFormat8077 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8092 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat8094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_RCFILE_in_tableFileFormat8096 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8111 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat8113 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_KW_INPUTFORMAT_in_tableFileFormat8115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat8119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat8121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat8125 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
	public static final BitSet FOLLOW_KW_INPUTDRIVER_in_tableFileFormat8128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat8132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat8134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat8138 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8176 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableFileFormat8178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat8182 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_tableFileFormat8194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat8196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_tableProperties_in_tableFileFormat8200 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8231 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat8233 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_tableFileFormat8237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCATION_in_tableLocation8285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableLocation8289 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList8325 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameTypeList8328 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList8330 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList8368 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameColonTypeList8371 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList8373 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_columnName_in_columnNameList8411 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameList8414 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnName_in_columnNameList8416 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_Identifier_in_columnName8460 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList8487 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameOrderList8490 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList8492 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_Identifier_in_columnNameOrder8530 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_ASC_in_columnNameOrder8535 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DESC_in_columnNameOrder8541 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList8613 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameCommentList8616 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList8618 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_Identifier_in_columnNameComment8658 = new BitSet(new long[]{0x0020000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameComment8661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameComment8665 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_columnRefOrder8713 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_ASC_in_columnRefOrder8718 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DESC_in_columnRefOrder8724 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_columnNameType8798 = new BitSet(new long[]{0x8000007080000000L,0x0004000020000801L,0x2000000000000020L,0x000000000100C030L});
	public static final BitSet FOLLOW_colType_in_columnNameType8800 = new BitSet(new long[]{0x0020000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameType8803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameType8807 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_columnNameColonType8893 = new BitSet(new long[]{0x0000000000000100L});
	public static final BitSet FOLLOW_COLON_in_columnNameColonType8895 = new BitSet(new long[]{0x8000007080000000L,0x0004000020000801L,0x2000000000000020L,0x000000000100C030L});
	public static final BitSet FOLLOW_colType_in_columnNameColonType8897 = new BitSet(new long[]{0x0020000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameColonType8900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameColonType8904 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_colType8988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_colType_in_colTypeList9015 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_colTypeList9018 = new BitSet(new long[]{0x8000007080000000L,0x0004000020000801L,0x2000000000000020L,0x000000000100C030L});
	public static final BitSet FOLLOW_colType_in_colTypeList9020 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_primitiveType_in_type9048 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_listType_in_type9056 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_structType_in_type9064 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mapType_in_type9072 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unionType_in_type9080 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TINYINT_in_primitiveType9102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SMALLINT_in_primitiveType9123 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INT_in_primitiveType9143 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_BIGINT_in_primitiveType9168 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_BOOLEAN_in_primitiveType9190 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FLOAT_in_primitiveType9211 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DOUBLE_in_primitiveType9234 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATE_in_primitiveType9256 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATETIME_in_primitiveType9280 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TIMESTAMP_in_primitiveType9300 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STRING_in_primitiveType9319 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_BINARY_in_primitiveType9341 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ARRAY_in_listType9382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_listType9384 = new BitSet(new long[]{0x8000007080000000L,0x0004000020000801L,0x2000000000000020L,0x000000000100C030L});
	public static final BitSet FOLLOW_type_in_listType9386 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_listType9388 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STRUCT_in_structType9425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_structType9427 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_columnNameColonTypeList_in_structType9429 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_structType9431 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MAP_in_mapType9466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_mapType9468 = new BitSet(new long[]{0x8000007000000000L,0x0004000020000801L,0x2000000000000000L,0x000000000000C010L});
	public static final BitSet FOLLOW_primitiveType_in_mapType9472 = new BitSet(new long[]{0x0000000000000200L});
	public static final BitSet FOLLOW_COMMA_in_mapType9474 = new BitSet(new long[]{0x8000007080000000L,0x0004000020000801L,0x2000000000000020L,0x000000000100C030L});
	public static final BitSet FOLLOW_type_in_mapType9478 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_mapType9480 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNIONTYPE_in_unionType9523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_unionType9525 = new BitSet(new long[]{0x8000007080000000L,0x0004000020000801L,0x2000000000000020L,0x000000000100C030L});
	public static final BitSet FOLLOW_colTypeList_in_unionType9527 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_unionType9529 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNION_in_queryOperator9564 = new BitSet(new long[]{0x0000000004000000L});
	public static final BitSet FOLLOW_KW_ALL_in_queryOperator9566 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_queryStatement_in_queryStatementExpression9590 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_queryOperator_in_queryStatementExpression9593 = new BitSet(new long[]{0x0000000000000000L,0x0002000100000000L,0x0010010000000020L});
	public static final BitSet FOLLOW_queryStatement_in_queryStatementExpression9596 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_fromClause_in_queryStatement9619 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0010010000000020L});
	public static final BitSet FOLLOW_body_in_queryStatement9629 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0010010000000020L});
	public static final BitSet FOLLOW_regular_body_in_queryStatement9651 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insertClause_in_regular_body9670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010010000000020L});
	public static final BitSet FOLLOW_selectClause_in_regular_body9675 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_fromClause_in_regular_body9680 = new BitSet(new long[]{0x0000800000000002L,0x2000006000000400L,0x4000000000040000L,0x0000001000000000L});
	public static final BitSet FOLLOW_whereClause_in_regular_body9685 = new BitSet(new long[]{0x0000800000000002L,0x2000006000000400L,0x4000000000040000L});
	public static final BitSet FOLLOW_groupByClause_in_regular_body9691 = new BitSet(new long[]{0x0000800000000002L,0x2000004000000400L,0x4000000000040000L});
	public static final BitSet FOLLOW_havingClause_in_regular_body9697 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000400L,0x4000000000040000L});
	public static final BitSet FOLLOW_orderByClause_in_regular_body9703 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000400L,0x4000000000000000L});
	public static final BitSet FOLLOW_clusterByClause_in_regular_body9709 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000400L,0x4000000000000000L});
	public static final BitSet FOLLOW_distributeByClause_in_regular_body9715 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_sortByClause_in_regular_body9721 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
	public static final BitSet FOLLOW_limitClause_in_regular_body9727 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectStatement_in_regular_body9820 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectClause_in_selectStatement9838 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_fromClause_in_selectStatement9843 = new BitSet(new long[]{0x0000800000000002L,0x2000006000000400L,0x4000000000040000L,0x0000001000000000L});
	public static final BitSet FOLLOW_whereClause_in_selectStatement9848 = new BitSet(new long[]{0x0000800000000002L,0x2000006000000400L,0x4000000000040000L});
	public static final BitSet FOLLOW_groupByClause_in_selectStatement9854 = new BitSet(new long[]{0x0000800000000002L,0x2000004000000400L,0x4000000000040000L});
	public static final BitSet FOLLOW_havingClause_in_selectStatement9860 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000400L,0x4000000000040000L});
	public static final BitSet FOLLOW_orderByClause_in_selectStatement9866 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000400L,0x4000000000000000L});
	public static final BitSet FOLLOW_clusterByClause_in_selectStatement9872 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000400L,0x4000000000000000L});
	public static final BitSet FOLLOW_distributeByClause_in_selectStatement9878 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_sortByClause_in_selectStatement9884 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
	public static final BitSet FOLLOW_limitClause_in_selectStatement9890 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insertClause_in_body10000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010010000000020L});
	public static final BitSet FOLLOW_selectClause_in_body10005 = new BitSet(new long[]{0x0000800000000002L,0x2000006000000400L,0x4000000000040000L,0x0000001000000000L});
	public static final BitSet FOLLOW_whereClause_in_body10010 = new BitSet(new long[]{0x0000800000000002L,0x2000006000000400L,0x4000000000040000L});
	public static final BitSet FOLLOW_groupByClause_in_body10016 = new BitSet(new long[]{0x0000800000000002L,0x2000004000000400L,0x4000000000040000L});
	public static final BitSet FOLLOW_havingClause_in_body10022 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000400L,0x4000000000040000L});
	public static final BitSet FOLLOW_orderByClause_in_body10028 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000400L,0x4000000000000000L});
	public static final BitSet FOLLOW_clusterByClause_in_body10034 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000400L,0x4000000000000000L});
	public static final BitSet FOLLOW_distributeByClause_in_body10040 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_sortByClause_in_body10046 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
	public static final BitSet FOLLOW_limitClause_in_body10052 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectClause_in_body10140 = new BitSet(new long[]{0x0000800000000002L,0x2000006000000400L,0x4000000000040000L,0x0000001000000000L});
	public static final BitSet FOLLOW_whereClause_in_body10145 = new BitSet(new long[]{0x0000800000000002L,0x2000006000000400L,0x4000000000040000L});
	public static final BitSet FOLLOW_groupByClause_in_body10151 = new BitSet(new long[]{0x0000800000000002L,0x2000004000000400L,0x4000000000040000L});
	public static final BitSet FOLLOW_havingClause_in_body10157 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000400L,0x4000000000040000L});
	public static final BitSet FOLLOW_orderByClause_in_body10163 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000400L,0x4000000000000000L});
	public static final BitSet FOLLOW_clusterByClause_in_body10169 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000400L,0x4000000000000000L});
	public static final BitSet FOLLOW_distributeByClause_in_body10175 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_sortByClause_in_body10181 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
	public static final BitSet FOLLOW_limitClause_in_body10187 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INSERT_in_insertClause10302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_KW_OVERWRITE_in_insertClause10304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000000001L,0x0000000000000040L});
	public static final BitSet FOLLOW_destination_in_insertClause10306 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INSERT_in_insertClause10321 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_INTO_in_insertClause10323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_TABLE_in_insertClause10325 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableOrPartition_in_insertClause10327 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCAL_in_destination10374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KW_DIRECTORY_in_destination10376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_destination10378 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DIRECTORY_in_destination10393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_destination10395 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLE_in_destination10410 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableOrPartition_in_destination10412 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LIMIT_in_limitClause10446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_Number_in_limitClause10450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SELECT_in_selectClause10491 = new BitSet(new long[]{0x0000300084805080L,0x0000020001000200L,0x0000000000001420L,0x0F03240001140020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_hintClause_in_selectClause10493 = new BitSet(new long[]{0x0000300084801080L,0x0000020001000200L,0x0000000000001420L,0x0F03240001140020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_KW_ALL_in_selectClause10499 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0F03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_KW_DISTINCT_in_selectClause10505 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0F03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_selectList_in_selectClause10509 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TRANSFORM_in_selectClause10543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_selectTrfmClause_in_selectClause10545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_trfmClause_in_selectClause10616 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectItem_in_selectList10659 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_selectList10663 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0F03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_selectItem_in_selectList10666 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_LPAREN_in_selectTrfmClause10705 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0F03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_selectExpressionList_in_selectTrfmClause10707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_selectTrfmClause10709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002008000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_rowFormat_in_selectTrfmClause10717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_recordWriter_in_selectTrfmClause10721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_USING_in_selectTrfmClause10727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_selectTrfmClause10729 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0002004000000000L});
	public static final BitSet FOLLOW_KW_AS_in_selectTrfmClause10737 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_selectTrfmClause10741 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_aliasList_in_selectTrfmClause10744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_columnNameTypeList_in_selectTrfmClause10748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_selectTrfmClause10751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002004000000000L});
	public static final BitSet FOLLOW_aliasList_in_selectTrfmClause10757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002004000000000L});
	public static final BitSet FOLLOW_columnNameTypeList_in_selectTrfmClause10761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002004000000000L});
	public static final BitSet FOLLOW_rowFormat_in_selectTrfmClause10773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_recordReader_in_selectTrfmClause10777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DIVIDE_in_hintClause10840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_STAR_in_hintClause10842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_PLUS_in_hintClause10844 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000000000000040L,0x0000000000000008L});
	public static final BitSet FOLLOW_hintList_in_hintClause10846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_STAR_in_hintClause10848 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_DIVIDE_in_hintClause10850 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hintItem_in_hintList10889 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_hintList10892 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000000000000040L,0x0000000000000008L});
	public static final BitSet FOLLOW_hintItem_in_hintList10894 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_hintName_in_hintItem10932 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_hintItem10935 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_hintArgs_in_hintItem10937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_hintItem10939 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MAPJOIN_in_hintName10983 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STREAMTABLE_in_hintName10995 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_HOLD_DDLTIME_in_hintName11007 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hintArgName_in_hintArgs11042 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_hintArgs11045 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_hintArgName_in_hintArgs11047 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_Identifier_in_hintArgName11089 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectExpression_in_selectItem11122 = new BitSet(new long[]{0x0000000100800002L});
	public static final BitSet FOLLOW_KW_AS_in_selectItem11127 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_selectItem11130 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_AS_in_selectItem11136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_selectItem11138 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_selectItem11140 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_COMMA_in_selectItem11143 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_selectItem11145 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_selectItem11149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MAP_in_trfmClause11199 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0F03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_selectExpressionList_in_trfmClause11204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002008000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_REDUCE_in_trfmClause11214 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0F03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_selectExpressionList_in_trfmClause11216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002008000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_rowFormat_in_trfmClause11226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_recordWriter_in_trfmClause11230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_USING_in_trfmClause11236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_trfmClause11238 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0002004000000000L});
	public static final BitSet FOLLOW_KW_AS_in_trfmClause11246 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_trfmClause11250 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_aliasList_in_trfmClause11253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_columnNameTypeList_in_trfmClause11257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_trfmClause11260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002004000000000L});
	public static final BitSet FOLLOW_aliasList_in_trfmClause11266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002004000000000L});
	public static final BitSet FOLLOW_columnNameTypeList_in_trfmClause11270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002004000000000L});
	public static final BitSet FOLLOW_rowFormat_in_trfmClause11282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_recordReader_in_trfmClause11286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_selectExpression11349 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableAllColumns_in_selectExpression11353 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectExpression_in_selectExpressionList11384 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_selectExpressionList11387 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0F03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_selectExpression_in_selectExpressionList11389 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_STAR_in_tableAllColumns11420 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableName_in_tableAllColumns11442 = new BitSet(new long[]{0x0000000000010000L});
	public static final BitSet FOLLOW_DOT_in_tableAllColumns11444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_STAR_in_tableAllColumns11446 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_tableOrColumn11494 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_expressionList11533 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_expressionList11536 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_expressionList11538 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_Identifier_in_aliasList11580 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_aliasList11583 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_aliasList11585 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_FROM_in_fromClause11629 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000040002000000L});
	public static final BitSet FOLLOW_joinSource_in_fromClause11631 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fromSource_in_joinSource11666 = new BitSet(new long[]{0x0000000000800002L,0x0880000200000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_joinToken_in_joinSource11670 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_fromSource_in_joinSource11673 = new BitSet(new long[]{0x0000000000800002L,0x0880000200000000L,0x0000800000008000L});
	public static final BitSet FOLLOW_KW_ON_in_joinSource11676 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_joinSource11679 = new BitSet(new long[]{0x0000000000800002L,0x0880000200000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_uniqueJoinToken_in_joinSource11692 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000020000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_uniqueJoinSource_in_joinSource11695 = new BitSet(new long[]{0x0000000000000200L});
	public static final BitSet FOLLOW_COMMA_in_joinSource11698 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000020000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_uniqueJoinSource_in_joinSource11701 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_PRESERVE_in_uniqueJoinSource11730 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_fromSource_in_uniqueJoinSource11733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_uniqueJoinExpr_in_uniqueJoinSource11735 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_uniqueJoinExpr11762 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_uniqueJoinExpr11766 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_COMMA_in_uniqueJoinExpr11769 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_uniqueJoinExpr11773 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_uniqueJoinExpr11777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNIQUEJOIN_in_uniqueJoinToken11820 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_JOIN_in_joinToken11852 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_kwInner_in_joinToken11884 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_JOIN_in_joinToken11887 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LEFT_in_joinToken11910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_KW_OUTER_in_joinToken11913 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_JOIN_in_joinToken11915 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RIGHT_in_joinToken11929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_KW_OUTER_in_joinToken11931 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_JOIN_in_joinToken11933 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FULL_in_joinToken11947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_KW_OUTER_in_joinToken11950 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_JOIN_in_joinToken11952 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LEFT_in_joinToken11966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_SEMI_in_joinToken11969 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_JOIN_in_joinToken11972 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LATERAL_in_lateralView12003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_lateralView12005 = new BitSet(new long[]{0x0000000080800000L,0x0000020000000000L,0x0000000000000020L,0x0000000001000020L});
	public static final BitSet FOLLOW_function_in_lateralView12007 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_tableAlias_in_lateralView12009 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_KW_AS_in_lateralView12011 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_lateralView12013 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_lateralView12016 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_lateralView12018 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_Identifier_in_tableAlias12069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableSource_in_fromSource12109 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_subQuerySource_in_fromSource12113 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_lateralView_in_fromSource12117 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_KW_TABLESAMPLE_in_tableBucketSample12151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_tableBucketSample12153 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_KW_BUCKET_in_tableBucketSample12155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_Number_in_tableBucketSample12160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_OUT_in_tableBucketSample12163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_KW_OF_in_tableBucketSample12165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_Number_in_tableBucketSample12170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_ON_in_tableBucketSample12174 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_tableBucketSample12178 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_COMMA_in_tableBucketSample12181 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_tableBucketSample12185 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableBucketSample12191 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLESAMPLE_in_splitSample12238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_splitSample12240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_Number_in_splitSample12246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_KW_PERCENT_in_splitSample12249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_splitSample12251 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableBucketSample_in_tableSample12291 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_splitSample_in_tableSample12299 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableName_in_tableSource12328 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_tableSample_in_tableSource12333 = new BitSet(new long[]{0x0000000000800002L});
	public static final BitSet FOLLOW_Identifier_in_tableSource12340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_tableName12393 = new BitSet(new long[]{0x0000000000010000L});
	public static final BitSet FOLLOW_DOT_in_tableName12395 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_tableName12401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_viewName12452 = new BitSet(new long[]{0x0000000000010000L});
	public static final BitSet FOLLOW_DOT_in_viewName12454 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_viewName12460 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_subQuerySource12508 = new BitSet(new long[]{0x0000000000000000L,0x0002000100000000L,0x0010010000000020L});
	public static final BitSet FOLLOW_queryStatementExpression_in_subQuerySource12510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_subQuerySource12512 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_subQuerySource12514 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WHERE_in_whereClause12557 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_searchCondition_in_whereClause12559 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_searchCondition12598 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GROUP_in_groupByClause12632 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_KW_BY_in_groupByClause12634 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_groupByExpression_in_groupByClause12640 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_groupByClause12648 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_groupByExpression_in_groupByClause12650 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_expression_in_groupByExpression12697 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_HAVING_in_havingClause12728 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_havingCondition_in_havingClause12730 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_havingCondition12769 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ORDER_in_orderByClause12801 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_KW_BY_in_orderByClause12803 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_columnRefOrder_in_orderByClause12809 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_orderByClause12817 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_columnRefOrder_in_orderByClause12819 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_CLUSTER_in_clusterByClause12861 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_KW_BY_in_clusterByClause12863 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_clusterByClause12869 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_clusterByClause12877 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_clusterByClause12879 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_DISTRIBUTE_in_distributeByClause12922 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_KW_BY_in_distributeByClause12924 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_distributeByClause12930 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_distributeByClause12933 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_distributeByClause12935 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_SORT_in_sortByClause12977 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_KW_BY_in_sortByClause12979 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_columnRefOrder_in_sortByClause12985 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_sortByClause12993 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_columnRefOrder_in_sortByClause12995 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_functionName_in_function13038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function13044 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000200L,0x0000000000001420L,0x0F13240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_STAR_in_function13065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_DISTINCT_in_function13081 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E13240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_function13086 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_COMMA_in_function13089 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_function13091 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function13109 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CAST_in_castExpression13271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_castExpression13277 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_castExpression13289 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_KW_AS_in_castExpression13301 = new BitSet(new long[]{0x8000007000000000L,0x0004000020000801L,0x2000000000000000L,0x000000000000C010L});
	public static final BitSet FOLLOW_primitiveType_in_castExpression13313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_castExpression13319 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CASE_in_caseExpression13360 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_caseExpression13362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_KW_WHEN_in_caseExpression13369 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_caseExpression13371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_KW_THEN_in_caseExpression13373 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_caseExpression13375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000014000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_KW_ELSE_in_caseExpression13384 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_caseExpression13386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_KW_END_in_caseExpression13394 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CASE_in_whenExpression13436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_KW_WHEN_in_whenExpression13445 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_whenExpression13447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_KW_THEN_in_whenExpression13449 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_whenExpression13451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000014000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_KW_ELSE_in_whenExpression13460 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_whenExpression13462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_KW_END_in_whenExpression13470 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Number_in_constant13512 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_constant13520 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringLiteralSequence_in_constant13528 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BigintLiteral_in_constant13536 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SmallintLiteral_in_constant13544 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TinyintLiteral_in_constant13552 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_charSetStringLiteral_in_constant13560 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_booleanValue_in_constant13568 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_stringLiteralSequence13589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_stringLiteralSequence13591 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_CharSetName_in_charSetStringLiteral13636 = new BitSet(new long[]{0x0000000000000800L});
	public static final BitSet FOLLOW_CharSetLiteral_in_charSetStringLiteral13640 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_precedenceOrExpression_in_expression13683 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NULL_in_atomExpression13704 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constant_in_atomExpression13716 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_in_atomExpression13724 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_castExpression_in_atomExpression13732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_caseExpression_in_atomExpression13740 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_whenExpression_in_atomExpression13748 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableOrColumn_in_atomExpression13756 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_atomExpression13764 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_atomExpression13767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_atomExpression13769 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_atomExpression_in_precedenceFieldExpression13792 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_LSQUARE_in_precedenceFieldExpression13796 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_precedenceFieldExpression13799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_precedenceFieldExpression13801 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_DOT_in_precedenceFieldExpression13808 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_Identifier_in_precedenceFieldExpression13811 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_NULL_in_nullCondition13864 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_nullCondition13878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_KW_NULL_in_nullCondition13880 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_precedenceUnaryOperator_in_precedenceUnaryPrefixExpression13908 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001020L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_precedenceFieldExpression_in_precedenceUnaryPrefixExpression13913 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_precedenceUnaryPrefixExpression_in_precedenceUnarySuffixExpression13930 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_IS_in_precedenceUnarySuffixExpression13935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
	public static final BitSet FOLLOW_nullCondition_in_precedenceUnarySuffixExpression13937 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BITWISEXOR_in_precedenceBitwiseXorOperator13985 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression14006 = new BitSet(new long[]{0x0000000000000042L});
	public static final BitSet FOLLOW_precedenceBitwiseXorOperator_in_precedenceBitwiseXorExpression14009 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001020L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression14012 = new BitSet(new long[]{0x0000000000000042L});
	public static final BitSet FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression14069 = new BitSet(new long[]{0x0000000000006002L,0x0000000000000000L,0x0000000000000000L,0x0100400000000000L});
	public static final BitSet FOLLOW_precedenceStarOperator_in_precedenceStarExpression14072 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001020L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression14075 = new BitSet(new long[]{0x0000000000006002L,0x0000000000000000L,0x0000000000000000L,0x0100400000000000L});
	public static final BitSet FOLLOW_precedenceStarExpression_in_precedencePlusExpression14124 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0002200000000000L});
	public static final BitSet FOLLOW_precedencePlusOperator_in_precedencePlusExpression14127 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001020L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_precedenceStarExpression_in_precedencePlusExpression14130 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0002200000000000L});
	public static final BitSet FOLLOW_AMPERSAND_in_precedenceAmpersandOperator14154 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression14175 = new BitSet(new long[]{0x0000000000000012L});
	public static final BitSet FOLLOW_precedenceAmpersandOperator_in_precedenceAmpersandExpression14178 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001020L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression14181 = new BitSet(new long[]{0x0000000000000012L});
	public static final BitSet FOLLOW_BITWISEOR_in_precedenceBitwiseOrOperator14205 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression14226 = new BitSet(new long[]{0x0000000000000022L});
	public static final BitSet FOLLOW_precedenceBitwiseOrOperator_in_precedenceBitwiseOrExpression14229 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001020L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression14232 = new BitSet(new long[]{0x0000000000000022L});
	public static final BitSet FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualOperator14286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_precedenceEqualOperator14290 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOTEQUAL_in_precedenceEqualOperator14294 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESSTHANOREQUALTO_in_precedenceEqualOperator14298 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESSTHAN_in_precedenceEqualOperator14302 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GREATERTHANOREQUALTO_in_precedenceEqualOperator14306 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GREATERTHAN_in_precedenceEqualOperator14310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14334 = new BitSet(new long[]{0x0000000000340002L,0x1000080000000000L,0x0001020000000400L,0x0000830000000000L});
	public static final BitSet FOLLOW_KW_NOT_in_precedenceEqualExpression14356 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0001020000000000L});
	public static final BitSet FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualExpression14358 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001020L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14362 = new BitSet(new long[]{0x0000000000340002L,0x1000080000000000L,0x0001020000000400L,0x0000830000000000L});
	public static final BitSet FOLLOW_precedenceEqualOperator_in_precedenceEqualExpression14395 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001020L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression14399 = new BitSet(new long[]{0x0000000000340002L,0x1000080000000000L,0x0001020000000400L,0x0000830000000000L});
	public static final BitSet FOLLOW_KW_NOT_in_precedenceEqualExpression14428 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_IN_in_precedenceEqualExpression14430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_expressions_in_precedenceEqualExpression14432 = new BitSet(new long[]{0x0000000000340002L,0x1000080000000000L,0x0001020000000400L,0x0000830000000000L});
	public static final BitSet FOLLOW_KW_IN_in_precedenceEqualExpression14466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_expressions_in_precedenceEqualExpression14468 = new BitSet(new long[]{0x0000000000340002L,0x1000080000000000L,0x0001020000000400L,0x0000830000000000L});
	public static final BitSet FOLLOW_LPAREN_in_expressions14517 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_expressions14519 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_COMMA_in_expressions14522 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_expression_in_expressions14524 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_expressions14528 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_precedenceNotOperator14554 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_precedenceNotOperator_in_precedenceNotExpression14576 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_precedenceEqualExpression_in_precedenceNotExpression14581 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_AND_in_precedenceAndOperator14603 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_precedenceNotExpression_in_precedenceAndExpression14624 = new BitSet(new long[]{0x0000000020000002L});
	public static final BitSet FOLLOW_precedenceAndOperator_in_precedenceAndExpression14627 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_precedenceNotExpression_in_precedenceAndExpression14630 = new BitSet(new long[]{0x0000000020000002L});
	public static final BitSet FOLLOW_KW_OR_in_precedenceOrOperator14654 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_precedenceAndExpression_in_precedenceOrExpression14675 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_precedenceOrOperator_in_precedenceOrExpression14678 = new BitSet(new long[]{0x0000300080801080L,0x0000020001000000L,0x0000000000001420L,0x0E03240001100020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_precedenceAndExpression_in_precedenceOrExpression14681 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_KW_TRUE_in_booleanValue14705 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FALSE_in_booleanValue14710 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableName_in_tableOrPartition14730 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionSpec_in_tableOrPartition14732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTITION_in_partitionSpec14764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partitionSpec14771 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_partitionVal_in_partitionSpec14773 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_COMMA_in_partitionSpec14776 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_partitionVal_in_partitionSpec14779 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partitionSpec14784 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_partitionVal14815 = new BitSet(new long[]{0x0000000000040002L});
	public static final BitSet FOLLOW_EQUAL_in_partitionVal14818 = new BitSet(new long[]{0x0000000000001080L,0x0000000001000000L,0x0000000000000000L,0x0601000000100000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_constant_in_partitionVal14820 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sysFuncNames_in_descFuncNames15183 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_descFuncNames15191 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_descFuncNames15199 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_kwUser15216 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_kwRole15226 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_Identifier_in_kwInner15236 = new BitSet(new long[]{0x0000000000000002L});
}
